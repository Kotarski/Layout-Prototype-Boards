var Component;
(function (Component) {
    let Types;
    (function (Types) {
        ;
        ;
        ;
        ;
    })(Types = Component.Types || (Component.Types = {}));
    class Instance {
        constructor(values) {
            this.group = Svg.Element.Group.make();
            this.connectorSets = [];
            this.name = values.name;
            this.disabled = values.disabled || false;
        }
    }
    Component.Instance = Instance;
    function getMaker(instanceClass, defaulter, initialiser) {
        return (partialValues, log = true) => {
            if (log) {
                console.groupCollapsed("Loading...");
            }
            const values = loadObjectWithDefaults(defaulter, partialValues, log);
            if (log) {
                console.groupEnd();
            }
            const component = new instanceClass(values);
            if (initialiser)
                initialiser(component);
            component.draw();
            component.makeConnectors();
            if (log) {
                console.groupCollapsed("%s: %o", component.name, component.group.element);
                console.log(component);
                console.groupEnd();
            }
            $(component.group.element).addClass(component.name);
            return component;
        };
    }
    Component.getMaker = getMaker;
    function loadObjectWithDefaults(defaulter, partial, log = true) {
        const result = Object.keys(defaulter).reduce((acc, key) => {
            if (log) {
                console.group(key);
            }
            const defaultFn = defaulter[key];
            const partialValue = (partial) ? partial[key] : undefined;
            acc[key] = defaultFn(partialValue, log);
            if (log) {
                console.groupEnd();
            }
            return acc;
        }, {});
        return result;
    }
    function makeMap(map, correspondsTo) {
        return Object.assign(map, { correspondsTo });
    }
    Component.makeMap = makeMap;
})(Component || (Component = {}));
export default Component;
//# sourceMappingURL=data:application/json;base64,