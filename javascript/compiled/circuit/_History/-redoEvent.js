import Events from "../events";
export default function redoEvent(state) {
    if (state.currentIdx >= state.lastIdx)
        return state;
    const currentIdx = state.currentIdx + 1;
    const currentEvent = state.events[state.currentIdx];
    const undoEvent = currentEvent.map(development => development.participant).map(participant => ({
        participant,
        state: participant.getState()
    }));
    currentEvent.forEach(development => {
        Object.assign(development.participant, development.state);
        if (development.participant.group) {
            $(development.participant.group.element).trigger(Events.draw);
        }
    });
    const previousEvents = state.events.slice(0, state.currentIdx);
    const nextEvents = state.events.slice(state.currentIdx + 1);
    const events = [...previousEvents, undoEvent, ...nextEvents];
    return { events, currentIdx, lastIdx: state.lastIdx };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLXJlZG9FdmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3R5cGVzY3JpcHQvQ2lyY3VpdC9fSGlzdG9yeS8tcmVkb0V2ZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE9BQU8sTUFBTSxNQUFNLFdBQVcsQ0FBQztBQUMvQixNQUFNLENBQUMsT0FBTyxVQUFVLFNBQVMsQ0FBQyxLQUFtQjtJQUNsRCxJQUFJLEtBQUssQ0FBQyxVQUFVLElBQUksS0FBSyxDQUFDLE9BQU87UUFBRSxPQUFPLEtBQUssQ0FBQztJQUdwRCxNQUFNLFVBQVUsR0FBRyxLQUFLLENBQUMsVUFBVSxHQUFHLENBQUMsQ0FBQztJQUV4QyxNQUFNLFlBQVksR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUdwRCxNQUFNLFNBQVMsR0FBRyxZQUFZLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxFQUFFLENBQUMsV0FBVyxDQUFDLFdBQVcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDNUYsV0FBVztRQUNYLEtBQUssRUFBRSxXQUFXLENBQUMsUUFBUSxFQUFFO0tBQy9CLENBQUMsQ0FBQyxDQUFDO0lBR0osWUFBWSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsRUFBRTtRQUNoQyxNQUFNLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxXQUFXLEVBQUUsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzFELElBQUksV0FBVyxDQUFDLFdBQVcsQ0FBQyxLQUFLLEVBQUU7WUFDaEMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDaEU7SUFDSixDQUFDLENBQUMsQ0FBQztJQUdILE1BQU0sY0FBYyxHQUFZLEtBQUssQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxLQUFLLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDeEUsTUFBTSxVQUFVLEdBQVksS0FBSyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLFVBQVUsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUNyRSxNQUFNLE1BQU0sR0FBRyxDQUFDLEdBQUcsY0FBYyxFQUFFLFNBQVMsRUFBRSxHQUFHLFVBQVUsQ0FBQyxDQUFDO0lBRTdELE9BQU8sRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxLQUFLLENBQUMsT0FBTyxFQUFFLENBQUE7QUFDeEQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGhpc3RvcnlzdGF0ZSwgZXZlbnQgfSBmcm9tIFwiLi90eXBlc1wiO1xyXG4vL1RPRE86IFJlbW92ZSBFdmVudHMgZGVwZW5kYW5jeVxyXG5pbXBvcnQgRXZlbnRzIGZyb20gXCIuLi9ldmVudHNcIjtcclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcmVkb0V2ZW50KHN0YXRlOiBoaXN0b3J5c3RhdGUpOiBoaXN0b3J5c3RhdGUge1xyXG4gICBpZiAoc3RhdGUuY3VycmVudElkeCA+PSBzdGF0ZS5sYXN0SWR4KSByZXR1cm4gc3RhdGU7XHJcblxyXG4gICAvLyBHbyBmb3J3YXJkIG9uZSBldmVudFxyXG4gICBjb25zdCBjdXJyZW50SWR4ID0gc3RhdGUuY3VycmVudElkeCArIDE7XHJcblxyXG4gICBjb25zdCBjdXJyZW50RXZlbnQgPSBzdGF0ZS5ldmVudHNbc3RhdGUuY3VycmVudElkeF07XHJcblxyXG4gICAvLyBHZXQgdGhlIGN1cnJlbnQgc3RhdGUgb2YgYWxsIHBhcnRpY2lwYW50cyB0aGF0IHdpbGwgYmUgcmV2ZXJ0ZWRcclxuICAgY29uc3QgdW5kb0V2ZW50ID0gY3VycmVudEV2ZW50Lm1hcChkZXZlbG9wbWVudCA9PiBkZXZlbG9wbWVudC5wYXJ0aWNpcGFudCkubWFwKHBhcnRpY2lwYW50ID0+ICh7XHJcbiAgICAgIHBhcnRpY2lwYW50LFxyXG4gICAgICBzdGF0ZTogcGFydGljaXBhbnQuZ2V0U3RhdGUoKVxyXG4gICB9KSk7XHJcblxyXG4gICAvLyBVbnJldmVydCB0aGUgY3VycmVudCBwYXJ0aWNpcGFudHNcclxuICAgY3VycmVudEV2ZW50LmZvckVhY2goZGV2ZWxvcG1lbnQgPT4ge1xyXG4gICAgICBPYmplY3QuYXNzaWduKGRldmVsb3BtZW50LnBhcnRpY2lwYW50LCBkZXZlbG9wbWVudC5zdGF0ZSk7XHJcbiAgICAgIGlmIChkZXZlbG9wbWVudC5wYXJ0aWNpcGFudC5ncm91cCkge1xyXG4gICAgICAgICAkKGRldmVsb3BtZW50LnBhcnRpY2lwYW50Lmdyb3VwLmVsZW1lbnQpLnRyaWdnZXIoRXZlbnRzLmRyYXcpO1xyXG4gICAgICB9XHJcbiAgIH0pO1xyXG5cclxuICAgLy8gUmVwbGFjZSB0aGUgcmVkb25lIGV2ZW50IHdpdGggYW4gZXZlbnQgdG8gdW5kbyBpdFxyXG4gICBjb25zdCBwcmV2aW91c0V2ZW50czogZXZlbnRbXSA9IHN0YXRlLmV2ZW50cy5zbGljZSgwLCBzdGF0ZS5jdXJyZW50SWR4KTtcclxuICAgY29uc3QgbmV4dEV2ZW50czogZXZlbnRbXSA9IHN0YXRlLmV2ZW50cy5zbGljZShzdGF0ZS5jdXJyZW50SWR4ICsgMSk7XHJcbiAgIGNvbnN0IGV2ZW50cyA9IFsuLi5wcmV2aW91c0V2ZW50cywgdW5kb0V2ZW50LCAuLi5uZXh0RXZlbnRzXTtcclxuXHJcbiAgIHJldHVybiB7IGV2ZW50cywgY3VycmVudElkeCwgbGFzdElkeDogc3RhdGUubGFzdElkeCB9XHJcbn1cclxuIl19