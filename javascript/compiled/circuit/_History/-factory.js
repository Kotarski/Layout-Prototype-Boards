import init from "./-init";
import addEvent from "./-addEvent";
import undoEvent from "./-undoEvent";
import redoEvent from "./-redoEvent";
import mergeEvents from "./-mergeEvents";
export default function factory(...initialParticipants) {
    let state = init(...initialParticipants);
    return {
        reInit(...participants) {
            state = init(...participants);
        },
        addEvent(...participants) {
            state = addEvent(state, ...participants);
        },
        undo() {
            state = undoEvent(state);
        },
        redo() {
            state = redoEvent(state);
        },
        mergeLast(mergeCount = 1) {
            state = mergeEvents(state, mergeCount);
        },
        getState() {
            return Object.assign({}, state, { events: [...state.events] });
        }
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLWZhY3RvcnkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi90eXBlc2NyaXB0L0NpcmN1aXQvX0hpc3RvcnkvLWZhY3RvcnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxJQUFJLE1BQU0sU0FBUyxDQUFDO0FBQzNCLE9BQU8sUUFBUSxNQUFNLGFBQWEsQ0FBQztBQUNuQyxPQUFPLFNBQVMsTUFBTSxjQUFjLENBQUM7QUFDckMsT0FBTyxTQUFTLE1BQU0sY0FBYyxDQUFDO0FBQ3JDLE9BQU8sV0FBVyxNQUFNLGdCQUFnQixDQUFDO0FBR3pDLE1BQU0sQ0FBQyxPQUFPLFVBQVUsT0FBTyxDQUFDLEdBQUcsbUJBQWtDO0lBQ2xFLElBQUksS0FBSyxHQUFHLElBQUksQ0FBQyxHQUFHLG1CQUFtQixDQUFDLENBQUM7SUFDekMsT0FBTztRQUNKLE1BQU0sQ0FBQyxHQUFHLFlBQTJCO1lBQ2xDLEtBQUssR0FBRyxJQUFJLENBQUMsR0FBRyxZQUFZLENBQUMsQ0FBQztRQUNqQyxDQUFDO1FBQ0QsUUFBUSxDQUFDLEdBQUcsWUFBMkI7WUFDcEMsS0FBSyxHQUFHLFFBQVEsQ0FBQyxLQUFLLEVBQUUsR0FBRyxZQUFZLENBQUMsQ0FBQztRQUM1QyxDQUFDO1FBQ0QsSUFBSTtZQUNELEtBQUssR0FBRyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDNUIsQ0FBQztRQUNELElBQUk7WUFDRCxLQUFLLEdBQUcsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzVCLENBQUM7UUFDRCxTQUFTLENBQUMsYUFBcUIsQ0FBQztZQUM3QixLQUFLLEdBQUcsV0FBVyxDQUFDLEtBQUssRUFBRSxVQUFVLENBQUMsQ0FBQztRQUMxQyxDQUFDO1FBQ0QsUUFBUTtZQUNMLHlCQUFZLEtBQUssSUFBRSxNQUFNLEVBQUUsQ0FBQyxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUMsSUFBRztRQUNsRCxDQUFDO0tBQ0gsQ0FBQTtBQUNKLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgaW5pdCBmcm9tIFwiLi8taW5pdFwiO1xyXG5pbXBvcnQgYWRkRXZlbnQgZnJvbSBcIi4vLWFkZEV2ZW50XCI7XHJcbmltcG9ydCB1bmRvRXZlbnQgZnJvbSBcIi4vLXVuZG9FdmVudFwiO1xyXG5pbXBvcnQgcmVkb0V2ZW50IGZyb20gXCIuLy1yZWRvRXZlbnRcIjtcclxuaW1wb3J0IG1lcmdlRXZlbnRzIGZyb20gXCIuLy1tZXJnZUV2ZW50c1wiO1xyXG5pbXBvcnQgeyBoaXN0b3J5c3RhdGUsIHBhcnRpY2lwYW50IH0gZnJvbSBcIi4vdHlwZXNcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGZhY3RvcnkoLi4uaW5pdGlhbFBhcnRpY2lwYW50czogcGFydGljaXBhbnRbXSkge1xyXG4gICBsZXQgc3RhdGUgPSBpbml0KC4uLmluaXRpYWxQYXJ0aWNpcGFudHMpO1xyXG4gICByZXR1cm4ge1xyXG4gICAgICByZUluaXQoLi4ucGFydGljaXBhbnRzOiBwYXJ0aWNpcGFudFtdKSB7XHJcbiAgICAgICAgIHN0YXRlID0gaW5pdCguLi5wYXJ0aWNpcGFudHMpO1xyXG4gICAgICB9LFxyXG4gICAgICBhZGRFdmVudCguLi5wYXJ0aWNpcGFudHM6IHBhcnRpY2lwYW50W10pIHtcclxuICAgICAgICAgc3RhdGUgPSBhZGRFdmVudChzdGF0ZSwgLi4ucGFydGljaXBhbnRzKTtcclxuICAgICAgfSxcclxuICAgICAgdW5kbygpIHtcclxuICAgICAgICAgc3RhdGUgPSB1bmRvRXZlbnQoc3RhdGUpO1xyXG4gICAgICB9LFxyXG4gICAgICByZWRvKCkge1xyXG4gICAgICAgICBzdGF0ZSA9IHJlZG9FdmVudChzdGF0ZSk7XHJcbiAgICAgIH0sXHJcbiAgICAgIG1lcmdlTGFzdChtZXJnZUNvdW50OiBudW1iZXIgPSAxKSB7XHJcbiAgICAgICAgIHN0YXRlID0gbWVyZ2VFdmVudHMoc3RhdGUsIG1lcmdlQ291bnQpO1xyXG4gICAgICB9LFxyXG4gICAgICBnZXRTdGF0ZSgpOiBoaXN0b3J5c3RhdGUge1xyXG4gICAgICAgICByZXR1cm4geyAuLi5zdGF0ZSwgZXZlbnRzOiBbLi4uc3RhdGUuZXZlbnRzXSB9O1xyXG4gICAgICB9XHJcbiAgIH1cclxufVxyXG5cclxuIl19