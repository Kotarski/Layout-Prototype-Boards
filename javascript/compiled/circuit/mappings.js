"use strict";
var Circuit;
(function (Circuit) {
    const mappingsBuilder = (() => {
        const componentMaps = Utility.tuple(Circuit.Component.wire.schematic, Circuit.Component.resistor.schematic, Circuit.Component.capacitor.schematic, Circuit.Component.inductor.schematic, Circuit.Component.diode.schematic, Circuit.Component.opAmp.schematic, Circuit.Component.power.schematic, Circuit.Component.bipolar.schematic, Circuit.Component.wire.layout, Circuit.Component.resistor.layout, Circuit.Component.capacitor.layout, Circuit.Component.inductor.layout, Circuit.Component.diode.layout, Circuit.Component.opAmp.layout, Circuit.Component.power.layout, Circuit.Component.bipolar.layout, Circuit.Component.stripboard.layout, Circuit.Component.breadboard.layoutSmall, Circuit.Component.breadboard.layoutLarge, Circuit.Component.track);
        function getComponentMapSafe(data) {
            const result = (typeof data === "string")
                ? componentMaps.find(map => map.savename === data)
                : componentMaps.find(map => map.instance === data["constructor"]);
            if (result !== undefined) {
                return result;
            }
            else {
                console.error("Component map not found with data %o", data);
                throw new Error("Component map does not exist!");
            }
        }
        function getComponentMap(data) {
            return (typeof data === "string")
                ? componentMaps.find(map => map.savename === data)
                : componentMaps.find(map => map.instance === data["constructor"]);
        }
        const connectorAcceptedTypes = {
            "pin": ["hole"],
            "hole": ["pin"],
            "brokenhole": [],
            "node": ["node"],
        };
        return {
            getComponentMap: getComponentMap,
            getComponentMapSafe: getComponentMapSafe,
            connectorAcceptedTypes: connectorAcceptedTypes,
        };
    });
    let Mappings;
    (function (Mappings) {
        function init() {
            Circuit.mappings = mappingsBuilder();
        }
        Mappings.init = init;
    })(Mappings = Circuit.Mappings || (Circuit.Mappings = {}));
})(Circuit || (Circuit = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFwcGluZ3MuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi90eXBlc2NyaXB0L2NpcmN1aXQvbWFwcGluZ3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUNBLElBQVUsT0FBTyxDQW1FaEI7QUFuRUQsV0FBVSxPQUFPO0lBQ2QsTUFBTSxlQUFlLEdBQUcsQ0FBQyxHQUFHLEVBQUU7UUFFM0IsTUFBTSxhQUFhLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FDaEMsUUFBQSxTQUFTLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFDeEIsUUFBQSxTQUFTLENBQUMsUUFBUSxDQUFDLFNBQVMsRUFDNUIsUUFBQSxTQUFTLENBQUMsU0FBUyxDQUFDLFNBQVMsRUFDN0IsUUFBQSxTQUFTLENBQUMsUUFBUSxDQUFDLFNBQVMsRUFDNUIsUUFBQSxTQUFTLENBQUMsS0FBSyxDQUFDLFNBQVMsRUFDekIsUUFBQSxTQUFTLENBQUMsS0FBSyxDQUFDLFNBQVMsRUFDekIsUUFBQSxTQUFTLENBQUMsS0FBSyxDQUFDLFNBQVMsRUFDekIsUUFBQSxTQUFTLENBQUMsT0FBTyxDQUFDLFNBQVMsRUFDM0IsUUFBQSxTQUFTLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFDckIsUUFBQSxTQUFTLENBQUMsUUFBUSxDQUFDLE1BQU0sRUFDekIsUUFBQSxTQUFTLENBQUMsU0FBUyxDQUFDLE1BQU0sRUFDMUIsUUFBQSxTQUFTLENBQUMsUUFBUSxDQUFDLE1BQU0sRUFDekIsUUFBQSxTQUFTLENBQUMsS0FBSyxDQUFDLE1BQU0sRUFDdEIsUUFBQSxTQUFTLENBQUMsS0FBSyxDQUFDLE1BQU0sRUFDdEIsUUFBQSxTQUFTLENBQUMsS0FBSyxDQUFDLE1BQU0sRUFDdEIsUUFBQSxTQUFTLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFDeEIsUUFBQSxTQUFTLENBQUMsVUFBVSxDQUFDLE1BQU0sRUFDM0IsUUFBQSxTQUFTLENBQUMsVUFBVSxDQUFDLFdBQVcsRUFDaEMsUUFBQSxTQUFTLENBQUMsVUFBVSxDQUFDLFdBQVcsRUFDaEMsUUFBQSxTQUFTLENBQUMsS0FBSyxDQUNqQixDQUFDO1FBRUYsU0FBUyxtQkFBbUIsQ0FBQyxJQUFpQztZQUMzRCxNQUFNLE1BQU0sR0FBRyxDQUFDLE9BQU8sSUFBSSxLQUFLLFFBQVEsQ0FBQztnQkFDdEMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsUUFBUSxLQUFLLElBQUksQ0FBQztnQkFDbEQsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsUUFBUSxLQUFLLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDO1lBRXJFLElBQUksTUFBTSxLQUFLLFNBQVMsRUFBRTtnQkFDdkIsT0FBTyxNQUFNLENBQUM7YUFDaEI7aUJBQU07Z0JBQ1EsT0FBTyxDQUFDLEtBQUssQ0FBQyxzQ0FBc0MsRUFBRSxJQUFJLENBQUMsQ0FBQztnQkFDeEUsTUFBTSxJQUFJLEtBQUssQ0FBQywrQkFBK0IsQ0FBQyxDQUFDO2FBQ25EO1FBQ0osQ0FBQztRQUVELFNBQVMsZUFBZSxDQUFDLElBQWlDO1lBQ3ZELE9BQU8sQ0FBQyxPQUFPLElBQUksS0FBSyxRQUFRLENBQUM7Z0JBQzlCLENBQUMsQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLFFBQVEsS0FBSyxJQUFJLENBQUM7Z0JBQ2xELENBQUMsQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLFFBQVEsS0FBSyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQztRQUN4RSxDQUFDO1FBR0QsTUFBTSxzQkFBc0IsR0FBZ0M7WUFDekQsS0FBSyxFQUFFLENBQUMsTUFBTSxDQUFDO1lBQ2YsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDO1lBQ2YsWUFBWSxFQUFFLEVBQUU7WUFDaEIsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDO1NBQ2xCLENBQUE7UUFFRCxPQUFPO1lBQ0osZUFBZSxFQUFFLGVBQWU7WUFDaEMsbUJBQW1CLEVBQUUsbUJBQW1CO1lBQ3hDLHNCQUFzQixFQUFFLHNCQUFzQjtTQUNoRCxDQUFBO0lBQ0osQ0FBQyxDQUFDLENBQUM7SUFJSCxJQUFpQixRQUFRLENBSXhCO0lBSkQsV0FBaUIsUUFBUTtRQUN0QixTQUFnQixJQUFJO1lBQ2pCLFFBQUEsUUFBUSxHQUFHLGVBQWUsRUFBRSxDQUFDO1FBQ2hDLENBQUM7UUFGZSxhQUFJLE9BRW5CLENBQUE7SUFDSixDQUFDLEVBSmdCLFFBQVEsR0FBUixnQkFBUSxLQUFSLGdCQUFRLFFBSXhCO0FBQ0osQ0FBQyxFQW5FUyxPQUFPLEtBQVAsT0FBTyxRQW1FaEIiLCJzb3VyY2VzQ29udGVudCI6WyIvL1RvZG8gdGhpcyBpcyBldmFsdWF0ZWQgdG9vIG9mdGVuXHJcbm5hbWVzcGFjZSBDaXJjdWl0IHtcclxuICAgY29uc3QgbWFwcGluZ3NCdWlsZGVyID0gKCgpID0+IHtcclxuXHJcbiAgICAgIGNvbnN0IGNvbXBvbmVudE1hcHMgPSBVdGlsaXR5LnR1cGxlKFxyXG4gICAgICAgICBDb21wb25lbnQud2lyZS5zY2hlbWF0aWMsXHJcbiAgICAgICAgIENvbXBvbmVudC5yZXNpc3Rvci5zY2hlbWF0aWMsXHJcbiAgICAgICAgIENvbXBvbmVudC5jYXBhY2l0b3Iuc2NoZW1hdGljLFxyXG4gICAgICAgICBDb21wb25lbnQuaW5kdWN0b3Iuc2NoZW1hdGljLFxyXG4gICAgICAgICBDb21wb25lbnQuZGlvZGUuc2NoZW1hdGljLFxyXG4gICAgICAgICBDb21wb25lbnQub3BBbXAuc2NoZW1hdGljLFxyXG4gICAgICAgICBDb21wb25lbnQucG93ZXIuc2NoZW1hdGljLFxyXG4gICAgICAgICBDb21wb25lbnQuYmlwb2xhci5zY2hlbWF0aWMsXHJcbiAgICAgICAgIENvbXBvbmVudC53aXJlLmxheW91dCxcclxuICAgICAgICAgQ29tcG9uZW50LnJlc2lzdG9yLmxheW91dCxcclxuICAgICAgICAgQ29tcG9uZW50LmNhcGFjaXRvci5sYXlvdXQsXHJcbiAgICAgICAgIENvbXBvbmVudC5pbmR1Y3Rvci5sYXlvdXQsXHJcbiAgICAgICAgIENvbXBvbmVudC5kaW9kZS5sYXlvdXQsXHJcbiAgICAgICAgIENvbXBvbmVudC5vcEFtcC5sYXlvdXQsXHJcbiAgICAgICAgIENvbXBvbmVudC5wb3dlci5sYXlvdXQsXHJcbiAgICAgICAgIENvbXBvbmVudC5iaXBvbGFyLmxheW91dCxcclxuICAgICAgICAgQ29tcG9uZW50LnN0cmlwYm9hcmQubGF5b3V0LFxyXG4gICAgICAgICBDb21wb25lbnQuYnJlYWRib2FyZC5sYXlvdXRTbWFsbCxcclxuICAgICAgICAgQ29tcG9uZW50LmJyZWFkYm9hcmQubGF5b3V0TGFyZ2UsXHJcbiAgICAgICAgIENvbXBvbmVudC50cmFja1xyXG4gICAgICApO1xyXG5cclxuICAgICAgZnVuY3Rpb24gZ2V0Q29tcG9uZW50TWFwU2FmZShkYXRhOiBzdHJpbmcgfCBDb21wb25lbnQuSW5zdGFuY2UpIHtcclxuICAgICAgICAgY29uc3QgcmVzdWx0ID0gKHR5cGVvZiBkYXRhID09PSBcInN0cmluZ1wiKVxyXG4gICAgICAgICAgICA/IGNvbXBvbmVudE1hcHMuZmluZChtYXAgPT4gbWFwLnNhdmVuYW1lID09PSBkYXRhKVxyXG4gICAgICAgICAgICA6IGNvbXBvbmVudE1hcHMuZmluZChtYXAgPT4gbWFwLmluc3RhbmNlID09PSBkYXRhW1wiY29uc3RydWN0b3JcIl0pO1xyXG5cclxuICAgICAgICAgaWYgKHJlc3VsdCAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIC8qTE9HU1RBUlQqL2NvbnNvbGUuZXJyb3IoXCJDb21wb25lbnQgbWFwIG5vdCBmb3VuZCB3aXRoIGRhdGEgJW9cIiwgZGF0YSk7LypMT0dFTkQqL1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb21wb25lbnQgbWFwIGRvZXMgbm90IGV4aXN0IVwiKTtcclxuICAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICBmdW5jdGlvbiBnZXRDb21wb25lbnRNYXAoZGF0YTogc3RyaW5nIHwgQ29tcG9uZW50Lkluc3RhbmNlKSB7XHJcbiAgICAgICAgIHJldHVybiAodHlwZW9mIGRhdGEgPT09IFwic3RyaW5nXCIpXHJcbiAgICAgICAgICAgID8gY29tcG9uZW50TWFwcy5maW5kKG1hcCA9PiBtYXAuc2F2ZW5hbWUgPT09IGRhdGEpXHJcbiAgICAgICAgICAgIDogY29tcG9uZW50TWFwcy5maW5kKG1hcCA9PiBtYXAuaW5zdGFuY2UgPT09IGRhdGFbXCJjb25zdHJ1Y3RvclwiXSk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vVE9ETyB1c2UgbWFwKHRzKSB0byBlbmZvcmNlIGNvcnJlY3QgdmFsdWVzXHJcbiAgICAgIGNvbnN0IGNvbm5lY3RvckFjY2VwdGVkVHlwZXM6IHsgW2tleTogc3RyaW5nXTogc3RyaW5nW10gfSA9IHtcclxuICAgICAgICAgXCJwaW5cIjogW1wiaG9sZVwiXSxcclxuICAgICAgICAgXCJob2xlXCI6IFtcInBpblwiXSxcclxuICAgICAgICAgXCJicm9rZW5ob2xlXCI6IFtdLFxyXG4gICAgICAgICBcIm5vZGVcIjogW1wibm9kZVwiXSxcclxuICAgICAgfVxyXG5cclxuICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgZ2V0Q29tcG9uZW50TWFwOiBnZXRDb21wb25lbnRNYXAsXHJcbiAgICAgICAgIGdldENvbXBvbmVudE1hcFNhZmU6IGdldENvbXBvbmVudE1hcFNhZmUsXHJcbiAgICAgICAgIGNvbm5lY3RvckFjY2VwdGVkVHlwZXM6IGNvbm5lY3RvckFjY2VwdGVkVHlwZXMsXHJcbiAgICAgIH1cclxuICAgfSk7XHJcblxyXG4gICBleHBvcnQgbGV0IG1hcHBpbmdzOiBSZXR1cm5UeXBlPHR5cGVvZiBtYXBwaW5nc0J1aWxkZXI+O1xyXG5cclxuICAgZXhwb3J0IG5hbWVzcGFjZSBNYXBwaW5ncyB7XHJcbiAgICAgIGV4cG9ydCBmdW5jdGlvbiBpbml0KCkge1xyXG4gICAgICAgICBtYXBwaW5ncyA9IG1hcHBpbmdzQnVpbGRlcigpO1xyXG4gICAgICB9XHJcbiAgIH1cclxufSJdfQ==