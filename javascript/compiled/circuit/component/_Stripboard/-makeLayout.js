"use strict";
var Circuit;
(function (Circuit) {
    var Component;
    (function (Component) {
        var _Stripboard;
        (function (_Stripboard) {
            const defaulterLayout = {
                name: ValueCheck.validate("string", "stripboard"),
                disabled: ValueCheck.validate("boolean", false),
                joints: ValueCheck.joints([{ x: 0, y: 0 }, { x: 20, y: 0 }]),
                rows: ValueCheck.integer(1),
                columns: ValueCheck.integer(1),
                trackBreaks: validateTrackBreaks([]),
            };
            function validateTrackBreaks(fallback) {
                const result = (value, log = true) => {
                    const predicate = (v) => ((value && Array.isArray(value) && value.every((tB) => {
                        return (('track' in tB) && ('hole' in tB) && (typeof tB.track === 'number') && (typeof tB.hole === 'number'));
                    })));
                    return ValueCheck.validate(predicate, fallback)(value);
                };
                return result;
            }
            _Stripboard.makeLayout = getMaker(_Stripboard.Classes.Layout, defaulterLayout, (component) => {
                Component.Addins.Graphical.init(component);
                Component.Addins.Board.init(component, true);
                Component.Addins.Selectable.init(component);
                Component.Addins.WireCreation.init(component);
                Component.Addins.Draggable.init(component);
                Component.Addins.Rotatable.init(component);
            });
        })(_Stripboard = Component._Stripboard || (Component._Stripboard = {}));
    })(Component = Circuit.Component || (Circuit.Component = {}));
})(Circuit || (Circuit = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLW1ha2VMYXlvdXQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi90eXBlc2NyaXB0L2NpcmN1aXQvY29tcG9uZW50L19TdHJpcGJvYXJkLy1tYWtlTGF5b3V0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFFQSxJQUFVLE9BQU8sQ0FvQ2hCO0FBcENELFdBQVUsT0FBTztJQUFDLElBQUEsU0FBUyxDQW9DMUI7SUFwQ2lCLFdBQUEsU0FBUztRQUFDLElBQUEsV0FBVyxDQW9DdEM7UUFwQzJCLFdBQUEsV0FBVztZQUNwQyxNQUFNLGVBQWUsR0FBdUM7Z0JBQ3pELElBQUksRUFBRSxVQUFVLENBQUMsUUFBUSxDQUFDLFFBQVEsRUFBRSxZQUFZLENBQUM7Z0JBQ2pELFFBQVEsRUFBRSxVQUFVLENBQUMsUUFBUSxDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUM7Z0JBQy9DLE1BQU0sRUFBRSxVQUFVLENBQUMsTUFBTSxDQUN0QixDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUNuQztnQkFDRCxJQUFJLEVBQUUsVUFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7Z0JBQzNCLE9BQU8sRUFBRSxVQUFVLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztnQkFDOUIsV0FBVyxFQUFFLG1CQUFtQixDQUFDLEVBQUUsQ0FBQzthQUN0QyxDQUFDO1lBRUYsU0FBUyxtQkFBbUIsQ0FBK0IsUUFBVztnQkFDbkUsTUFBTSxNQUFNLEdBQUcsQ0FBQyxLQUFjLEVBQUUsTUFBZSxJQUFJLEVBQUUsRUFBRTtvQkFDcEQsTUFBTSxTQUFTLEdBQUcsQ0FBQyxDQUFVLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxLQUFLLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsSUFBSSxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBb0IsRUFBRSxFQUFFO3dCQUN2RyxPQUFPLENBQUMsQ0FBQyxPQUFPLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQyxLQUFLLEtBQUssUUFBUSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQyxJQUFJLEtBQUssUUFBUSxDQUFDLENBQUMsQ0FBQztvQkFDakgsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO29CQUVMLE9BQU8sVUFBVSxDQUFDLFFBQVEsQ0FBSSxTQUFTLEVBQUUsUUFBUSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUM7Z0JBQzdELENBQUMsQ0FBQTtnQkFFRCxPQUFPLE1BQU0sQ0FBQztZQUNqQixDQUFDO1lBRVksc0JBQVUsR0FBRyxRQUFRLENBQUMsWUFBQSxPQUFPLENBQUMsTUFBTSxFQUFFLGVBQWUsRUFDL0QsQ0FBQyxTQUF5QixFQUFFLEVBQUU7Z0JBQzNCLFVBQUEsTUFBTSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7Z0JBQ2pDLFVBQUEsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxDQUFDO2dCQUNuQyxVQUFBLE1BQU0sQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO2dCQUNsQyxVQUFBLE1BQU0sQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO2dCQUNwQyxVQUFBLE1BQU0sQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO2dCQUNqQyxVQUFBLE1BQU0sQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1lBQ3BDLENBQUMsQ0FDSCxDQUFDO1FBR0wsQ0FBQyxFQXBDMkIsV0FBVyxHQUFYLHFCQUFXLEtBQVgscUJBQVcsUUFvQ3RDO0lBQUQsQ0FBQyxFQXBDaUIsU0FBUyxHQUFULGlCQUFTLEtBQVQsaUJBQVMsUUFvQzFCO0FBQUQsQ0FBQyxFQXBDUyxPQUFPLEtBQVAsT0FBTyxRQW9DaEIiLCJzb3VyY2VzQ29udGVudCI6WyIvLy8gPHJlZmVyZW5jZSBwYXRoPVwifmNsYXNzZXMudHNcIiAvPlxyXG5cclxubmFtZXNwYWNlIENpcmN1aXQuQ29tcG9uZW50Ll9TdHJpcGJvYXJkIHtcclxuICAgY29uc3QgZGVmYXVsdGVyTGF5b3V0OiBWYWx1ZUNoZWNrLkRlZmF1bHRlcjxUeXBlcy52YWx1ZXM+ID0ge1xyXG4gICAgICBuYW1lOiBWYWx1ZUNoZWNrLnZhbGlkYXRlKFwic3RyaW5nXCIsIFwic3RyaXBib2FyZFwiKSxcclxuICAgICAgZGlzYWJsZWQ6IFZhbHVlQ2hlY2sudmFsaWRhdGUoXCJib29sZWFuXCIsIGZhbHNlKSxcclxuICAgICAgam9pbnRzOiBWYWx1ZUNoZWNrLmpvaW50czxbVmVjdG9yLCBWZWN0b3JdPihcclxuICAgICAgICAgW3sgeDogMCwgeTogMCB9LCB7IHg6IDIwLCB5OiAwIH1dXHJcbiAgICAgICksXHJcbiAgICAgIHJvd3M6IFZhbHVlQ2hlY2suaW50ZWdlcigxKSxcclxuICAgICAgY29sdW1uczogVmFsdWVDaGVjay5pbnRlZ2VyKDEpLFxyXG4gICAgICB0cmFja0JyZWFrczogdmFsaWRhdGVUcmFja0JyZWFrcyhbXSksXHJcbiAgIH07XHJcblxyXG4gICBmdW5jdGlvbiB2YWxpZGF0ZVRyYWNrQnJlYWtzPFQgZXh0ZW5kcyBUeXBlcy50cmFja0JyZWFrW10+KGZhbGxiYWNrOiBUKTogVmFsdWVDaGVjay52YWxpZGF0ZXI8VD4ge1xyXG4gICAgICBjb25zdCByZXN1bHQgPSAodmFsdWU6IHVua25vd24sIGxvZzogYm9vbGVhbiA9IHRydWUpID0+IHtcclxuICAgICAgICAgY29uc3QgcHJlZGljYXRlID0gKHY6IHVua25vd24pID0+ICgodmFsdWUgJiYgQXJyYXkuaXNBcnJheSh2YWx1ZSkgJiYgdmFsdWUuZXZlcnkoKHRCOiBUeXBlcy50cmFja0JyZWFrKSA9PiB7XHJcbiAgICAgICAgICAgIHJldHVybiAoKCd0cmFjaycgaW4gdEIpICYmICgnaG9sZScgaW4gdEIpICYmICh0eXBlb2YgdEIudHJhY2sgPT09ICdudW1iZXInKSAmJiAodHlwZW9mIHRCLmhvbGUgPT09ICdudW1iZXInKSk7XHJcbiAgICAgICAgIH0pKSk7XHJcblxyXG4gICAgICAgICByZXR1cm4gVmFsdWVDaGVjay52YWxpZGF0ZTxUPihwcmVkaWNhdGUsIGZhbGxiYWNrKSh2YWx1ZSk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgIH1cclxuXHJcbiAgIGV4cG9ydCBjb25zdCBtYWtlTGF5b3V0ID0gZ2V0TWFrZXIoQ2xhc3Nlcy5MYXlvdXQsIGRlZmF1bHRlckxheW91dCxcclxuICAgICAgKGNvbXBvbmVudDogQ2xhc3Nlcy5MYXlvdXQpID0+IHtcclxuICAgICAgICAgQWRkaW5zLkdyYXBoaWNhbC5pbml0KGNvbXBvbmVudCk7XHJcbiAgICAgICAgIEFkZGlucy5Cb2FyZC5pbml0KGNvbXBvbmVudCwgdHJ1ZSk7XHJcbiAgICAgICAgIEFkZGlucy5TZWxlY3RhYmxlLmluaXQoY29tcG9uZW50KTtcclxuICAgICAgICAgQWRkaW5zLldpcmVDcmVhdGlvbi5pbml0KGNvbXBvbmVudCk7XHJcbiAgICAgICAgIEFkZGlucy5EcmFnZ2FibGUuaW5pdChjb21wb25lbnQpO1xyXG4gICAgICAgICBBZGRpbnMuUm90YXRhYmxlLmluaXQoY29tcG9uZW50KTtcclxuICAgICAgfVxyXG4gICApO1xyXG5cclxuXHJcbn0iXX0=