"use strict";
var Circuit;
(function (Circuit) {
    var Component;
    (function (Component) {
        var _Stripboard;
        (function (_Stripboard) {
            function makeTracks(parent) {
                let gS = Constants.gridSpacing;
                let rotation = vector(parent.joints[0]).getAngleTo(parent.joints[1]);
                let start = vector({
                    x: -((parent.columns - 1) * gS / 2),
                    y: -((parent.rows - 1) * gS / 2)
                }).rotate(rotation).sumWith(parent.joints[0]);
                let step = vector({ x: gS, y: 0 }).rotate(rotation);
                let tracks = [];
                for (let row = 0; row < parent.rows; row++) {
                    let rowStart = start.sumWith(vector({ x: 0, y: row * gS }).rotate(rotation)).vector;
                    let holeSpacings = [0].concat(Array(parent.columns - 1).fill(1));
                    let track = Component.track.make({
                        holeSpacings: holeSpacings,
                        style: "stripboard",
                        joints: [rowStart, step]
                    }, false);
                    tracks.push(track);
                }
                return tracks;
            }
            _Stripboard.makeTracks = makeTracks;
        })(_Stripboard = Component._Stripboard || (Component._Stripboard = {}));
    })(Component = Circuit.Component || (Circuit.Component = {}));
})(Circuit || (Circuit = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLW1ha2VUcmFja3MuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi90eXBlc2NyaXB0L2NpcmN1aXQvY29tcG9uZW50L19zdHJpcGJvYXJkLy1tYWtlVHJhY2tzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxJQUFVLE9BQU8sQ0FvQ2hCO0FBcENELFdBQVUsT0FBTztJQUFDLElBQUEsU0FBUyxDQW9DMUI7SUFwQ2lCLFdBQUEsU0FBUztRQUFDLElBQUEsV0FBVyxDQW9DdEM7UUFwQzJCLFdBQUEsV0FBVztZQUVwQyxTQUFnQixVQUFVLENBQUMsTUFBc0I7Z0JBQzlDLElBQUksRUFBRSxHQUFHLFNBQVMsQ0FBQyxXQUFXLENBQUM7Z0JBRS9CLElBQUksUUFBUSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFFckUsSUFBSSxLQUFLLEdBQUcsTUFBTSxDQUFDO29CQUNoQixDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLE9BQU8sR0FBRyxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDO29CQUNuQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksR0FBRyxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDO2lCQUNsQyxDQUFDLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBRzlDLElBQUksSUFBSSxHQUFHLE1BQU0sQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDO2dCQUdwRCxJQUFJLE1BQU0sR0FBNEIsRUFBRSxDQUFDO2dCQUV6QyxLQUFLLElBQUksR0FBRyxHQUFHLENBQUMsRUFBRSxHQUFHLEdBQUcsTUFBTSxDQUFDLElBQUksRUFBRSxHQUFHLEVBQUUsRUFBRTtvQkFFekMsSUFBSSxRQUFRLEdBQUcsS0FBSyxDQUFDLE9BQU8sQ0FDekIsTUFBTSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsR0FBRyxHQUFHLEVBQUUsRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDO29CQUcxRCxJQUFJLFlBQVksR0FBYSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLE9BQU8sR0FBRyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztvQkFDM0UsSUFBSSxLQUFLLEdBQUcsU0FBUyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUM7d0JBQzlCLFlBQVksRUFBRSxZQUFZO3dCQUMxQixLQUFLLEVBQUUsWUFBWTt3QkFDbkIsTUFBTSxFQUFFLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQztxQkFDMUIsRUFBRSxLQUFLLENBQUMsQ0FBQztvQkFFVixNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO2lCQUNyQjtnQkFFRCxPQUFPLE1BQU0sQ0FBQztZQUNqQixDQUFDO1lBakNlLHNCQUFVLGFBaUN6QixDQUFBO1FBQ0osQ0FBQyxFQXBDMkIsV0FBVyxHQUFYLHFCQUFXLEtBQVgscUJBQVcsUUFvQ3RDO0lBQUQsQ0FBQyxFQXBDaUIsU0FBUyxHQUFULGlCQUFTLEtBQVQsaUJBQVMsUUFvQzFCO0FBQUQsQ0FBQyxFQXBDUyxPQUFPLEtBQVAsT0FBTyxRQW9DaEIiLCJzb3VyY2VzQ29udGVudCI6WyJuYW1lc3BhY2UgQ2lyY3VpdC5Db21wb25lbnQuX1N0cmlwYm9hcmQge1xyXG5cclxuICAgZXhwb3J0IGZ1bmN0aW9uIG1ha2VUcmFja3MocGFyZW50OiBDbGFzc2VzLkxheW91dCk6IF9UcmFjay5DbGFzc2VzLkxheW91dFtdIHtcclxuICAgICAgbGV0IGdTID0gQ29uc3RhbnRzLmdyaWRTcGFjaW5nO1xyXG5cclxuICAgICAgbGV0IHJvdGF0aW9uID0gdmVjdG9yKHBhcmVudC5qb2ludHNbMF0pLmdldEFuZ2xlVG8ocGFyZW50LmpvaW50c1sxXSk7XHJcblxyXG4gICAgICBsZXQgc3RhcnQgPSB2ZWN0b3Ioe1xyXG4gICAgICAgICB4OiAtKChwYXJlbnQuY29sdW1ucyAtIDEpICogZ1MgLyAyKSxcclxuICAgICAgICAgeTogLSgocGFyZW50LnJvd3MgLSAxKSAqIGdTIC8gMilcclxuICAgICAgfSkucm90YXRlKHJvdGF0aW9uKS5zdW1XaXRoKHBhcmVudC5qb2ludHNbMF0pO1xyXG5cclxuXHJcbiAgICAgIGxldCBzdGVwID0gdmVjdG9yKHsgeDogZ1MsIHk6IDAgfSkucm90YXRlKHJvdGF0aW9uKTtcclxuXHJcblxyXG4gICAgICBsZXQgdHJhY2tzOiBfVHJhY2suQ2xhc3Nlcy5MYXlvdXRbXSA9IFtdO1xyXG5cclxuICAgICAgZm9yIChsZXQgcm93ID0gMDsgcm93IDwgcGFyZW50LnJvd3M7IHJvdysrKSB7XHJcblxyXG4gICAgICAgICBsZXQgcm93U3RhcnQgPSBzdGFydC5zdW1XaXRoKFxyXG4gICAgICAgICAgICB2ZWN0b3IoeyB4OiAwLCB5OiByb3cgKiBnUyB9KS5yb3RhdGUocm90YXRpb24pKS52ZWN0b3I7XHJcblxyXG5cclxuICAgICAgICAgbGV0IGhvbGVTcGFjaW5nczogbnVtYmVyW10gPSBbMF0uY29uY2F0KEFycmF5KHBhcmVudC5jb2x1bW5zIC0gMSkuZmlsbCgxKSk7XHJcbiAgICAgICAgIGxldCB0cmFjayA9IENvbXBvbmVudC50cmFjay5tYWtlKHtcclxuICAgICAgICAgICAgaG9sZVNwYWNpbmdzOiBob2xlU3BhY2luZ3MsXHJcbiAgICAgICAgICAgIHN0eWxlOiBcInN0cmlwYm9hcmRcIixcclxuICAgICAgICAgICAgam9pbnRzOiBbcm93U3RhcnQsIHN0ZXBdXHJcbiAgICAgICAgIH0sIGZhbHNlKTtcclxuICAgICAgICAgLy90cmFjay5ncm91cC50cmFuc2xhdGUoeyB4OiAwLCB5OiByb3cgKiBnUyB9KS5yb3RhdGUoMCk7XHJcbiAgICAgICAgIHRyYWNrcy5wdXNoKHRyYWNrKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgcmV0dXJuIHRyYWNrcztcclxuICAgfVxyXG59Il19