"use strict";
var Circuit;
(function (Circuit) {
    var Component;
    (function (Component) {
        var _Breadboard;
        (function (_Breadboard) {
            function drawSmall(instance) {
                const bodyGroup = Svg.Element.Group.make("body");
                const centre = instance.joints[_Breadboard.INDEXCENTRE];
                const rotationPoint = instance.joints[_Breadboard.INDEXROTATION];
                let rotation = vector(centre).getAngleTo(rotationPoint);
                const gS = Constants.gridSpacing;
                const railPairPathString = [
                    "M" + (gS * -14.2) + " " + (gS * -10.5),
                    "H" + (gS * 14.2),
                    "M" + (gS * -14.2) + " " + (gS * 7.5),
                    "H" + (gS * 14.2)
                ].join();
                const plus = "m-5 0 h10 m-5 -5 v10 m0 -5";
                const plussesPathString = [
                    "M" + (gS * -15) + " " + (gS * -10),
                    "M" + (gS * 15) + " " + (gS * -10),
                    "M" + (gS * -15) + " " + (gS * 8),
                    "M" + (gS * 15) + " " + (gS * 8),
                    ""
                ].join(plus);
                const minus = "m0 -5 v10 m0 -5";
                const minusesPathString = [
                    "M" + (gS * -15) + " " + (gS * -11),
                    "M" + (gS * 15) + " " + (gS * -11),
                    "M" + (gS * -15) + " " + (gS * 7),
                    "M" + (gS * 15) + " " + (gS * 7),
                    ""
                ].join(minus);
                const size = {
                    width: 32 * gS,
                    height: 22 * gS
                };
                bodyGroup.append([
                    Svg.Element.Rect.make({ x: 0, y: 0 }, size, { x: 4, y: 4 }, "body"),
                    Svg.Element.Rect.make({ x: 0, y: 0 }, { width: size.width, height: gS * 0.75, }, { x: 0, y: 0 }, "rut"),
                    Svg.Element.Rect.make({ x: 0, y: 0 }, size, { x: 4, y: 4 }, "body highlight"),
                    Svg.Element.Path.make(railPairPathString + plussesPathString, "rail positive"),
                    Svg.Element.Path.make(railPairPathString + minusesPathString, "rail negative").translate({ x: 0, y: gS * 3 }),
                    Svg.Element.Group.TextSequence.make({ x: 14.5 * gS - gS / 6, y: -6.5 * gS }, { x: 0, y: gS }, { start: 1, length: 30 }).rotate(90),
                    Svg.Element.Group.TextSequence.make({ x: 14.5 * gS - gS / 6, y: 6.5 * gS }, { x: 0, y: gS }, { start: 1, length: 30 }).rotate(90),
                    Svg.Element.Group.TextSequence.make({ x: 15.5 * gS - gS / 4, y: -5.5 * gS }, { x: gS, y: 0 }, "abcde").rotate(90),
                    Svg.Element.Group.TextSequence.make({ x: -15.5 * gS, y: -5.5 * gS }, { x: gS, y: 0 }, "abcde").rotate(90),
                    Svg.Element.Group.TextSequence.make({ x: 15.5 * gS - gS / 4, y: 5.5 * gS }, { x: -gS, y: 0 }, "jihgf").rotate(90),
                    Svg.Element.Group.TextSequence.make({ x: -15.5 * gS, y: 5.5 * gS }, { x: -gS, y: 0 }, "jihgf").rotate(90),
                ]);
                return [
                    bodyGroup.translate(centre).rotate(rotation)
                ];
            }
            _Breadboard.drawSmall = drawSmall;
        })(_Breadboard = Component._Breadboard || (Component._Breadboard = {}));
    })(Component = Circuit.Component || (Circuit.Component = {}));
})(Circuit || (Circuit = {}));
//# sourceMappingURL=data:application/json;base64,