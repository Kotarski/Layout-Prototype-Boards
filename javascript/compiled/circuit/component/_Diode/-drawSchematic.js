"use strict";
var Circuit;
(function (Circuit) {
    var Component;
    (function (Component) {
        var _Diode;
        (function (_Diode) {
            function drawSchematic(instance) {
                const bodyGroup = Svg.Element.Group.make("body");
                const cathodeEnd = instance.joints[_Diode.INDEXCATHODE];
                const anodeEnd = instance.joints[_Diode.INDEXANODE];
                const centre = vector(cathodeEnd, anodeEnd).centre().vector;
                const rotation = vector(cathodeEnd).getAngleTo(anodeEnd);
                let [cathodeStart, anodeStart] = vector({ x: -12, y: 0 }, { x: 12, y: 0 }).rotate(rotation).sumWith(centre).vectors;
                let text = (instance.breakdownVoltage < 51)
                    ? Utility.getStandardForm(instance.breakdownVoltage, 'V')
                    : Utility.getStandardForm(instance.saturationCurrent, 'A');
                const bodyPath = 'M 12 0 L -12 12 L -12 -12 L 12 0 Z';
                bodyGroup.append(Svg.Element.Path.make(bodyPath, "body highlight highlightwithfill extrathick"), Svg.Element.Path.make(bodyPath, "body black"));
                if (instance.color === "N/A") {
                    if (instance.breakdownVoltage < 51) {
                        bodyGroup.append(Svg.Element.Path.make('M 18 -12 L 12 -12 L 12 12 L 6 12', "line medium"));
                    }
                    else {
                        bodyGroup.append(Svg.Element.Path.make('M 12 -12 L 12 12', "line medium"));
                    }
                }
                else {
                    const arrowJointsBase = vector([{ x: 0, y: 3 }, { x: -4, y: 0 }, { x: 0, y: -3 }, { x: -4, y: 0 }, { x: 8, y: 0 }]);
                    const arrowJoints1 = arrowJointsBase.sumWith({ x: -16, y: -10 }).rotate(-116.43).vectors;
                    const arrowJoints2 = arrowJointsBase.sumWith({ x: -16, y: 0 }).rotate(-116.43).vectors;
                    const colorCircle = Svg.Element.Circle.make({ x: -4, y: 0 }, 4, "line thin");
                    $(colorCircle.element).css("fill", instance.color);
                    $(colorCircle.element).css("stroke", instance.color);
                    bodyGroup.append(Svg.Element.Path.make(arrowJoints1, "line black thin"), Svg.Element.Path.make(arrowJoints2, "line black thin"), colorCircle);
                }
                const textEl = Svg.Element.Text.make(text, { x: 0, y: -15 }, "text");
                return [
                    Svg.Element.Path.make([[cathodeStart, cathodeEnd], [anodeStart, anodeEnd]], "line thin"),
                    bodyGroup.translate(centre).rotate(rotation),
                    textEl.translate(centre).rotatePosition(rotation),
                ];
            }
            _Diode.drawSchematic = drawSchematic;
        })(_Diode = Component._Diode || (Component._Diode = {}));
    })(Component = Circuit.Component || (Circuit.Component = {}));
})(Circuit || (Circuit = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLWRyYXdTY2hlbWF0aWMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi90eXBlc2NyaXB0L2NpcmN1aXQvY29tcG9uZW50L19kaW9kZS8tZHJhd1NjaGVtYXRpYy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsSUFBVSxPQUFPLENBeURoQjtBQXpERCxXQUFVLE9BQU87SUFBQyxJQUFBLFNBQVMsQ0F5RDFCO0lBekRpQixXQUFBLFNBQVM7UUFBQyxJQUFBLE1BQU0sQ0F5RGpDO1FBekQyQixXQUFBLE1BQU07WUFDL0IsU0FBZ0IsYUFBYSxDQUFDLFFBQTJCO2dCQUN0RCxNQUFNLFNBQVMsR0FBRyxHQUFHLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7Z0JBRWpELE1BQU0sVUFBVSxHQUFHLFFBQVEsQ0FBQyxNQUFNLENBQUMsT0FBQSxZQUFZLENBQUMsQ0FBQztnQkFDakQsTUFBTSxRQUFRLEdBQUcsUUFBUSxDQUFDLE1BQU0sQ0FBQyxPQUFBLFVBQVUsQ0FBQyxDQUFDO2dCQUU3QyxNQUFNLE1BQU0sR0FBRyxNQUFNLENBQUMsVUFBVSxFQUFFLFFBQVEsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQztnQkFDNUQsTUFBTSxRQUFRLEdBQUcsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxRQUFRLENBQUMsQ0FBQztnQkFFekQsSUFBSSxDQUFDLFlBQVksRUFBRSxVQUFVLENBQUMsR0FBYSxNQUFNLENBQzlDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUNuQyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsT0FBTyxDQUFDO2dCQUczQyxJQUFJLElB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SjtnQkFFRCxNQUFNLE1BQU0sR0FBRyxHQUFHLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxNQUFNLENBQUMsQ0FBQztnQkFFckUsT0FBTztvQkFDSixHQUFHLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLFlBQVksRUFBRSxVQUFVLENBQUMsRUFBRSxDQUFDLFVBQVUsRUFBRSxRQUFRLENBQUMsQ0FBQyxFQUFFLFdBQVcsQ0FBQztvQkFDeEYsU0FBUyxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDO29CQUM1QyxNQUFNLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDLGNBQWMsQ0FBQyxRQUFRLENBQUM7aUJBQ25ELENBQUM7WUFDTCxDQUFDO1lBdkRlLG9CQUFhLGdCQXVENUIsQ0FBQTtRQUNKLENBQUMsRUF6RDJCLE1BQU0sR0FBTixnQkFBTSxLQUFOLGdCQUFNLFFBeURqQztJQUFELENBQUMsRUF6RGlCLFNBQVMsR0FBVCxpQkFBUyxLQUFULGlCQUFTLFFBeUQxQjtBQUFELENBQUMsRUF6RFMsT0FBTyxLQUFQLE9BQU8sUUF5RGhCIiwic291cmNlc0NvbnRlbnQiOlsibmFtZXNwYWNlIENpcmN1aXQuQ29tcG9uZW50Ll9EaW9kZSB7XHJcbiAgIGV4cG9ydCBmdW5jdGlvbiBkcmF3U2NoZW1hdGljKGluc3RhbmNlOiBDbGFzc2VzLlNjaGVtYXRpYykge1xyXG4gICAgICBjb25zdCBib2R5R3JvdXAgPSBTdmcuRWxlbWVudC5Hcm91cC5tYWtlKFwiYm9keVwiKTtcclxuXHJcbiAgICAgIGNvbnN0IGNhdGhvZGVFbmQgPSBpbnN0YW5jZS5qb2ludHNbSU5ERVhDQVRIT0RFXTtcclxuICAgICAgY29uc3QgYW5vZGVFbmQgPSBpbnN0YW5jZS5qb2ludHNbSU5ERVhBTk9ERV07XHJcblxyXG4gICAgICBjb25zdCBjZW50cmUgPSB2ZWN0b3IoY2F0aG9kZUVuZCwgYW5vZGVFbmQpLmNlbnRyZSgpLnZlY3RvcjtcclxuICAgICAgY29uc3Qgcm90YXRpb24gPSB2ZWN0b3IoY2F0aG9kZUVuZCkuZ2V0QW5nbGVUbyhhbm9kZUVuZCk7XHJcblxyXG4gICAgICBsZXQgW2NhdGhvZGVTdGFydCwgYW5vZGVTdGFydF06IFZlY3RvcltdID0gdmVjdG9yKFxyXG4gICAgICAgICB7IHg6IC0xMiwgeTogMCB9LCB7IHg6IDEyLCB5OiAwIH1cclxuICAgICAgKS5yb3RhdGUocm90YXRpb24pLnN1bVdpdGgoY2VudHJlKS52ZWN0b3JzO1xyXG5cclxuICAgICAgLy9UZXh0XHJcbiAgICAgIGxldCB0ZXh0ID0gKGluc3RhbmNlLmJyZWFrZG93blZvbHRhZ2UgPCA1MSlcclxuICAgICAgICAgPyBVdGlsaXR5LmdldFN0YW5kYXJkRm9ybShpbnN0YW5jZS5icmVha2Rvd25Wb2x0YWdlLCAnVicpXHJcbiAgICAgICAgIDogVXRpbGl0eS5nZXRTdGFuZGFyZEZvcm0oaW5zdGFuY2Uuc2F0dXJhdGlvbkN1cnJlbnQsICdBJyk7XHJcblxyXG4gICAgICBjb25zdCBib2R5UGF0aCA9ICdNIDEyIDAgTCAtMTIgMTIgTCAtMTIgLTEyIEwgMTIgMCBaJztcclxuICAgICAgYm9keUdyb3VwLmFwcGVuZChcclxuICAgICAgICAgU3ZnLkVsZW1lbnQuUGF0aC5tYWtlKGJvZHlQYXRoLCBcImJvZHkgaGlnaGxpZ2h0IGhpZ2hsaWdodHdpdGhmaWxsIGV4dHJhdGhpY2tcIiksXHJcbiAgICAgICAgIFN2Zy5FbGVtZW50LlBhdGgubWFrZShib2R5UGF0aCwgXCJib2R5IGJsYWNrXCIpXHJcbiAgICAgICk7XHJcblxyXG4gICAgICBpZiAoaW5zdGFuY2UuY29sb3IgPT09IFwiTi9BXCIpIHtcclxuICAgICAgICAgLy8gU3RhbmRhcmQgRGlvZGVcclxuICAgICAgICAgaWYgKGluc3RhbmNlLmJyZWFrZG93blZvbHRhZ2UgPCA1MSkge1xyXG4gICAgICAgICAgICBib2R5R3JvdXAuYXBwZW5kKFN2Zy5FbGVtZW50LlBhdGgubWFrZSgnTSAxOCAtMTIgTCAxMiAtMTIgTCAxMiAxMiBMIDYgMTInLCBcImxpbmUgbWVkaXVtXCIpKTtcclxuICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgYm9keUdyb3VwLmFwcGVuZChTdmcuRWxlbWVudC5QYXRoLm1ha2UoJ00gMTIgLTEyIEwgMTIgMTInLCBcImxpbmUgbWVkaXVtXCIpKTtcclxuICAgICAgICAgfVxyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAvLyBMRURcclxuICAgICAgICAgY29uc3QgYXJyb3dKb2ludHNCYXNlID0gdmVjdG9yKFt7IHg6IDAsIHk6IDMgfSwgeyB4OiAtNCwgeTogMCB9LCB7IHg6IDAsIHk6IC0zIH0sIHsgeDogLTQsIHk6IDAgfSwgeyB4OiA4LCB5OiAwIH1dKTtcclxuICAgICAgICAgY29uc3QgYXJyb3dKb2ludHMxID0gYXJyb3dKb2ludHNCYXNlLnN1bVdpdGgoeyB4OiAtMTYsIHk6IC0xMCB9KS5yb3RhdGUoLTExNi40MykudmVjdG9ycztcclxuICAgICAgICAgY29uc3QgYXJyb3dKb2ludHMyID0gYXJyb3dKb2ludHNCYXNlLnN1bVdpdGgoeyB4OiAtMTYsIHk6IDAgfSkucm90YXRlKC0xMTYuNDMpLnZlY3RvcnM7XHJcbiAgICAgICAgIGNvbnN0IGNvbG9yQ2lyY2xlID0gU3ZnLkVsZW1lbnQuQ2lyY2xlLm1ha2UoeyB4OiAtNCwgeTogMCB9LCA0LCBcImxpbmUgdGhpblwiKTtcclxuXHJcbiAgICAgICAgICQoY29sb3JDaXJjbGUuZWxlbWVudCkuY3NzKFwiZmlsbFwiLCBpbnN0YW5jZS5jb2xvcik7XHJcbiAgICAgICAgICQoY29sb3JDaXJjbGUuZWxlbWVudCkuY3NzKFwic3Ryb2tlXCIsIGluc3RhbmNlLmNvbG9yKTtcclxuXHJcbiAgICAgICAgIGJvZHlHcm91cC5hcHBlbmQoXHJcbiAgICAgICAgICAgIFN2Zy5FbGVtZW50LlBhdGgubWFrZShhcnJvd0pvaW50czEsIFwibGluZSBibGFjayB0aGluXCIpLCAvL0Fycm93MVxyXG4gICAgICAgICAgICBTdmcuRWxlbWVudC5QYXRoLm1ha2UoYXJyb3dKb2ludHMyLCBcImxpbmUgYmxhY2sgdGhpblwiKSwgLy9BcnJvdzJcclxuICAgICAgICAgICAgY29sb3JDaXJjbGUgLy9Db2xvciBJbmRpY2F0b3JcclxuICAgICAgICAgKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgY29uc3QgdGV4dEVsID0gU3ZnLkVsZW1lbnQuVGV4dC5tYWtlKHRleHQsIHsgeDogMCwgeTogLTE1IH0sIFwidGV4dFwiKTtcclxuXHJcbiAgICAgIHJldHVybiBbXHJcbiAgICAgICAgIFN2Zy5FbGVtZW50LlBhdGgubWFrZShbW2NhdGhvZGVTdGFydCwgY2F0aG9kZUVuZF0sIFthbm9kZVN0YXJ0LCBhbm9kZUVuZF1dLCBcImxpbmUgdGhpblwiKSxcclxuICAgICAgICAgYm9keUdyb3VwLnRyYW5zbGF0ZShjZW50cmUpLnJvdGF0ZShyb3RhdGlvbiksXHJcbiAgICAgICAgIHRleHRFbC50cmFuc2xhdGUoY2VudHJlKS5yb3RhdGVQb3NpdGlvbihyb3RhdGlvbiksXHJcbiAgICAgIF07XHJcbiAgIH1cclxufVxyXG4iXX0=