"use strict";
var Circuit;
(function (Circuit) {
    var Component;
    (function (Component) {
        var _Diode;
        (function (_Diode) {
            function drawLayout(instance) {
                const bodyGroup = Svg.Element.Group.make("body");
                const cathodeEnd = instance.joints[_Diode.INDEXCATHODE];
                const anodeEnd = instance.joints[_Diode.INDEXANODE];
                const centre = vector(cathodeEnd, anodeEnd).centre().vector;
                const rotation = vector(cathodeEnd).getAngleTo(anodeEnd);
                if (instance.color === "N/A") {
                    bodyGroup.append(Svg.Element.Rect.make({ x: -5.5, y: 0 }, { width: 29, height: 15 }, { x: 0, y: 0 }, "body"), Svg.Element.Rect.make({ x: 17.5, y: 0 }, { width: 5, height: 15 }, { x: 0, y: 0 }, "body"), Svg.Element.Rect.make({ x: 12, y: 0 }, { width: 6, height: 15 }, { x: 0, y: 0 }, "cathode"), Svg.Element.Rect.make({ x: 0, y: 0 }, { width: 40, height: 15 }, { x: 1, y: 1 }, "highlight nofill"));
                }
                else {
                    $(bodyGroup.element).addClass("led");
                    const bodyString = "M " + (10) + " " + (15) +
                        "a " + (18) + " " + (18) + " " + (0) + " " + (1) + " " + (0) + " " + (-20) + " " + (0) +
                        "Z";
                    const highlightString = "M " + (10) + " " + (16) +
                        "a " + (18.8) + " " + (18.8) + " " + (0) + " " + (1) + " " + (0) + " " + (-20) + " " + (0) +
                        "Z";
                    const edge = Svg.Element.Path.make(bodyString, "edge");
                    const middle = Svg.Element.Circle.make({ x: 0, y: 0 }, 14, "centre");
                    $([edge.element, middle.element]).css("fill", instance.color);
                    bodyGroup.append(edge, Svg.Element.Path.make(bodyString, "darkener"), middle, Svg.Element.Circle.make({ x: 0, y: 0 }, 8, "lightener"), Svg.Element.Path.make(highlightString, "nofill highlight")).rotate(-90);
                }
                return [
                    Svg.Element.Path.make([cathodeEnd, anodeEnd], "lead"),
                    bodyGroup.translate(centre).rotate(rotation)
                ];
            }
            _Diode.drawLayout = drawLayout;
        })(_Diode = Component._Diode || (Component._Diode = {}));
    })(Component = Circuit.Component || (Circuit.Component = {}));
})(Circuit || (Circuit = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLWRyYXdMYXlvdXQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi90eXBlc2NyaXB0L2NpcmN1aXQvY29tcG9uZW50L19kaW9kZS8tZHJhd0xheW91dC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsSUFBVSxPQUFPLENBa0RoQjtBQWxERCxXQUFVLE9BQU87SUFBQyxJQUFBLFNBQVMsQ0FrRDFCO0lBbERpQixXQUFBLFNBQVM7UUFBQyxJQUFBLE1BQU0sQ0FrRGpDO1FBbEQyQixXQUFBLE1BQU07WUFDL0IsU0FBZ0IsVUFBVSxDQUFDLFFBQXdCO2dCQUNoRCxNQUFNLFNBQVMsR0FBRyxHQUFHLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7Z0JBRWpELE1BQU0sVUFBVSxHQUFHLFFBQVEsQ0FBQyxNQUFNLENBQUMsT0FBQSxZQUFZLENBQUMsQ0FBQztnQkFDakQsTUFBTSxRQUFRLEdBQUcsUUFBUSxDQUFDLE1BQU0sQ0FBQyxPQUFBLFVBQVUsQ0FBQyxDQUFDO2dCQUU3QyxNQUFNLE1BQU0sR0FBRyxNQUFNLENBQUMsVUFBVSxFQUFFLFFBQVEsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQztnQkFDNUQsTUFBTSxRQUFRLEdBQUcsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxRQUFRLENBQUMsQ0FBQztnQkFFekQsSUFBSSxRQUFRLENBQUMsS0FBSyxLQUFLLEtBQUssRUFBRTtvQkFDM0IsU0FBUyxDQUFDLE1BQU0sQ0FDYixHQUFHLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsS0FBSyxFQUFFLEVBQUUsRUFBRSxNQUFNLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMs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QzdDLE1BQU0sRUFDTixHQUFHLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUUsV0FBVyxDQUFDLEVBQ3ZELEdBQUcsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxlQUFlLEVBQUUsa0JBQWtCLENBQUMsQ0FDNUQsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztpQkFDaEI7Z0JBRUQsT0FBTztvQkFDSixHQUFHLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxVQUFVLEVBQUUsUUFBUSxDQUFDLEVBQUUsTUFBTSxDQUFDO29CQUNyRCxTQUFTLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUM7aUJBQzlDLENBQUM7WUFDTCxDQUFDO1lBaERlLGlCQUFVLGFBZ0R6QixDQUFBO1FBQ0osQ0FBQyxFQWxEMkIsTUFBTSxHQUFOLGdCQUFNLEtBQU4sZ0JBQU0sUUFrRGpDO0lBQUQsQ0FBQyxFQWxEaUIsU0FBUyxHQUFULGlCQUFTLEtBQVQsaUJBQVMsUUFrRDFCO0FBQUQsQ0FBQyxFQWxEUyxPQUFPLEtBQVAsT0FBTyxRQWtEaEIiLCJzb3VyY2VzQ29udGVudCI6WyJuYW1lc3BhY2UgQ2lyY3VpdC5Db21wb25lbnQuX0Rpb2RlIHtcclxuICAgZXhwb3J0IGZ1bmN0aW9uIGRyYXdMYXlvdXQoaW5zdGFuY2U6IENsYXNzZXMuTGF5b3V0KSB7XHJcbiAgICAgIGNvbnN0IGJvZHlHcm91cCA9IFN2Zy5FbGVtZW50Lkdyb3VwLm1ha2UoXCJib2R5XCIpO1xyXG5cclxuICAgICAgY29uc3QgY2F0aG9kZUVuZCA9IGluc3RhbmNlLmpvaW50c1tJTkRFWENBVEhPREVdO1xyXG4gICAgICBjb25zdCBhbm9kZUVuZCA9IGluc3RhbmNlLmpvaW50c1tJTkRFWEFOT0RFXTtcclxuXHJcbiAgICAgIGNvbnN0IGNlbnRyZSA9IHZlY3RvcihjYXRob2RlRW5kLCBhbm9kZUVuZCkuY2VudHJlKCkudmVjdG9yO1xyXG4gICAgICBjb25zdCByb3RhdGlvbiA9IHZlY3RvcihjYXRob2RlRW5kKS5nZXRBbmdsZVRvKGFub2RlRW5kKTtcclxuXHJcbiAgICAgIGlmIChpbnN0YW5jZS5jb2xvciA9PT0gXCJOL0FcIikge1xyXG4gICAgICAgICBib2R5R3JvdXAuYXBwZW5kKFxyXG4gICAgICAgICAgICBTdmcuRWxlbWVudC5SZWN0Lm1ha2UoeyB4OiAtNS41LCB5OiAwIH0sIHsgd2lkdGg6IDI5LCBoZWlnaHQ6IDE1IH0sIHsgeDogMCwgeTogMCB9LCBcImJvZHlcIiksXHJcbiAgICAgICAgICAgIFN2Zy5FbGVtZW50LlJlY3QubWFrZSh7IHg6IDE3LjUsIHk6IDAgfSwgeyB3aWR0aDogNSwgaGVpZ2h0OiAxNSB9LCB7IHg6IDAsIHk6IDAgfSwgXCJib2R5XCIpLFxyXG4gICAgICAgICAgICBTdmcuRWxlbWVudC5SZWN0Lm1ha2UoeyB4OiAxMiwgeTogMCB9LCB7IHdpZHRoOiA2LCBoZWlnaHQ6IDE1IH0sIHsgeDogMCwgeTogMCB9LCBcImNhdGhvZGVcIiksXHJcbiAgICAgICAgICAgIFN2Zy5FbGVtZW50LlJlY3QubWFrZSh7IHg6IDAsIHk6IDAgfSwgeyB3aWR0aDogNDAsIGhlaWdodDogMTUgfSwgeyB4OiAxLCB5OiAxIH0sIFwiaGlnaGxpZ2h0IG5vZmlsbFwiKVxyXG4gICAgICAgICApO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAkKGJvZHlHcm91cC5lbGVtZW50KS5hZGRDbGFzcyhcImxlZFwiKTtcclxuXHJcbiAgICAgICAgIGNvbnN0IGJvZHlTdHJpbmcgPVxyXG4gICAgICAgICAgICBcIk0gXCIgKyAoMTApICsgXCIgXCIgKyAoMTUpICtcclxuICAgICAgICAgICAgXCJhIFwiICsgKDE4KSArIFwiIFwiICsgKDE4KSArIFwiIFwiICsgKDApICsgXCIgXCIgKyAoMSkgKyBcIiBcIiArICgwKSArIFwiIFwiICsgKC0yMCkgKyBcIiBcIiArICgwKSArXHJcbiAgICAgICAgICAgIFwiWlwiO1xyXG5cclxuICAgICAgICAgY29uc3QgaGlnaGxpZ2h0U3RyaW5nID1cclxuICAgICAgICAgICAgXCJNIFwiICsgKDEwKSArIFwiIFwiICsgKDE2KSArXHJcbiAgICAgICAgICAgIFwiYSBcIiArICgxOC44KSArIFwiIFwiICsgKDE4LjgpICsgXCIgXCIgKyAoMCkgKyBcIiBcIiArICgxKSArIFwiIFwiICsgKDApICsgXCIgXCIgKyAoLTIwKSArIFwiIFwiICsgKDApICtcclxuICAgICAgICAgICAgXCJaXCI7XHJcblxyXG4gICAgICAgICBjb25zdCBlZGdlID0gU3ZnLkVsZW1lbnQuUGF0aC5tYWtlKGJvZHlTdHJpbmcsIFwiZWRnZVwiKTtcclxuICAgICAgICAgY29uc3QgbWlkZGxlID0gU3ZnLkVsZW1lbnQuQ2lyY2xlLm1ha2UoeyB4OiAwLCB5OiAwIH0sIDE0LCBcImNlbnRyZVwiKTtcclxuXHJcbiAgICAgICAgICQoW2VkZ2UuZWxlbWVudCwgbWlkZGxlLmVsZW1lbnRdKS5jc3MoXCJmaWxsXCIsIGluc3RhbmNlLmNvbG9yKTtcclxuXHJcblxyXG4gICAgICAgICBib2R5R3JvdXAuYXBwZW5kKFxyXG4gICAgICAgICAgICBlZGdlLFxyXG4gICAgICAgICAgICBTdmcuRWxlbWVudC5QYXRoLm1ha2UoYm9keVN0cmluZywgXCJkYXJrZW5lclwiKSxcclxuICAgICAgICAgICAgbWlkZGxlLFxyXG4gICAgICAgICAgICBTdmcuRWxlbWVudC5DaXJjbGUubWFrZSh7IHg6IDAsIHk6IDAgfSwgOCwgXCJsaWdodGVuZXJcIiksXHJcbiAgICAgICAgICAgIFN2Zy5FbGVtZW50LlBhdGgubWFrZShoaWdobGlnaHRTdHJpbmcsIFwibm9maWxsIGhpZ2hsaWdodFwiKSxcclxuICAgICAgICAgKS5yb3RhdGUoLTkwKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgcmV0dXJuIFtcclxuICAgICAgICAgU3ZnLkVsZW1lbnQuUGF0aC5tYWtlKFtjYXRob2RlRW5kLCBhbm9kZUVuZF0sIFwibGVhZFwiKSxcclxuICAgICAgICAgYm9keUdyb3VwLnRyYW5zbGF0ZShjZW50cmUpLnJvdGF0ZShyb3RhdGlvbilcclxuICAgICAgXTtcclxuICAgfVxyXG59Il19