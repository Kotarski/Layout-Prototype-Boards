"use strict";
var Svg;
(function (Svg) {
    var Element;
    (function (Element) {
        var Group;
        (function (Group) {
            var Wire;
            (function (Wire) {
                var Layout;
                (function (Layout) {
                    function make(joints, color, classes = "") {
                        const bodyGroup = Group.make(classes);
                        let coverPath, leadPath = "";
                        let coverRatio = 0.6;
                        coverPath = leadPath = "M " + joints[0].x + " " + joints[0].y;
                        coverPath += getSegmentTowardsJointMid(joints[0], joints[1], -coverRatio);
                        leadPath += getSegmentTowardsJointMid(joints[0], joints[1], 1);
                        let pathMid = getBezierBetweenJoints(joints);
                        coverPath += pathMid;
                        leadPath += pathMid;
                        coverPath += getSegmentTowardsJointMid(joints[joints.length - 2], joints[joints.length - 1], coverRatio);
                        leadPath += getSegmentTowardsJointMid(joints[joints.length - 2], joints[joints.length - 1], 1);
                        let cover = Svg.Element.Path.make(coverPath, "cover");
                        $(cover.element).css("stroke", color);
                        bodyGroup.append(Svg.Element.Path.make(leadPath, "lead"), Svg.Element.Path.make(coverPath, "leadhighlight highlight"), cover);
                        return bodyGroup;
                    }
                    Layout.make = make;
                    function getBezierBetweenJoints(joints) {
                        let path = "";
                        for (let j = 1; j < joints.length - 1; j++) {
                            let p3 = {
                                x: (joints[j + 1].x + joints[j].x) / 2,
                                y: (joints[j + 1].y + joints[j].y) / 2
                            };
                            path += "Q " + joints[j].x + " " + joints[j].y +
                                " " + p3.x + " " + p3.y;
                        }
                        return path;
                    }
                    function getSegmentTowardsJointMid(j0, j1, ratio) {
                        let changeMid = {
                            x: (j1.x - j0.x) / 2,
                            y: (j1.y - j0.y) / 2
                        };
                        if (Math.sign(ratio) >= 0) {
                            return 'l' + (changeMid.x * ratio) + " " + (changeMid.y * ratio) +
                                'm' + (changeMid.x * (1 - ratio)) + " " + (changeMid.y * (1 - ratio));
                        }
                        else {
                            ratio = Math.abs(ratio);
                            return 'm' + (changeMid.x * (1 - ratio)) + " " + (changeMid.y * (1 - ratio)) +
                                'l' + (changeMid.x * ratio) + " " + (changeMid.y * ratio);
                        }
                    }
                })(Layout = Wire.Layout || (Wire.Layout = {}));
            })(Wire = Group.Wire || (Group.Wire = {}));
        })(Group = Element.Group || (Element.Group = {}));
    })(Element = Svg.Element || (Svg.Element = {}));
})(Svg || (Svg = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiK2xheW91dC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3R5cGVzY3JpcHQvY2lyY3VpdC9jb21wb25lbnQvX3dpcmUvd2lyZS8rbGF5b3V0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxJQUFVLEdBQUcsQ0ErRVo7QUEvRUQsV0FBVSxHQUFHO0lBQUMsSUFBQSxPQUFPLENBK0VwQjtJQS9FYSxXQUFBLE9BQU87UUFBQyxJQUFBLEtBQUssQ0ErRTFCO1FBL0VxQixXQUFBLEtBQUs7WUFBQyxJQUFBLElBQUksQ0ErRS9CO1lBL0UyQixXQUFBLElBQUk7Z0JBQUMsSUFBQSxNQUFNLENBK0V0QztnQkEvRWdDLFdBQUEsTUFBTTtvQkFFcEMsU0FBZ0IsSUFBSSxDQUFDLE1BQWdCLEVBQUUsS0FBYSxFQUFFLFVBQWtCLEVBQUU7d0JBQ3ZFLE1BQU0sU0FBUyxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7d0JBRXRDLElBQUksU0FBUyxFQUFFLFFBQVEsR0FBVyxFQUFFLENBQUM7d0JBR3JDLElBQUksVUFBVSxHQUFHLEdBQUcsQ0FBQzt3QkFHckIsU0FBUyxHQUFHLFFBQVEsR0FBRyxJQUFJLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQzt3QkFHOUQsU0FBUyxJQUFJLHlCQUF5QixDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxVQUFVLENBQUMsQ0FBQzt3QkFFMUUsUUFBUSxJQUFJLHlCQUF5QixDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7d0JBRy9ELElBQUksT0FBTyxHQUFHLHNCQUFzQixDQUFDLE1BQU0sQ0FBQyxDQUFDO3dCQUM3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LEdBQUcsQ0FBQyxTQUFTLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUM7eUJBQzNFOzZCQUFNOzRCQUNKLEtBQUssR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDOzRCQUN4QixPQUFPLEdBQUcsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQyxTQUFTLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDO2dDQUN6RSxHQUFHLEdBQUcsQ0FBQyxTQUFTLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUM7eUJBQy9EO29CQUNKLENBQUM7Z0JBRUosQ0FBQyxFQS9FZ0MsTUFBTSxHQUFOLFdBQU0sS0FBTixXQUFNLFFBK0V0QztZQUFELENBQUMsRUEvRTJCLElBQUksR0FBSixVQUFJLEtBQUosVUFBSSxRQStFL0I7UUFBRCxDQUFDLEVBL0VxQixLQUFLLEdBQUwsYUFBSyxLQUFMLGFBQUssUUErRTFCO0lBQUQsQ0FBQyxFQS9FYSxPQUFPLEdBQVAsV0FBTyxLQUFQLFdBQU8sUUErRXBCO0FBQUQsQ0FBQyxFQS9FUyxHQUFHLEtBQUgsR0FBRyxRQStFWiIsInNvdXJjZXNDb250ZW50IjpbIm5hbWVzcGFjZSBTdmcuRWxlbWVudC5Hcm91cC5XaXJlLkxheW91dCB7XHJcbiAgIGV4cG9ydCB0eXBlIHR5cGUgPSBSZXR1cm5UeXBlPHR5cGVvZiBtYWtlPjtcclxuICAgZXhwb3J0IGZ1bmN0aW9uIG1ha2Uoam9pbnRzOiBWZWN0b3JbXSwgY29sb3I6IHN0cmluZywgY2xhc3Nlczogc3RyaW5nID0gXCJcIikge1xyXG4gICAgICBjb25zdCBib2R5R3JvdXAgPSBHcm91cC5tYWtlKGNsYXNzZXMpO1xyXG5cclxuICAgICAgbGV0IGNvdmVyUGF0aCwgbGVhZFBhdGg6IHN0cmluZyA9IFwiXCI7XHJcblxyXG4gICAgICAvL1RoZSBwcm9wb3J0aW9uIG9mIGhhbGYgdGhlIGVuZCBqb2ludHMgdGhhdCBpcyBjb3ZlciBub3QgbGVhZFxyXG4gICAgICBsZXQgY292ZXJSYXRpbyA9IDAuNjsgLy9CRVRXRUVOIDAgYW5kIDFcclxuXHJcbiAgICAgIC8vU3RhcnQgYXQgdGhlIGJlZ2lubmluZ1xyXG4gICAgICBjb3ZlclBhdGggPSBsZWFkUGF0aCA9IFwiTSBcIiArIGpvaW50c1swXS54ICsgXCIgXCIgKyBqb2ludHNbMF0ueTtcclxuXHJcbiAgICAgIC8vIERyYXcgY292ZXIgdG93YXJkcyB0aGUgbWlkcG9pbnQgb2YgZmlyc3QgdHdvIGpvaW50cyAoc3RhcnRpbmcgZnJvbSBjb3ZlclJhdGlvKVxyXG4gICAgICBjb3ZlclBhdGggKz0gZ2V0U2VnbWVudFRvd2FyZHNKb2ludE1pZChqb2ludHNbMF0sIGpvaW50c1sxXSwgLWNvdmVyUmF0aW8pO1xyXG4gICAgICAvLyBEcmF3IGxlYWQgcGF0aCBmcm9tIHN0YXJ0IHRvIG1pZHBvaW50IG9mIHRoZSBmaXJzdCB0d28gam9pbnRzXHJcbiAgICAgIGxlYWRQYXRoICs9IGdldFNlZ21lbnRUb3dhcmRzSm9pbnRNaWQoam9pbnRzWzBdLCBqb2ludHNbMV0sIDEpO1xyXG5cclxuICAgICAgLy8gRHJhdyBjdXJ2ZSBiZXR3ZWVuIGFsbCBtaWQgam9pbnRzXHJcbiAgICAgIGxldCBwYXRoTWlkID0gZ2V0QmV6aWVyQmV0d2VlbkpvaW50cyhqb2ludHMpO1xyXG4gICAgICBjb3ZlclBhdGggKz0gcGF0aE1pZDtcclxuICAgICAgbGVhZFBhdGggKz0gcGF0aE1pZDtcclxuXHJcbiAgICAgIC8vIERyYXcgY292ZXIgYXdheSBmcm9tIHRoZSBtaWRwb2ludCBvZiB0aGUgbGFzdCB0d28gam9pbnRzIChzdGFydGluZyBmcm9tIDEtY292ZXJSYXRpbylcclxuICAgICAgY292ZXJQYXRoICs9IGdldFNlZ21lbnRUb3dhcmRzSm9pbnRNaWQoam9pbnRzW2pvaW50cy5sZW5ndGggLSAyXSwgam9pbnRzW2pvaW50cy5sZW5ndGggLSAxXSwgY292ZXJSYXRpbylcclxuICAgICAgLy8gRHJhdyBsZWFkIHBhdGggdG8gZW5kXHJcbiAgICAgIGxlYWRQYXRoICs9IGdldFNlZ21lbnRUb3dhcmRzSm9pbnRNaWQoam9pbnRzW2pvaW50cy5sZW5ndGggLSAyXSwgam9pbnRzW2pvaW50cy5sZW5ndGggLSAxXSwgMSlcclxuXHJcbiAgICAgIGxldCBjb3ZlciA9IFN2Zy5FbGVtZW50LlBhdGgubWFrZShjb3ZlclBhdGgsIFwiY292ZXJcIik7XHJcblxyXG4gICAgICAkKGNvdmVyLmVsZW1lbnQpLmNzcyhcInN0cm9rZVwiLCBjb2xvcik7XHJcbiAgICAgIC8vU3R5bGUgYW5kIGFkZCBsZWFkLCBjb3ZlclxyXG4gICAgICAvLyhQcmVwZW5kIHNvIGhhbmRsZXMgYXBwZWFyIG9uIHRvcClcclxuXHJcbiAgICAgIGJvZHlHcm91cC5hcHBlbmQoXHJcbiAgICAgICAgIFN2Zy5FbGVtZW50LlBhdGgubWFrZShsZWFkUGF0aCwgXCJsZWFkXCIpLFxyXG4gICAgICAgICBTdmcuRWxlbWVudC5QYXRoLm1ha2UoY292ZXJQYXRoLCBcImxlYWRoaWdobGlnaHQgaGlnaGxpZ2h0XCIpLFxyXG4gICAgICAgICBjb3ZlcixcclxuICAgICAgKTtcclxuXHJcbiAgICAgIHJldHVybiBib2R5R3JvdXA7XHJcbiAgIH1cclxuXHJcbiAgIGZ1bmN0aW9uIGdldEJlemllckJldHdlZW5Kb2ludHMoam9pbnRzOiBWZWN0b3JbXSk6IHN0cmluZyB7XHJcbiAgICAgIC8vQXNzdW1lIHdlIGFyZSBzdGFydGluZyBhdCB0aGUgbWlkcG9pbnQgYmV0d2VlbiBmaXJzdCB0d28gam9pbnRzXHJcbiAgICAgIGxldCBwYXRoOiBzdHJpbmcgPSBcIlwiO1xyXG5cclxuICAgICAgZm9yIChsZXQgaiA9IDE7IGogPCBqb2ludHMubGVuZ3RoIC0gMTsgaisrKSB7XHJcblxyXG4gICAgICAgICAvLyBFbmQgZWFjaCBjdXJ2ZSBhdCB0aGUgbWlkIHBvaW50IGJldHdlZW4gdGhlIGxhc3QgdHdvIGpvaW50c1xyXG4gICAgICAgICBsZXQgcDMgPSB7XHJcbiAgICAgICAgICAgIHg6IChqb2ludHNbaiArIDFdLnggKyBqb2ludHNbal0ueCkgLyAyLFxyXG4gICAgICAgICAgICB5OiAoam9pbnRzW2ogKyAxXS55ICsgam9pbnRzW2pdLnkpIC8gMlxyXG4gICAgICAgICB9XHJcblxyXG4gICAgICAgICBwYXRoICs9IFwiUSBcIiArIGpvaW50c1tqXS54ICsgXCIgXCIgKyBqb2ludHNbal0ueSArXHJcbiAgICAgICAgICAgIFwiIFwiICsgcDMueCArIFwiIFwiICsgcDMueTtcclxuICAgICAgfVxyXG5cclxuICAgICAgcmV0dXJuIHBhdGg7XHJcbiAgIH1cclxuXHJcbiAgIC8vIFN0YXJ0aW5nIG9yIGVuZGluZyBhdCBhIG1pZHBvaW50XHJcbiAgIGZ1bmN0aW9uIGdldFNlZ21lbnRUb3dhcmRzSm9pbnRNaWQoajA6IFZlY3RvciwgajE6IFZlY3RvciwgcmF0aW86IG51bWJlcik6IHN0cmluZyB7XHJcbiAgICAgIGxldCBjaGFuZ2VNaWQgPSB7XHJcbiAgICAgICAgIHg6IChqMS54IC0gajAueCkgLyAyLFxyXG4gICAgICAgICB5OiAoajEueSAtIGowLnkpIC8gMlxyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAoTWF0aC5zaWduKHJhdGlvKSA+PSAwKSB7XHJcbiAgICAgICAgIHJldHVybiAnbCcgKyAoY2hhbmdlTWlkLnggKiByYXRpbykgKyBcIiBcIiArIChjaGFuZ2VNaWQueSAqIHJhdGlvKSArXHJcbiAgICAgICAgICAgICdtJyArIChjaGFuZ2VNaWQueCAqICgxIC0gcmF0aW8pKSArIFwiIFwiICsgKGNoYW5nZU1pZC55ICogKDEgLSByYXRpbykpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgICByYXRpbyA9IE1hdGguYWJzKHJhdGlvKTtcclxuICAgICAgICAgcmV0dXJuICdtJyArIChjaGFuZ2VNaWQueCAqICgxIC0gcmF0aW8pKSArIFwiIFwiICsgKGNoYW5nZU1pZC55ICogKDEgLSByYXRpbykpICtcclxuICAgICAgICAgICAgJ2wnICsgKGNoYW5nZU1pZC54ICogcmF0aW8pICsgXCIgXCIgKyAoY2hhbmdlTWlkLnkgKiByYXRpbyk7XHJcbiAgICAgIH1cclxuICAgfVxyXG5cclxufSJdfQ==