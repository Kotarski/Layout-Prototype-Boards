"use strict";
var Circuit;
(function (Circuit) {
    var Component;
    (function (Component) {
        var _Wire;
        (function (_Wire) {
            function drawLayout(instance) {
                const bodyGroup = Svg.Element.Group.make("body");
                const joints = instance.joints;
                let coverPath, leadPath = "";
                let coverRatio = 0.6;
                coverPath = leadPath = "M " + joints[0].x + " " + joints[0].y;
                coverPath += getSegmentTowardsJointMid(joints[0], joints[1], -coverRatio);
                leadPath += getSegmentTowardsJointMid(joints[0], joints[1], 1);
                let pathMid = getBezierBetweenJoints(joints);
                coverPath += pathMid;
                leadPath += pathMid;
                coverPath += getSegmentTowardsJointMid(joints[joints.length - 2], joints[joints.length - 1], coverRatio);
                leadPath += getSegmentTowardsJointMid(joints[joints.length - 2], joints[joints.length - 1], 1);
                let cover = Svg.Element.Path.make(coverPath, "cover");
                $(cover.element).css("stroke", instance.color);
                bodyGroup.append(Svg.Element.Path.make(leadPath, "lead"), Svg.Element.Path.make(coverPath, "leadhighlight highlight"), cover);
                return bodyGroup;
            }
            _Wire.drawLayout = drawLayout;
            function getBezierBetweenJoints(joints) {
                let path = "";
                for (let j = 1; j < joints.length - 1; j++) {
                    let p3 = {
                        x: (joints[j + 1].x + joints[j].x) / 2,
                        y: (joints[j + 1].y + joints[j].y) / 2
                    };
                    path += "Q " + joints[j].x + " " + joints[j].y +
                        " " + p3.x + " " + p3.y;
                }
                return path;
            }
            function getSegmentTowardsJointMid(j0, j1, ratio) {
                let changeMid = {
                    x: (j1.x - j0.x) / 2,
                    y: (j1.y - j0.y) / 2
                };
                if (Math.sign(ratio) >= 0) {
                    return 'l' + (changeMid.x * ratio) + " " + (changeMid.y * ratio) +
                        'm' + (changeMid.x * (1 - ratio)) + " " + (changeMid.y * (1 - ratio));
                }
                else {
                    ratio = Math.abs(ratio);
                    return 'm' + (changeMid.x * (1 - ratio)) + " " + (changeMid.y * (1 - ratio)) +
                        'l' + (changeMid.x * ratio) + " " + (changeMid.y * ratio);
                }
            }
        })(_Wire = Component._Wire || (Component._Wire = {}));
    })(Component = Circuit.Component || (Circuit.Component = {}));
})(Circuit || (Circuit = {}));
//# sourceMappingURL=data:application/json;base64,