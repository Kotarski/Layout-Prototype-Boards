"use strict";
var Circuit;
(function (Circuit) {
    var Component;
    (function (Component) {
        var Addins;
        (function (Addins) {
            var Recolorable;
            (function (Recolorable) {
                Recolorable.init = (component, where, colorPalette = defaultColorPalette) => {
                    const element = component.group.element;
                    $(element).on(Events.select, () => {
                        createRecolorHandle(component, where(), colorPalette);
                    });
                    $(element).on(Events.draw, () => {
                        clearRecolorHandle(component);
                        createRecolorHandle(component, where(), colorPalette);
                    });
                    $(element).on(Events.deselect, () => {
                        clearRecolorHandle(component);
                    });
                };
                const refreshComponent = (component) => {
                    component.group.clearChildren(":not(.handle,.connectivityhighlight)");
                    component.makeConnectors();
                    $(component.group.element).trigger(Events.draw);
                };
                const createRecolorHandle = (component, position, colorPalette) => {
                    let recolorSegmentGroup = Svg.Element.Group.make("recolorSegmentGroup");
                    let recolorHandle = Svg.Element.Circle.make(position, 7, "handle recolorHandle");
                    let segment1 = Svg.Element.Rect.make(position, { width: 10, height: 20 }, undefined, "recolorHandleSegment").rotate(45, position).translate({ x: -4, y: -4 });
                    let segment2 = Svg.Element.Rect.make(position, { width: 10, height: 20 }, undefined, "recolorHandleSegment").rotate(45, position).translate({ x: 4, y: 4 });
                    $(segment1.element).css("fill", "#4fd56b");
                    $(segment2.element).css("fill", "#d54f6b");
                    recolorSegmentGroup.append(segment1, segment2);
                    component.group.append(recolorHandle, recolorSegmentGroup);
                    $(recolorHandle.element).on("click", () => {
                        let colorIndex = colorPalette.indexOf(component.color);
                        let color;
                        if (colorIndex >= 0) {
                            color = colorPalette[(colorIndex + 1) % colorPalette.length];
                        }
                        else {
                            color = colorPalette[0];
                        }
                        ;
                        component.color = color;
                        refreshComponent(component);
                    });
                };
                const clearRecolorHandle = (component) => {
                    $(component.group.element).find(".recolorHandle").remove();
                    $(component.group.element).find(".recolorSegmentGroup").remove();
                };
                const defaultColorPalette = [
                    "#545454",
                    "red",
                    "#7575FF",
                    "#946857",
                    "#55DD55",
                    "#FFEF00",
                    "pink"
                ];
            })(Recolorable = Addins.Recolorable || (Addins.Recolorable = {}));
        })(Addins = Component.Addins || (Component.Addins = {}));
    })(Component = Circuit.Component || (Circuit.Component = {}));
})(Circuit || (Circuit = {}));
//# sourceMappingURL=data:application/json;base64,