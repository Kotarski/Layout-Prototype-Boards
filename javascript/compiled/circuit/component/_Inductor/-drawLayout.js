"use strict";
var Circuit;
(function (Circuit) {
    var Component;
    (function (Component) {
        var _Inductor;
        (function (_Inductor) {
            function drawLayout(instance) {
                const bodyGroup = Svg.Element.Group.make("body");
                const end1 = instance.joints[_Inductor.INDEXEND1];
                const end2 = instance.joints[_Inductor.INDEXEND2];
                let centre = vector(end1, end2).centre().vector;
                let rotation = vector(end1).getAngleTo(end2);
                const nCoils = 4;
                const wireWidth = 8;
                const coilTop = -15;
                const coilBottom = 15;
                const coilStart = (-(nCoils * wireWidth) / 2 + wireWidth / 4);
                let bodyPath = "M" + (coilStart) + " " + (coilBottom);
                let bodyEdgePath = "";
                for (let i = 1; i < nCoils; i++) {
                    let x0 = coilStart + wireWidth * (i - 0.5);
                    let x1 = coilStart + wireWidth * (i);
                    bodyPath += "L" + (x0) + " " + (coilTop) + "L" + (x1) + " " + (coilBottom);
                    bodyEdgePath += "M" + (x0) + " " + (coilBottom) + "L" + (x1) + " " + (coilTop);
                }
                bodyPath += "L" + (-coilStart) + " " + (coilTop);
                bodyGroup.append(Svg.Element.Path.make(bodyPath, "highlight highlightwithfill"), Svg.Element.Path.make(bodyPath, "body"), Svg.Element.Path.make(bodyEdgePath, "bodyEdge"));
                return [
                    Svg.Element.Path.make([end1, end2], "lead"),
                    bodyGroup.translate(centre).rotate(rotation)
                ];
            }
            _Inductor.drawLayout = drawLayout;
        })(_Inductor = Component._Inductor || (Component._Inductor = {}));
    })(Component = Circuit.Component || (Circuit.Component = {}));
})(Circuit || (Circuit = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLWRyYXdMYXlvdXQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi90eXBlc2NyaXB0L2NpcmN1aXQvY29tcG9uZW50L19pbmR1Y3Rvci8tZHJhd0xheW91dC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsSUFBVSxPQUFPLENBcUNoQjtBQXJDRCxXQUFVLE9BQU87SUFBQyxJQUFBLFNBQVMsQ0FxQzFCO0lBckNpQixXQUFBLFNBQVM7UUFBQyxJQUFBLFNBQVMsQ0FxQ3BDO1FBckMyQixXQUFBLFNBQVM7WUFDbEMsU0FBZ0IsVUFBVSxDQUFDLFFBQXdCO2dCQUNoRCxNQUFNLFNBQVMsR0FBRyxHQUFHLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7Z0JBRWpELE1BQU0sSUFBSSxHQUFHLFFBQVEsQ0FBQyxNQUFNLENBQUMsVUFBQSxTQUFTLENBQUMsQ0FBQztnQkFDeEMsTUFBTSxJQUFJLEdBQUcsUUFBUSxDQUFDLE1BQU0sQ0FBQyxVQUFBLFNBQVMsQ0FBQyxDQUFDO2dCQUV4QyxJQUFJLE1BQU0sR0FBRyxNQUFNLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQztnQkFDaEQsSUFBSSxRQUFRLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQztnQkFFN0MsTUFBTSxNQUFNLEdBQUcsQ0FBQyxDQUFDO2dCQUNqQixNQUFNLFNBQVMsR0FBRyxDQUFDLENBQUM7Z0JBQ3BCLE1BQU0sT0FBTyxHQUFHLENBQUMsRUFBRSxDQUFDO2dCQUNwQixNQUFNLFVBQVUsR0FBRyxFQUFFLENBQUM7Z0JBQ3RCLE1BQU0sU0FBUyxHQUFHLENBQUMsQ0FBQyxDQUFDLE1BQU0sR0FBRyxTQUFTLENBQUMsR0FBRyxDQUFDLEdBQUcsU0FBUyxHQUFHLENBQUMsQ0FBQyxDQUFDO2dCQUU5RCxJQUFJLFFBQVEsR0FBRyxHQUFHLEdBQUcsQ0FBQyxTQUFTLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQztnQkFDdEQsSUFBSSxZQUFZLEdBQUcsRUFBRSxDQUFDO2dCQUN0QixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO29CQUM5QixJQUFJLEVBQUUsR0FBRyxTQUFTLEdBQUcsU0FBUyxHQUFHLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDO29CQUMzQyxJQUFJLEVBQUUsR0FBRyxTQUFTLEdBQUcsU0FBUyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7b0JBQ3JDLFFBQVEsSUFBSSxHQUFHLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQyxPQUFPLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQztvQkFDM0UsWUFBWSxJQUFJLEdBQUcsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDLFVBQVUsQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDO2lCQUNqRjtnQkFDRCxRQUFRLElBQUksR0FBRyxHQUFHLENBQUMsQ0FBQyxTQUFTLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQztnQkFFakQsU0FBUyxDQUFDLE1BQU0sQ0FDYixHQUFHLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLDZCQUE2QixDQUFDLEVBQzlELEdBQUcsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsTUFBTSxDQUFDLEVBQ3ZDLEdBQUcsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFZLEVBQUUsVUFBVSxDQUFDLENBQ2pELENBQUM7Z0JBRUYsT0FBTztvQkFDSixHQUFHLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLEVBQUUsTUFBTSxDQUFDO29CQUMzQyxTQUFTLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUM7aUJBQzlDLENBQUM7WUFDTCxDQUFDO1lBbkNlLG9CQUFVLGFBbUN6QixDQUFBO1FBQ0osQ0FBQyxFQXJDMkIsU0FBUyxHQUFULG1CQUFTLEtBQVQsbUJBQVMsUUFxQ3BDO0lBQUQsQ0FBQyxFQXJDaUIsU0FBUyxHQUFULGlCQUFTLEtBQVQsaUJBQVMsUUFxQzFCO0FBQUQsQ0FBQyxFQXJDUyxPQUFPLEtBQVAsT0FBTyxRQXFDaEIiLCJzb3VyY2VzQ29udGVudCI6WyJuYW1lc3BhY2UgQ2lyY3VpdC5Db21wb25lbnQuX0luZHVjdG9yIHtcclxuICAgZXhwb3J0IGZ1bmN0aW9uIGRyYXdMYXlvdXQoaW5zdGFuY2U6IENsYXNzZXMuTGF5b3V0KSB7XHJcbiAgICAgIGNvbnN0IGJvZHlHcm91cCA9IFN2Zy5FbGVtZW50Lkdyb3VwLm1ha2UoXCJib2R5XCIpO1xyXG5cclxuICAgICAgY29uc3QgZW5kMSA9IGluc3RhbmNlLmpvaW50c1tJTkRFWEVORDFdO1xyXG4gICAgICBjb25zdCBlbmQyID0gaW5zdGFuY2Uuam9pbnRzW0lOREVYRU5EMl07XHJcblxyXG4gICAgICBsZXQgY2VudHJlID0gdmVjdG9yKGVuZDEsIGVuZDIpLmNlbnRyZSgpLnZlY3RvcjtcclxuICAgICAgbGV0IHJvdGF0aW9uID0gdmVjdG9yKGVuZDEpLmdldEFuZ2xlVG8oZW5kMik7XHJcblxyXG4gICAgICBjb25zdCBuQ29pbHMgPSA0O1xyXG4gICAgICBjb25zdCB3aXJlV2lkdGggPSA4O1xyXG4gICAgICBjb25zdCBjb2lsVG9wID0gLTE1O1xyXG4gICAgICBjb25zdCBjb2lsQm90dG9tID0gMTU7XHJcbiAgICAgIGNvbnN0IGNvaWxTdGFydCA9ICgtKG5Db2lscyAqIHdpcmVXaWR0aCkgLyAyICsgd2lyZVdpZHRoIC8gNCk7XHJcblxyXG4gICAgICBsZXQgYm9keVBhdGggPSBcIk1cIiArIChjb2lsU3RhcnQpICsgXCIgXCIgKyAoY29pbEJvdHRvbSk7XHJcbiAgICAgIGxldCBib2R5RWRnZVBhdGggPSBcIlwiO1xyXG4gICAgICBmb3IgKGxldCBpID0gMTsgaSA8IG5Db2lsczsgaSsrKSB7XHJcbiAgICAgICAgIGxldCB4MCA9IGNvaWxTdGFydCArIHdpcmVXaWR0aCAqIChpIC0gMC41KTtcclxuICAgICAgICAgbGV0IHgxID0gY29pbFN0YXJ0ICsgd2lyZVdpZHRoICogKGkpO1xyXG4gICAgICAgICBib2R5UGF0aCArPSBcIkxcIiArICh4MCkgKyBcIiBcIiArIChjb2lsVG9wKSArIFwiTFwiICsgKHgxKSArIFwiIFwiICsgKGNvaWxCb3R0b20pO1xyXG4gICAgICAgICBib2R5RWRnZVBhdGggKz0gXCJNXCIgKyAoeDApICsgXCIgXCIgKyAoY29pbEJvdHRvbSkgKyBcIkxcIiArICh4MSkgKyBcIiBcIiArIChjb2lsVG9wKTtcclxuICAgICAgfVxyXG4gICAgICBib2R5UGF0aCArPSBcIkxcIiArICgtY29pbFN0YXJ0KSArIFwiIFwiICsgKGNvaWxUb3ApO1xyXG5cclxuICAgICAgYm9keUdyb3VwLmFwcGVuZChcclxuICAgICAgICAgU3ZnLkVsZW1lbnQuUGF0aC5tYWtlKGJvZHlQYXRoLCBcImhpZ2hsaWdodCBoaWdobGlnaHR3aXRoZmlsbFwiKSxcclxuICAgICAgICAgU3ZnLkVsZW1lbnQuUGF0aC5tYWtlKGJvZHlQYXRoLCBcImJvZHlcIiksXHJcbiAgICAgICAgIFN2Zy5FbGVtZW50LlBhdGgubWFrZShib2R5RWRnZVBhdGgsIFwiYm9keUVkZ2VcIilcclxuICAgICAgKTtcclxuXHJcbiAgICAgIHJldHVybiBbXHJcbiAgICAgICAgIFN2Zy5FbGVtZW50LlBhdGgubWFrZShbZW5kMSwgZW5kMl0sIFwibGVhZFwiKSxcclxuICAgICAgICAgYm9keUdyb3VwLnRyYW5zbGF0ZShjZW50cmUpLnJvdGF0ZShyb3RhdGlvbilcclxuICAgICAgXTtcclxuICAgfVxyXG59Il19