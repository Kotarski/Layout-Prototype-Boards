import getStandardForm from "../../../utility/-getStandardForm";
var Circuit;
(function (Circuit) {
    var Component;
    (function (Component) {
        var _Bipolar;
        (function (_Bipolar) {
            function drawSchematic(instance) {
                const bodyGroup = Svg.Element.Group.make("body");
                const emitterEnd = instance.joints[INDEXEMITTER];
                const collectorEnd = instance.joints[INDEXCOLLECTOR];
                const baseEnd = instance.joints[INDEXBASE];
                const arrowJoints = (instance.type === "PNP")
                    ? [{ x: 15, y: -18 }, { x: 9, y: -7.5 }, { x: 24, y: -5.5 }, { x: 15, y: -18 }]
                    : [{ x: 9, y: -7.5 }, { x: 15, y: -18 }, { x: 0, y: -20 }, { x: 9, y: -7.5 }];
                bodyGroup.append(Svg.Element.Circle.make({ x: 10, y: 0 }, 30, "extrathick highlight"), Svg.Element.Line.make({ x: 25, y: -15 }, { x: 25, y: +15 }, "line medium-thick nocap"), Svg.Element.Line.make({ x: 25, y: -5 }, { x: 0, y: -20 }, "line thin"), Svg.Element.Line.make({ x: 25, y: 5 }, { x: 0, y: 20 }, "line thin"), Svg.Element.Line.make({ x: 25, y: 0 }, { x: 40, y: 0 }, "line thin"), Svg.Element.Line.make({ x: 0, y: -20 }, { x: 0, y: -28 }, "line thin"), Svg.Element.Line.make({ x: 0, y: 20 }, { x: 0, y: 28 }, "line thin"), Svg.Element.Path.make(arrowJoints, "body black thin"), Svg.Element.Circle.make({ x: 10, y: 0 }, 30, "line medium nofill"));
                const centre = vector(emitterEnd, collectorEnd).centre().vector;
                const angleCentreBase = vector(centre).getAngleTo(baseEnd);
                const angleEmitterCollector = vector(emitterEnd).getAngleTo(collectorEnd);
                const rotation = angleEmitterCollector - 90;
                const scale = (((angleEmitterCollector - angleCentreBase + 360) % 360) > 180)
                    ? { x: -1 }
                    : { x: 1 };
                const [emitterStart, collectorStart, baseStart] = vector({ x: 0, y: -28 }, { x: 0, y: 28 }, { x: 40, y: 0 }).scaleWith(scale).rotate(rotation).sumWith(centre).vectors;
                const joints = [
                    [emitterStart, emitterEnd],
                    [collectorStart, collectorEnd],
                    [baseStart, baseEnd],
                ];
                const text = getStandardForm(instance.currentGain, '');
                const textEl = Svg.Element.Text.make(text, vector({ x: -40, y: 0 }).scaleWith(scale), "text");
                return [
                    bodyGroup.translate(centre).rotate(rotation).scale(scale, false),
                    Svg.Element.Path.make(joints, "line thin"),
                    textEl.translate(centre).rotatePosition(rotation),
                ];
            }
            _Bipolar.drawSchematic = drawSchematic;
        })(_Bipolar = Component._Bipolar || (Component._Bipolar = {}));
    })(Component = Circuit.Component || (Circuit.Component = {}));
})(Circuit || (Circuit = {}));
//# sourceMappingURL=data:application/json;base64,