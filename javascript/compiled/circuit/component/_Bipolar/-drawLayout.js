"use strict";
var Circuit;
(function (Circuit) {
    var Component;
    (function (Component) {
        var _Bipolar;
        (function (_Bipolar) {
            function drawLayout(instance) {
                const bodyGroup = Svg.Element.Group.make("body");
                const emitterEnd = instance.joints[_Bipolar.INDEXEMITTER];
                const collectorEnd = instance.joints[_Bipolar.INDEXCOLLECTOR];
                const baseEnd = instance.joints[_Bipolar.INDEXBASE];
                const centre = vector(emitterEnd, collectorEnd, baseEnd).centre().vector;
                const rotation = vector(emitterEnd).getAngleTo(baseEnd);
                const [emitterStart, collectorStart, baseStart] = vector({ x: -12, y: 3 }, { x: 0, y: -2 }, { x: 12, y: 3 }).rotate(rotation).sumWith(centre).vectors;
                const joints = [
                    [emitterStart, emitterEnd],
                    [collectorStart, collectorEnd],
                    [baseStart, baseEnd],
                ];
                const semiCircleString = "M " + (16) + " " + (4) +
                    "a " + (1) + " " + (1) + " " + (0) + " " + (0) + " " + (0) + " " + (-32) + " " + (0) +
                    "v " + (3) +
                    "h " + (32) +
                    "v " + (-3) +
                    "Z";
                bodyGroup.append(Svg.Element.Path.make(semiCircleString, "body highlight"), Svg.Element.Text.make(instance.type, { x: 0, y: 4 }, "text"));
                return [
                    Svg.Element.Path.make(joints, "lead"),
                    bodyGroup.translate(centre).rotate(rotation),
                    Svg.Element.Path.make(joints, "leadguide")
                ];
            }
            _Bipolar.drawLayout = drawLayout;
        })(_Bipolar = Component._Bipolar || (Component._Bipolar = {}));
    })(Component = Circuit.Component || (Circuit.Component = {}));
})(Circuit || (Circuit = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLWRyYXdMYXlvdXQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi90eXBlc2NyaXB0L2NpcmN1aXQvY29tcG9uZW50L19iaXBvbGFyLy1kcmF3TGF5b3V0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxJQUFVLE9BQU8sQ0F3Q2hCO0FBeENELFdBQVUsT0FBTztJQUFDLElBQUEsU0FBUyxDQXdDMUI7SUF4Q2lCLFdBQUEsU0FBUztRQUFDLElBQUEsUUFBUSxDQXdDbkM7UUF4QzJCLFdBQUEsUUFBUTtZQUNqQyxTQUFnQixVQUFVLENBQUMsUUFBd0I7Z0JBQ2hELE1BQU0sU0FBUyxHQUFHLEdBQUcsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztnQkFFakQsTUFBTSxVQUFVLEdBQUcsUUFBUSxDQUFDLE1BQU0sQ0FBQyxTQUFBLFlBQVksQ0FBQyxDQUFDO2dCQUNqRCxNQUFNLFlBQVksR0FBRyxRQUFRLENBQUMsTUFBTSxDQUFDLFNBQUEsY0FBYyxDQUFDLENBQUM7Z0JBQ3JELE1BQU0sT0FBTyxHQUFHLFFBQVEsQ0FBQyxNQUFNLENBQUMsU0FBQSxTQUFTLENBQUMsQ0FBQztnQkFFM0MsTUFBTSxNQUFNLEdBQUcsTUFBTSxDQUFDLFVBQVUsRUFBRSxZQUFZLEVBQUUsT0FBTyxDQUFDLENBQUMsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDO2dCQUN6RSxNQUFNLFFBQVEsR0FBRyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFDO2dCQUV4RCxNQUFNLENBQUMsWUFBWSxFQUFFLGNBQWMsRUFBRSxTQUFTLENBQUMsR0FBYSxNQUFNLENBQy9ELEVBQUUsQ0FBQyxFQUFFLENBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FDckQsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLE9BQU8sQ0FBQztnQkFFM0MsTUFBTSxNQUFNLEdBQUc7b0JBQ1osQ0FBQyxZQUFZLEVBQUUsVUFBVSxDQUFDO29CQUMxQixDQUFDLGNBQWMsRUFBRSxZQUFZLENBQUM7b0JBQzlCLENBQUMsU0FBUyxFQUFFLE9BQU8sQ0FBQztpQkFDdEIsQ0FBQTtnQkFFRCxNQUFNLGdCQUFnQixHQUNuQixJQUFJLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUM7b0JBQ3ZCLElBQUksR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDO29CQUNwRixJQUFJLEdBQUcsQ0FBQyxDQUFDLENBQUM7b0JBQ1YsSUFBSSxHQUFHLENBQUMsRUFBRSxDQUFDO29CQUNYLElBQUksR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO29CQUNYLEdBQUcsQ0FBQztnQkFFUCxTQUFTLENBQUMsTUFBTSxDQUNiLEdBQUcsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxnQkFBZ0IsQ0FBQyxFQUN6RCxHQUFHLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLE1BQU0sQ0FBQyxDQUM5RCxDQUFDO2dCQUVGLE9BQU87b0JBQ0osR0FBRyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUM7b0JBQ3JDLFNBQVMsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQztvQkFDNUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxXQUFXLENBQUM7aUJBQzVDLENBQUM7WUFDTCxDQUFDO1lBdENlLG1CQUFVLGFBc0N6QixDQUFBO1FBQ0osQ0FBQyxFQXhDMkIsUUFBUSxHQUFSLGtCQUFRLEtBQVIsa0JBQVEsUUF3Q25DO0lBQUQsQ0FBQyxFQXhDaUIsU0FBUyxHQUFULGlCQUFTLEtBQVQsaUJBQVMsUUF3QzFCO0FBQUQsQ0FBQyxFQXhDUyxPQUFPLEtBQVAsT0FBTyxRQXdDaEIiLCJzb3VyY2VzQ29udGVudCI6WyJuYW1lc3BhY2UgQ2lyY3VpdC5Db21wb25lbnQuX0JpcG9sYXIge1xyXG4gICBleHBvcnQgZnVuY3Rpb24gZHJhd0xheW91dChpbnN0YW5jZTogQ2xhc3Nlcy5MYXlvdXQpIHtcclxuICAgICAgY29uc3QgYm9keUdyb3VwID0gU3ZnLkVsZW1lbnQuR3JvdXAubWFrZShcImJvZHlcIik7XHJcblxyXG4gICAgICBjb25zdCBlbWl0dGVyRW5kID0gaW5zdGFuY2Uuam9pbnRzW0lOREVYRU1JVFRFUl07XHJcbiAgICAgIGNvbnN0IGNvbGxlY3RvckVuZCA9IGluc3RhbmNlLmpvaW50c1tJTkRFWENPTExFQ1RPUl07XHJcbiAgICAgIGNvbnN0IGJhc2VFbmQgPSBpbnN0YW5jZS5qb2ludHNbSU5ERVhCQVNFXTtcclxuXHJcbiAgICAgIGNvbnN0IGNlbnRyZSA9IHZlY3RvcihlbWl0dGVyRW5kLCBjb2xsZWN0b3JFbmQsIGJhc2VFbmQpLmNlbnRyZSgpLnZlY3RvcjtcclxuICAgICAgY29uc3Qgcm90YXRpb24gPSB2ZWN0b3IoZW1pdHRlckVuZCkuZ2V0QW5nbGVUbyhiYXNlRW5kKTtcclxuXHJcbiAgICAgIGNvbnN0IFtlbWl0dGVyU3RhcnQsIGNvbGxlY3RvclN0YXJ0LCBiYXNlU3RhcnRdOiBWZWN0b3JbXSA9IHZlY3RvcihcclxuICAgICAgICAgeyB4OiAtIDEyLCB5OiAzIH0sIHsgeDogMCwgeTogLTIgfSwgeyB4OiAxMiwgeTogMyB9XHJcbiAgICAgICkucm90YXRlKHJvdGF0aW9uKS5zdW1XaXRoKGNlbnRyZSkudmVjdG9ycztcclxuXHJcbiAgICAgIGNvbnN0IGpvaW50cyA9IFtcclxuICAgICAgICAgW2VtaXR0ZXJTdGFydCwgZW1pdHRlckVuZF0sXHJcbiAgICAgICAgIFtjb2xsZWN0b3JTdGFydCwgY29sbGVjdG9yRW5kXSxcclxuICAgICAgICAgW2Jhc2VTdGFydCwgYmFzZUVuZF0sXHJcbiAgICAgIF1cclxuXHJcbiAgICAgIGNvbnN0IHNlbWlDaXJjbGVTdHJpbmcgPVxyXG4gICAgICAgICBcIk0gXCIgKyAoMTYpICsgXCIgXCIgKyAoNCkgK1xyXG4gICAgICAgICBcImEgXCIgKyAoMSkgKyBcIiBcIiArICgxKSArIFwiIFwiICsgKDApICsgXCIgXCIgKyAoMCkgKyBcIiBcIiArICgwKSArIFwiIFwiICsgKC0zMikgKyBcIiBcIiArICgwKSArXHJcbiAgICAgICAgIFwidiBcIiArICgzKSArXHJcbiAgICAgICAgIFwiaCBcIiArICgzMikgK1xyXG4gICAgICAgICBcInYgXCIgKyAoLTMpICtcclxuICAgICAgICAgXCJaXCI7XHJcblxyXG4gICAgICBib2R5R3JvdXAuYXBwZW5kKFxyXG4gICAgICAgICBTdmcuRWxlbWVudC5QYXRoLm1ha2Uoc2VtaUNpcmNsZVN0cmluZywgXCJib2R5IGhpZ2hsaWdodFwiKSxcclxuICAgICAgICAgU3ZnLkVsZW1lbnQuVGV4dC5tYWtlKGluc3RhbmNlLnR5cGUsIHsgeDogMCwgeTogNCB9LCBcInRleHRcIilcclxuICAgICAgKTtcclxuXHJcbiAgICAgIHJldHVybiBbXHJcbiAgICAgICAgIFN2Zy5FbGVtZW50LlBhdGgubWFrZShqb2ludHMsIFwibGVhZFwiKSxcclxuICAgICAgICAgYm9keUdyb3VwLnRyYW5zbGF0ZShjZW50cmUpLnJvdGF0ZShyb3RhdGlvbiksXHJcbiAgICAgICAgIFN2Zy5FbGVtZW50LlBhdGgubWFrZShqb2ludHMsIFwibGVhZGd1aWRlXCIpXHJcbiAgICAgIF07XHJcbiAgIH1cclxufSJdfQ==