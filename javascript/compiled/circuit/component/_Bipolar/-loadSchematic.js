"use strict";
var Circuit;
(function (Circuit) {
    var Component;
    (function (Component) {
        var _Bipolar;
        (function (_Bipolar) {
            _Bipolar.loadSchematic = (raw) => {
                const name = (raw.name);
                const currentGain = (raw.currentGain);
                const type = (raw.type);
                const orientation = ValueCheck.validate(["LR", "RL"], "LR")(raw.orientation);
                const where = ValueCheck.where({ x: 0, y: 0 })(raw.where);
                const joints = (raw.joints || deriveJoints(orientation, type, where));
                return _Bipolar.makeSchematic({ name, currentGain, type, joints });
            };
            const deriveJoints = (orientation, type, where) => {
                const [emitter, collector] = type === "PNP"
                    ? [{ x: 0, y: -50 }, { x: 0, y: +50 }]
                    : [{ x: 0, y: +50 }, { x: 0, y: -50 }];
                const [base, offset] = orientation === "LR"
                    ? [{ x: -60, y: 0 }, { x: +10 }]
                    : [{ x: +60, y: 0 }, { x: -10 }];
                return vector([emitter, collector, base]).sumWith(where, offset).vectors;
            };
        })(_Bipolar = Component._Bipolar || (Component._Bipolar = {}));
    })(Component = Circuit.Component || (Circuit.Component = {}));
})(Circuit || (Circuit = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLWxvYWRTY2hlbWF0aWMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi90eXBlc2NyaXB0L2NpcmN1aXQvY29tcG9uZW50L19CaXBvbGFyLy1sb2FkU2NoZW1hdGljLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxJQUFVLE9BQU8sQ0F3QmhCO0FBeEJELFdBQVUsT0FBTztJQUFDLElBQUEsU0FBUyxDQXdCMUI7SUF4QmlCLFdBQUEsU0FBUztRQUFDLElBQUEsUUFBUSxDQXdCbkM7UUF4QjJCLFdBQUEsUUFBUTtZQUNwQixzQkFBYSxHQUFvRCxDQUFDLEdBQVEsRUFBRSxFQUFFO2dCQUN4RixNQUFNLElBQUksR0FBRyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztnQkFDeEIsTUFBTSxXQUFXLEdBQUcsQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLENBQUM7Z0JBQ3RDLE1BQU0sSUFBSSxHQUFHLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO2dCQUV4QixNQUFNLFdBQVcsR0FBRyxVQUFVLENBQUMsUUFBUSxDQUFjLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsQ0FBQztnQkFDMUYsTUFBTSxLQUFLLEdBQUcsVUFBVSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDO2dCQUMxRCxNQUFNLE1BQU0sR0FBRyxDQUFDLEdBQUcsQ0FBQyxNQUFNLElBQUksWUFBWSxDQUFDLFdBQVcsRUFBRSxJQUFJLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQztnQkFFdEUsT0FBTyxTQUFBLGFBQWEsQ0FBQyxFQUFFLElBQUksRUFBRSxXQUFXLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxDQUFDLENBQUM7WUFDN0QsQ0FBQyxDQUFBO1lBRUQsTUFBTSxZQUFZLEdBQUcsQ0FBQyxXQUF3QixFQUFFLElBQW1CLEVBQUUsS0FBYSxFQUFFLEVBQUU7Z0JBQ25GLE1BQU0sQ0FBQyxPQUFPLEVBQUUsU0FBUyxDQUFDLEdBQUcsSUFBSSxLQUFLLEtBQUs7b0JBQ3hDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUM7b0JBQ3RDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztnQkFFMUMsTUFBTSxDQUFDLElBQUksRUFBRSxNQUFNLENBQUMsR0FBRyxXQUFXLEtBQUssSUFBSTtvQkFDeEMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUM7b0JBQ2hDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7Z0JBRXBDLE9BQU8sTUFBTSxDQUFDLENBQUMsT0FBTyxFQUFFLFNBQVMsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLENBQUMsT0FBTyxDQUFDO1lBQzVFLENBQUMsQ0FBQTtRQUNKLENBQUMsRUF4QjJCLFFBQVEsR0FBUixrQkFBUSxLQUFSLGtCQUFRLFFBd0JuQztJQUFELENBQUMsRUF4QmlCLFNBQVMsR0FBVCxpQkFBUyxLQUFULGlCQUFTLFFBd0IxQjtBQUFELENBQUMsRUF4QlMsT0FBTyxLQUFQLE9BQU8sUUF3QmhCIiwic291cmNlc0NvbnRlbnQiOlsibmFtZXNwYWNlIENpcmN1aXQuQ29tcG9uZW50Ll9CaXBvbGFyIHtcclxuICAgZXhwb3J0IGNvbnN0IGxvYWRTY2hlbWF0aWM6IENvbXBvbmVudC5UeXBlcy5sb2FkRnVuY3Rpb248Q2xhc3Nlcy5TY2hlbWF0aWM+ID0gKHJhdzogYW55KSA9PiB7XHJcbiAgICAgIGNvbnN0IG5hbWUgPSAocmF3Lm5hbWUpO1xyXG4gICAgICBjb25zdCBjdXJyZW50R2FpbiA9IChyYXcuY3VycmVudEdhaW4pO1xyXG4gICAgICBjb25zdCB0eXBlID0gKHJhdy50eXBlKTtcclxuICAgICAgLy8gSm9pbnRzIEJsb2NrXHJcbiAgICAgIGNvbnN0IG9yaWVudGF0aW9uID0gVmFsdWVDaGVjay52YWxpZGF0ZTxcIkxSXCIgfCBcIlJMXCI+KFtcIkxSXCIsIFwiUkxcIl0sIFwiTFJcIikocmF3Lm9yaWVudGF0aW9uKTtcclxuICAgICAgY29uc3Qgd2hlcmUgPSBWYWx1ZUNoZWNrLndoZXJlKHsgeDogMCwgeTogMCB9KShyYXcud2hlcmUpO1xyXG4gICAgICBjb25zdCBqb2ludHMgPSAocmF3LmpvaW50cyB8fCBkZXJpdmVKb2ludHMob3JpZW50YXRpb24sIHR5cGUsIHdoZXJlKSk7XHJcblxyXG4gICAgICByZXR1cm4gbWFrZVNjaGVtYXRpYyh7IG5hbWUsIGN1cnJlbnRHYWluLCB0eXBlLCBqb2ludHMgfSk7XHJcbiAgIH1cclxuXHJcbiAgIGNvbnN0IGRlcml2ZUpvaW50cyA9IChvcmllbnRhdGlvbjogXCJMUlwiIHwgXCJSTFwiLCB0eXBlOiBcIk5QTlwiIHwgXCJQTlBcIiwgd2hlcmU6IFZlY3RvcikgPT4ge1xyXG4gICAgICBjb25zdCBbZW1pdHRlciwgY29sbGVjdG9yXSA9IHR5cGUgPT09IFwiUE5QXCJcclxuICAgICAgICAgPyBbeyB4OiAwLCB5OiAtNTAgfSwgeyB4OiAwLCB5OiArNTAgfV1cclxuICAgICAgICAgOiBbeyB4OiAwLCB5OiArNTAgfSwgeyB4OiAwLCB5OiAtNTAgfV07XHJcblxyXG4gICAgICBjb25zdCBbYmFzZSwgb2Zmc2V0XSA9IG9yaWVudGF0aW9uID09PSBcIkxSXCJcclxuICAgICAgICAgPyBbeyB4OiAtNjAsIHk6IDAgfSwgeyB4OiArMTAgfV1cclxuICAgICAgICAgOiBbeyB4OiArNjAsIHk6IDAgfSwgeyB4OiAtMTAgfV07XHJcblxyXG4gICAgICByZXR1cm4gdmVjdG9yKFtlbWl0dGVyLCBjb2xsZWN0b3IsIGJhc2VdKS5zdW1XaXRoKHdoZXJlLCBvZmZzZXQpLnZlY3RvcnM7XHJcbiAgIH1cclxufSJdfQ==