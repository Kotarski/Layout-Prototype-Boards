"use strict";
var Circuit;
(function (Circuit) {
    var Component;
    (function (Component) {
        var _Resistor;
        (function (_Resistor) {
            function drawLayout(instance) {
                const bodyGroup = Svg.Element.Group.make("body");
                const end1 = instance.joints[_Resistor.INDEXEND1];
                const end2 = instance.joints[_Resistor.INDEXEND2];
                let centre = vector(end1, end2).centre().vector;
                let rotation = vector(end1).getAngleTo(end2);
                let bodyPath = "m-12.5 -6" + "h25" + "c15 -8 15 20 0 12" + "h-25" + "c-15 +8 -15 -20 0 -12" + "Z";
                bodyGroup.append(Svg.Element.Path.make(bodyPath, "body"), getBands(instance.resistance), Svg.Element.Path.make(bodyPath, "highlight nofill"));
                return [
                    Svg.Element.Path.make([end1, end2], "lead"),
                    bodyGroup.translate(centre).rotate(rotation)
                ];
            }
            _Resistor.drawLayout = drawLayout;
            function getBands(num) {
                let exp = num.toExponential(1);
                let sigFig1 = exp.slice(exp.indexOf(".") - 1)[0];
                let sigFig2 = exp.slice(exp.indexOf(".") + 1)[0];
                let multiplier = (parseInt(exp.slice(exp.indexOf("e") + 1), 10) - 1).toString();
                let colours = {
                    "-3": "pink",
                    "-2": "silver",
                    "-1": "gold",
                    "0": "black",
                    "1": "brown",
                    "2": "red",
                    "3": "#FF7F26",
                    "4": "yellow",
                    "5": "green",
                    "6": "blue",
                    "7": "violet",
                    "8": "grey",
                    "9": "white"
                };
                let b1 = Svg.Element.Rect.make({ x: -17.5, y: 0 }, { width: 3, height: 18 }, undefined, "band1");
                let b2 = Svg.Element.Rect.make({ x: -11, y: 0 }, { width: 3, height: 12 }, undefined, "band2");
                let b3 = Svg.Element.Rect.make({ x: -4, y: 0 }, { width: 3, height: 12 }, undefined, "band3");
                let b4 = Svg.Element.Rect.make({ x: 3.5, y: 0 }, { width: 4, height: 12 }, undefined, "band4");
                $(b1.element).css("fill", colours[sigFig1]);
                $(b2.element).css("fill", colours[sigFig2]);
                $(b3.element).css("fill", colours[multiplier]);
                $(b4.element).css("fill", "transparent");
                return [b1, b2, b3, b4];
            }
        })(_Resistor = Component._Resistor || (Component._Resistor = {}));
    })(Component = Circuit.Component || (Circuit.Component = {}));
})(Circuit || (Circuit = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLWRyYXdMYXlvdXQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi90eXBlc2NyaXB0L2NpcmN1aXQvY29tcG9uZW50L19yZXNpc3Rvci8tZHJhd0xheW91dC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsSUFBVSxPQUFPLENBbUVoQjtBQW5FRCxXQUFVLE9BQU87SUFBQyxJQUFBLFNBQVMsQ0FtRTFCO0lBbkVpQixXQUFBLFNBQVM7UUFBQyxJQUFBLFNBQVMsQ0FtRXBDO1FBbkUyQixXQUFBLFNBQVM7WUFDbEMsU0FBZ0IsVUFBVSxDQUFDLFFBQXdCO2dCQUNoRCxNQUFNLFNBQVMsR0FBRyxHQUFHLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7Z0JBR2pELE1BQU0sSUFBSSxHQUFHLFFBQVEsQ0FBQyxNQUFNLENBQUMsVUFBQSxTQUFTLENBQUMsQ0FBQztnQkFDeEMsTUFBTSxJQUFJLEdBQUcsUUFBUSxDQUFDLE1BQU0sQ0FBQyxVQUFBLFNBQVMsQ0FBQyxDQUFDO2dCQUV4QyxJQUFJLE1BQU0sR0FBRyxNQUFNLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQztnQkFFaEQsSUFBSSxRQUFRLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQztnQkFFN0MsSUFBSSxRQUFRLEdBQUcsV0FBVyxHQUFHLEtBQUssR0FBRyxtQkFBbUIsR0FBRyxNQUFNLEdBQUcsdUJBQXVCLEdBQUcsR0FBRyxDQUFDO2dCQUVsRyxTQUFTLENBQUMsTUFBTSxDQUNiLEdBQUcsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsTUFBTSxDQUFDLEVBQ3ZDLFFBQVEsQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLEVBQzdCLEdBQUcsQ0FBQyxPQUFPLENBQUMsSUFBSSxD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Q0FBQyxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7Z0JBQzVDLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBRSxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztnQkFDNUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDO2dCQUMvQyxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsYUFBYSxDQUFDLENBQUM7Z0JBRXpDLE9BQU8sQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztZQUMzQixDQUFDO1FBRUosQ0FBQyxFQW5FMkIsU0FBUyxHQUFULG1CQUFTLEtBQVQsbUJBQVMsUUFtRXBDO0lBQUQsQ0FBQyxFQW5FaUIsU0FBUyxHQUFULGlCQUFTLEtBQVQsaUJBQVMsUUFtRTFCO0FBQUQsQ0FBQyxFQW5FUyxPQUFPLEtBQVAsT0FBTyxRQW1FaEIiLCJzb3VyY2VzQ29udGVudCI6WyJuYW1lc3BhY2UgQ2lyY3VpdC5Db21wb25lbnQuX1Jlc2lzdG9yIHtcclxuICAgZXhwb3J0IGZ1bmN0aW9uIGRyYXdMYXlvdXQoaW5zdGFuY2U6IENsYXNzZXMuTGF5b3V0KSB7XHJcbiAgICAgIGNvbnN0IGJvZHlHcm91cCA9IFN2Zy5FbGVtZW50Lkdyb3VwLm1ha2UoXCJib2R5XCIpO1xyXG5cclxuXHJcbiAgICAgIGNvbnN0IGVuZDEgPSBpbnN0YW5jZS5qb2ludHNbSU5ERVhFTkQxXTtcclxuICAgICAgY29uc3QgZW5kMiA9IGluc3RhbmNlLmpvaW50c1tJTkRFWEVORDJdO1xyXG5cclxuICAgICAgbGV0IGNlbnRyZSA9IHZlY3RvcihlbmQxLCBlbmQyKS5jZW50cmUoKS52ZWN0b3I7XHJcblxyXG4gICAgICBsZXQgcm90YXRpb24gPSB2ZWN0b3IoZW5kMSkuZ2V0QW5nbGVUbyhlbmQyKTtcclxuXHJcbiAgICAgIGxldCBib2R5UGF0aCA9IFwibS0xMi41IC02XCIgKyBcImgyNVwiICsgXCJjMTUgLTggMTUgMjAgMCAxMlwiICsgXCJoLTI1XCIgKyBcImMtMTUgKzggLTE1IC0yMCAwIC0xMlwiICsgXCJaXCI7XHJcblxyXG4gICAgICBib2R5R3JvdXAuYXBwZW5kKFxyXG4gICAgICAgICBTdmcuRWxlbWVudC5QYXRoLm1ha2UoYm9keVBhdGgsIFwiYm9keVwiKSxcclxuICAgICAgICAgZ2V0QmFuZHMoaW5zdGFuY2UucmVzaXN0YW5jZSksXHJcbiAgICAgICAgIFN2Zy5FbGVtZW50LlBhdGgubWFrZShib2R5UGF0aCwgXCJoaWdobGlnaHQgbm9maWxsXCIpXHJcbiAgICAgICk7XHJcblxyXG4gICAgICByZXR1cm4gW1xyXG4gICAgICAgICBTdmcuRWxlbWVudC5QYXRoLm1ha2UoW2VuZDEsIGVuZDJdLCBcImxlYWRcIiksXHJcbiAgICAgICAgIGJvZHlHcm91cC50cmFuc2xhdGUoY2VudHJlKS5yb3RhdGUocm90YXRpb24pXHJcbiAgICAgIF07XHJcbiAgIH1cclxuXHJcbiAgIGZ1bmN0aW9uIGdldEJhbmRzKG51bTogbnVtYmVyKSB7XHJcbiAgICAgIC8vIFdlIGRvbid0IG5lZWQgYSB2YWx1ZSBmaWVsZFxyXG4gICAgICBsZXQgZXhwID0gbnVtLnRvRXhwb25lbnRpYWwoMSk7XHJcblxyXG4gICAgICBsZXQgc2lnRmlnMSA9IGV4cC5zbGljZShleHAuaW5kZXhPZihcIi5cIikgLSAxKVswXTtcclxuICAgICAgbGV0IHNpZ0ZpZzIgPSBleHAuc2xpY2UoZXhwLmluZGV4T2YoXCIuXCIpICsgMSlbMF07XHJcbiAgICAgIGxldCBtdWx0aXBsaWVyID0gKFxyXG4gICAgICAgICBwYXJzZUludChleHAuc2xpY2UoZXhwLmluZGV4T2YoXCJlXCIpICsgMSksIDEwKSAtIDFcclxuICAgICAgKS50b1N0cmluZygpO1xyXG5cclxuICAgICAgbGV0IGNvbG91cnM6IHtcclxuICAgICAgICAgW251bWJlcjogc3RyaW5nXTogc3RyaW5nXHJcbiAgICAgIH0gPSB7XHJcbiAgICAgICAgIFwiLTNcIjogXCJwaW5rXCIsXHJcbiAgICAgICAgIFwiLTJcIjogXCJzaWx2ZXJcIixcclxuICAgICAgICAgXCItMVwiOiBcImdvbGRcIixcclxuICAgICAgICAgXCIwXCI6IFwiYmxhY2tcIixcclxuICAgICAgICAgXCIxXCI6IFwiYnJvd25cIixcclxuICAgICAgICAgXCIyXCI6IFwicmVkXCIsXHJcbiAgICAgICAgIFwiM1wiOiBcIiNGRjdGMjZcIiwgLy9PcmFuZ2VcclxuICAgICAgICAgXCI0XCI6IFwieWVsbG93XCIsXHJcbiAgICAgICAgIFwiNVwiOiBcImdyZWVuXCIsXHJcbiAgICAgICAgIFwiNlwiOiBcImJsdWVcIixcclxuICAgICAgICAgXCI3XCI6IFwidmlvbGV0XCIsXHJcbiAgICAgICAgIFwiOFwiOiBcImdyZXlcIixcclxuICAgICAgICAgXCI5XCI6IFwid2hpdGVcIlxyXG4gICAgICB9O1xyXG5cclxuICAgICAgbGV0IGIxID0gU3ZnLkVsZW1lbnQuUmVjdC5tYWtlKHsgeDogLTE3LjUsIHk6IDAgfSwgeyB3aWR0aDogMywgaGVpZ2h0OiAxOCB9LCB1bmRlZmluZWQsIFwiYmFuZDFcIik7XHJcbiAgICAgIGxldCBiMiA9IFN2Zy5FbGVtZW50LlJlY3QubWFrZSh7IHg6IC0xMSwgeTogMCB9LCB7IHdpZHRoOiAzLCBoZWlnaHQ6IDEyIH0sIHVuZGVmaW5lZCwgXCJiYW5kMlwiKTtcclxuICAgICAgbGV0IGIzID0gU3ZnLkVsZW1lbnQuUmVjdC5tYWtlKHsgeDogLTQsIHk6IDAgfSwgeyB3aWR0aDogMywgaGVpZ2h0OiAxMiB9LCB1bmRlZmluZWQsIFwiYmFuZDNcIik7XHJcbiAgICAgIGxldCBiNCA9IFN2Zy5FbGVtZW50LlJlY3QubWFrZSh7IHg6IDMuNSwgeTogMCB9LCB7IHdpZHRoOiA0LCBoZWlnaHQ6IDEyIH0sIHVuZGVmaW5lZCwgXCJiYW5kNFwiKTtcclxuXHJcbiAgICAgICQoYjEuZWxlbWVudCkuY3NzKFwiZmlsbFwiLCBjb2xvdXJzW3NpZ0ZpZzFdKTtcclxuICAgICAgJChiMi5lbGVtZW50KS5jc3MoXCJmaWxsXCIsIGNvbG91cnNbc2lnRmlnMl0pO1xyXG4gICAgICAkKGIzLmVsZW1lbnQpLmNzcyhcImZpbGxcIiwgY29sb3Vyc1ttdWx0aXBsaWVyXSk7XHJcbiAgICAgICQoYjQuZWxlbWVudCkuY3NzKFwiZmlsbFwiLCBcInRyYW5zcGFyZW50XCIpO1xyXG5cclxuICAgICAgcmV0dXJuIFtiMSwgYjIsIGIzLCBiNF07XHJcbiAgIH1cclxuXHJcbn0iXX0=