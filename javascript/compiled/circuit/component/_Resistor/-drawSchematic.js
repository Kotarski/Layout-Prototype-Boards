"use strict";
var Circuit;
(function (Circuit) {
    var Component;
    (function (Component) {
        var _Resistor;
        (function (_Resistor) {
            function drawSchematic(instance) {
                const bodyGroup = Svg.Element.Group.make("body");
                const end1 = instance.joints[_Resistor.INDEXEND1];
                const end2 = instance.joints[_Resistor.INDEXEND2];
                let centre = vector(end1, end2).centre().vector;
                let rotation = vector(end1).getAngleTo(end2);
                let [start1, start2] = vector({ x: -24, y: 0 }, { x: 24, y: 0 }).rotate(rotation).sumWith(centre).vectors;
                let text = Utility.getStandardForm(instance.resistance, 'Î©');
                bodyGroup.append(Svg.Element.Rect.make(vector(0), { width: 46, height: 18 }, vector(2), "highlight highlightwithfill extrathick"), Svg.Element.Rect.make(vector(0), { width: 46, height: 18 }, vector(2), "body white"));
                let textEl = Svg.Element.Text.make(text, { x: 0, y: -15 }, "text");
                return [
                    Svg.Element.Path.make([[start1, end1], [start2, end2]], "line thin"),
                    bodyGroup.translate(centre).rotate(rotation),
                    textEl.translate(centre).rotatePosition(rotation),
                ];
            }
            _Resistor.drawSchematic = drawSchematic;
        })(_Resistor = Component._Resistor || (Component._Resistor = {}));
    })(Component = Circuit.Component || (Circuit.Component = {}));
})(Circuit || (Circuit = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLWRyYXdTY2hlbWF0aWMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi90eXBlc2NyaXB0L2NpcmN1aXQvY29tcG9uZW50L19yZXNpc3Rvci8tZHJhd1NjaGVtYXRpYy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsSUFBVSxPQUFPLENBK0JoQjtBQS9CRCxXQUFVLE9BQU87SUFBQyxJQUFBLFNBQVMsQ0ErQjFCO0lBL0JpQixXQUFBLFNBQVM7UUFBQyxJQUFBLFNBQVMsQ0ErQnBDO1FBL0IyQixXQUFBLFNBQVM7WUFDbEMsU0FBZ0IsYUFBYSxDQUFDLFFBQTJCO2dCQUN0RCxNQUFNLFNBQVMsR0FBRyxHQUFHLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7Z0JBR2pELE1BQU0sSUFBSSxHQUFHLFFBQVEsQ0FBQyxNQUFNLENBQUMsVUFBQSxTQUFTLENBQUMsQ0FBQztnQkFDeEMsTUFBTSxJQUFJLEdBQUcsUUFBUSxDQUFDLE1BQU0sQ0FBQyxVQUFBLFNBQVMsQ0FBQyxDQUFDO2dCQUV4QyxJQUFJLE1BQU0sR0FBRyxNQUFNLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQztnQkFDaEQsSUFBSSxRQUFRLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQztnQkFFN0MsSUFBSSxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUMsR0FBYSxNQUFNLENBQ3BDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUNuQyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsT0FBTyxDQUFDO2dCQUczQyxJQUFJLElBQUksR0FBRyxPQUFPLENBQUMsZUFBZSxDQUFDLFFBQVEsQ0FBQyxVQUFVLEVBQUUsR0FBRyxDQUFDLENBQUE7Z0JBRTVELFNBQVMsQ0FBQyxNQUFNLENBQ2IsR0FBRyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLEtBQUssRUFBRSxFQUFFLEVBQUUsTUFBTSxFQUFFLEVBQUUsRUFBRSxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSx3Q0FBd0MsQ0FBQyxFQUNoSCxHQUFHLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsS0FBSyxFQUFFLEVBQUUsRUFBRSxNQUFNLEVBQUUsRUFBRSxFQUFFLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLFlBQVksQ0FBQyxDQUN0RixDQUFDO2dCQUVGLElBQUksTUFBTSxHQUFHLEdBQUcsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLE1BQU0sQ0FBQyxDQUFDO2dCQUVuRSxPQUFPO29CQUNKLEdBQUcsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxDQUFDLEVBQUUsV0FBVyxDQUFDO29CQUNwRSxTQUFTLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUM7b0JBQzVDLE1BQU0sQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUMsY0FBYyxDQUFDLFFBQVEsQ0FBQztpQkFDbkQsQ0FBQztZQUNMLENBQUM7WUE3QmUsdUJBQWEsZ0JBNkI1QixDQUFBO1FBQ0osQ0FBQyxFQS9CMkIsU0FBUyxHQUFULG1CQUFTLEtBQVQsbUJBQVMsUUErQnBDO0lBQUQsQ0FBQyxFQS9CaUIsU0FBUyxHQUFULGlCQUFTLEtBQVQsaUJBQVMsUUErQjFCO0FBQUQsQ0FBQyxFQS9CUyxPQUFPLEtBQVAsT0FBTyxRQStCaEIiLCJzb3VyY2VzQ29udGVudCI6WyJuYW1lc3BhY2UgQ2lyY3VpdC5Db21wb25lbnQuX1Jlc2lzdG9yIHtcclxuICAgZXhwb3J0IGZ1bmN0aW9uIGRyYXdTY2hlbWF0aWMoaW5zdGFuY2U6IENsYXNzZXMuU2NoZW1hdGljKSB7XHJcbiAgICAgIGNvbnN0IGJvZHlHcm91cCA9IFN2Zy5FbGVtZW50Lkdyb3VwLm1ha2UoXCJib2R5XCIpO1xyXG5cclxuXHJcbiAgICAgIGNvbnN0IGVuZDEgPSBpbnN0YW5jZS5qb2ludHNbSU5ERVhFTkQxXTtcclxuICAgICAgY29uc3QgZW5kMiA9IGluc3RhbmNlLmpvaW50c1tJTkRFWEVORDJdO1xyXG5cclxuICAgICAgbGV0IGNlbnRyZSA9IHZlY3RvcihlbmQxLCBlbmQyKS5jZW50cmUoKS52ZWN0b3I7XHJcbiAgICAgIGxldCByb3RhdGlvbiA9IHZlY3RvcihlbmQxKS5nZXRBbmdsZVRvKGVuZDIpO1xyXG5cclxuICAgICAgbGV0IFtzdGFydDEsIHN0YXJ0Ml06IFZlY3RvcltdID0gdmVjdG9yKFxyXG4gICAgICAgICB7IHg6IC0yNCwgeTogMCB9LCB7IHg6IDI0LCB5OiAwIH1cclxuICAgICAgKS5yb3RhdGUocm90YXRpb24pLnN1bVdpdGgoY2VudHJlKS52ZWN0b3JzO1xyXG5cclxuICAgICAgLy9UZXh0XHJcbiAgICAgIGxldCB0ZXh0ID0gVXRpbGl0eS5nZXRTdGFuZGFyZEZvcm0oaW5zdGFuY2UucmVzaXN0YW5jZSwgJ86pJylcclxuXHJcbiAgICAgIGJvZHlHcm91cC5hcHBlbmQoXHJcbiAgICAgICAgIFN2Zy5FbGVtZW50LlJlY3QubWFrZSh2ZWN0b3IoMCksIHsgd2lkdGg6IDQ2LCBoZWlnaHQ6IDE4IH0sIHZlY3RvcigyKSwgXCJoaWdobGlnaHQgaGlnaGxpZ2h0d2l0aGZpbGwgZXh0cmF0aGlja1wiKSxcclxuICAgICAgICAgU3ZnLkVsZW1lbnQuUmVjdC5tYWtlKHZlY3RvcigwKSwgeyB3aWR0aDogNDYsIGhlaWdodDogMTggfSwgdmVjdG9yKDIpLCBcImJvZHkgd2hpdGVcIilcclxuICAgICAgKTtcclxuXHJcbiAgICAgIGxldCB0ZXh0RWwgPSBTdmcuRWxlbWVudC5UZXh0Lm1ha2UodGV4dCwgeyB4OiAwLCB5OiAtMTUgfSwgXCJ0ZXh0XCIpO1xyXG5cclxuICAgICAgcmV0dXJuIFtcclxuICAgICAgICAgU3ZnLkVsZW1lbnQuUGF0aC5tYWtlKFtbc3RhcnQxLCBlbmQxXSwgW3N0YXJ0MiwgZW5kMl1dLCBcImxpbmUgdGhpblwiKSxcclxuICAgICAgICAgYm9keUdyb3VwLnRyYW5zbGF0ZShjZW50cmUpLnJvdGF0ZShyb3RhdGlvbiksXHJcbiAgICAgICAgIHRleHRFbC50cmFuc2xhdGUoY2VudHJlKS5yb3RhdGVQb3NpdGlvbihyb3RhdGlvbiksXHJcbiAgICAgIF07XHJcbiAgIH1cclxufVxyXG4iXX0=