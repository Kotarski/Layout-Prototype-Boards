var ValueCheck;
(function (ValueCheck) {
    ValueCheck.test = Utility.testType;
    ValueCheck.validate = Utility.validateType;
    ValueCheck.validater = Utility.checkfunction;
    const integerTest = (n) => ValueCheck.test("number")(n) && Number.isInteger(n);
    function integer(fallback) {
        const result = (value, log = false) => {
            return ValueCheck.validate(integerTest, fallback)(value, log);
        };
        return result;
    }
    ValueCheck.integer = integer;
    function where(fallback) {
        const result = (value, log = false) => {
            const anyVector = ValueCheck.validate(vector.isVector, fallback)(value, log);
            return vector.standardise(anyVector);
        };
        return result;
    }
    ValueCheck.where = where;
    function joints(fallback, lengthTest = l => l === fallback.length) {
        const jointTest = (value) => vector.isVectorArray(value) && lengthTest(value.length);
        const result = (value, log = false) => {
            const anyVectors = ValueCheck.validate(jointTest, fallback)(value, log);
            return vector.standardise(anyVectors);
        };
        return result;
    }
    ValueCheck.joints = joints;
    const maxValidCSSColorLength = 25;
    const colorTest = (s) => ValueCheck.test("string")(s) && s.length <= maxValidCSSColorLength;
    function color(fallback) {
        const result = (value, log = false) => {
            return ValueCheck.validate(colorTest, fallback)(value, log);
        };
        return result;
    }
    ValueCheck.color = color;
})(ValueCheck || (ValueCheck = {}));
export default ValueCheck;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoifnZhbHVlQ2hlY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi90eXBlc2NyaXB0L0NpcmN1aXQvY29tcG9uZW50L352YWx1ZUNoZWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUlBLElBQVUsVUFBVSxDQWdEbkI7QUFoREQsV0FBVSxVQUFVO0lBQ0gsZUFBSSxHQUFHLE9BQU8sQ0FBQyxRQUFRLENBQUM7SUFDeEIsbUJBQVEsR0FBRyxPQUFPLENBQUMsWUFBWSxDQUFDO0lBQ2hDLG9CQUFTLEdBQUcsT0FBTyxDQUFDLGFBQWEsQ0FBQztJQU1oRCxNQUFNLFdBQVcsR0FBRyxDQUFDLENBQVUsRUFBRSxFQUFFLENBQUMsV0FBQSxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUM3RSxTQUFnQixPQUFPLENBQUMsUUFBZ0I7UUFDckMsTUFBTSxNQUFNLEdBQUcsQ0FBQyxLQUFjLEVBQUUsTUFBZSxLQUFLLEVBQUUsRUFBRTtZQUNyRCxPQUFPLFdBQUEsUUFBUSxDQUFDLFdBQVcsRUFBRSxRQUFRLENBQUMsQ0FBQyxLQUFLLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFDdEQsQ0FBQyxDQUFBO1FBRUQsT0FBTyxNQUFNLENBQUM7SUFDakIsQ0FBQztJQU5lLGtCQUFPLFVBTXRCLENBQUE7SUFFRCxTQUFnQixLQUFLLENBQUMsUUFBZ0I7UUFDbkMsTUFBTSxNQUFNLEdBQUcsQ0FBQyxLQUFjLEVBQUUsTUFBZSxLQUFLLEVBQUUsRUFBRTtZQUNyRCxNQUFNLFNBQVMsR0FBRyxXQUFBLFFBQVEsQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLFFBQVEsQ0FBQyxDQUFDLEtBQUssRUFBRSxHQUFHLENBQUMsQ0FBQztZQUNsRSxPQUFPLE1BQU0sQ0FBQyxXQUFXLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDeEMsQ0FBQyxDQUFBO1FBRUQsT0FBTyxNQUFNLENBQUM7SUFDakIsQ0FBQztJQVBlLGdCQUFLLFFBT3BCLENBQUE7SUFFRCxTQUFnQixNQUFNLENBQXFCLFFBQVcsRUFBRSxhQUFxQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsS0FBSyxRQUFRLENBQUMsTUFBTTtRQUNwSCxNQUFNLFNBQVMsR0FBRyxDQUFDLEtBQWMsRUFBRSxFQUFFLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsSUFBSSxVQUFVLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzlGLE1BQU0sTUFBTSxHQUFHLENBQUMsS0FBYyxFQUFFLE1BQWUsS0FBSyxFQUFFLEVBQUU7WUFDckQsTUFBTSxVQUFVLEdBQUcsV0FBQSxRQUFRLENBQUMsU0FBUyxFQUFFLFFBQVEsQ0FBQyxDQUFDLEtBQUssRUFBRSxHQUFHLENBQUMsQ0FBQztZQUM3RCxPQUFPLE1BQU0sQ0FBQyxXQUFXLENBQUMsVUFBVSxDQUFNLENBQUM7UUFDOUMsQ0FBQyxDQUFBO1FBRUQsT0FBTyxNQUFNLENBQUM7SUFDakIsQ0FBQztJQVJlLGlCQUFNLFNBUXJCLENBQUE7SUFHRCxNQUFNLHNCQUFzQixHQUFHLEVBQUUsQ0FBQztJQUNsQyxNQUFNLFNBQVMsR0FBRyxDQUFDLENBQVUsRUFBRSxFQUFFLENBQUMsV0FBQSxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLE1BQU0sSUFBSSxzQkFBc0IsQ0FBQztJQUUxRixTQUFnQixLQUFLLENBQUMsUUFBZ0I7UUFDbkMsTUFBTSxNQUFNLEdBQUcsQ0FBQyxLQUFjLEVBQUUsTUFBZSxLQUFLLEVBQUUsRUFBRTtZQUNyRCxPQUFPLFdBQUEsUUFBUSxDQUFDLFNBQVMsRUFBRSxRQUFRLENBQUMsQ0FBQyxLQUFLLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFDcEQsQ0FBQyxDQUFBO1FBRUQsT0FBTyxNQUFNLENBQUM7SUFDakIsQ0FBQztJQU5lLGdCQUFLLFFBTXBCLENBQUE7QUFDSixDQUFDLEVBaERTLFVBQVUsS0FBVixVQUFVLFFBZ0RuQjtBQUVELGVBQWUsVUFBVSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uLy4uL1V0aWxpdHkvLXZhbGlkYXRlVHlwZS50c1wiIC8+XHJcbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi8uLi9VdGlsaXR5Ly10ZXN0VHlwZS50c1wiIC8+XHJcblxyXG5cclxubmFtZXNwYWNlIFZhbHVlQ2hlY2sge1xyXG4gICBleHBvcnQgaW1wb3J0IHRlc3QgPSBVdGlsaXR5LnRlc3RUeXBlO1xyXG4gICBleHBvcnQgaW1wb3J0IHZhbGlkYXRlID0gVXRpbGl0eS52YWxpZGF0ZVR5cGU7XHJcbiAgIGV4cG9ydCBpbXBvcnQgdmFsaWRhdGVyID0gVXRpbGl0eS5jaGVja2Z1bmN0aW9uO1xyXG5cclxuICAgZXhwb3J0IHR5cGUgRGVmYXVsdGVyPFQ+ID0ge1xyXG4gICAgICBbUCBpbiBrZXlvZiBUXTogdmFsaWRhdGVyPFRbUF0+XHJcbiAgIH1cclxuXHJcbiAgIGNvbnN0IGludGVnZXJUZXN0ID0gKG46IHVua25vd24pID0+IHRlc3QoXCJudW1iZXJcIikobikgJiYgTnVtYmVyLmlzSW50ZWdlcihuKTtcclxuICAgZXhwb3J0IGZ1bmN0aW9uIGludGVnZXIoZmFsbGJhY2s6IG51bWJlcik6IHZhbGlkYXRlcjxudW1iZXI+IHtcclxuICAgICAgY29uc3QgcmVzdWx0ID0gKHZhbHVlOiB1bmtub3duLCBsb2c6IGJvb2xlYW4gPSBmYWxzZSkgPT4ge1xyXG4gICAgICAgICByZXR1cm4gdmFsaWRhdGUoaW50ZWdlclRlc3QsIGZhbGxiYWNrKSh2YWx1ZSwgbG9nKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgfVxyXG5cclxuICAgZXhwb3J0IGZ1bmN0aW9uIHdoZXJlKGZhbGxiYWNrOiBWZWN0b3IpOiBWYWx1ZUNoZWNrLnZhbGlkYXRlcjxWZWN0b3I+IHtcclxuICAgICAgY29uc3QgcmVzdWx0ID0gKHZhbHVlOiB1bmtub3duLCBsb2c6IGJvb2xlYW4gPSBmYWxzZSkgPT4ge1xyXG4gICAgICAgICBjb25zdCBhbnlWZWN0b3IgPSB2YWxpZGF0ZSh2ZWN0b3IuaXNWZWN0b3IsIGZhbGxiYWNrKSh2YWx1ZSwgbG9nKTtcclxuICAgICAgICAgcmV0dXJuIHZlY3Rvci5zdGFuZGFyZGlzZShhbnlWZWN0b3IpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICB9XHJcblxyXG4gICBleHBvcnQgZnVuY3Rpb24gam9pbnRzPFQgZXh0ZW5kcyBWZWN0b3JbXT4oZmFsbGJhY2s6IFQsIGxlbmd0aFRlc3Q6IChsOiBudW1iZXIpID0+IGJvb2xlYW4gPSBsID0+IGwgPT09IGZhbGxiYWNrLmxlbmd0aCk6IHZhbGlkYXRlcjxUPiB7XHJcbiAgICAgIGNvbnN0IGpvaW50VGVzdCA9ICh2YWx1ZTogdW5rbm93bikgPT4gdmVjdG9yLmlzVmVjdG9yQXJyYXkodmFsdWUpICYmIGxlbmd0aFRlc3QodmFsdWUubGVuZ3RoKTtcclxuICAgICAgY29uc3QgcmVzdWx0ID0gKHZhbHVlOiB1bmtub3duLCBsb2c6IGJvb2xlYW4gPSBmYWxzZSkgPT4ge1xyXG4gICAgICAgICBjb25zdCBhbnlWZWN0b3JzID0gdmFsaWRhdGUoam9pbnRUZXN0LCBmYWxsYmFjaykodmFsdWUsIGxvZyk7XHJcbiAgICAgICAgIHJldHVybiB2ZWN0b3Iuc3RhbmRhcmRpc2UoYW55VmVjdG9ycykgYXMgVDtcclxuICAgICAgfVxyXG5cclxuICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgfVxyXG5cclxuICAgLyogQ2FuJ3QgZ3VhcmFudGVlIHZhbGlkaXR5LCBidXQgY2FuIGd1YXJhbnRlZSBpdCBpc24ndCBkZWZpbml0ZWx5IGludmFsaWQqL1xyXG4gICBjb25zdCBtYXhWYWxpZENTU0NvbG9yTGVuZ3RoID0gMjU7XHJcbiAgIGNvbnN0IGNvbG9yVGVzdCA9IChzOiB1bmtub3duKSA9PiB0ZXN0KFwic3RyaW5nXCIpKHMpICYmIHMubGVuZ3RoIDw9IG1heFZhbGlkQ1NTQ29sb3JMZW5ndGg7XHJcblxyXG4gICBleHBvcnQgZnVuY3Rpb24gY29sb3IoZmFsbGJhY2s6IHN0cmluZyk6IHZhbGlkYXRlcjxzdHJpbmc+IHtcclxuICAgICAgY29uc3QgcmVzdWx0ID0gKHZhbHVlOiB1bmtub3duLCBsb2c6IGJvb2xlYW4gPSBmYWxzZSkgPT4ge1xyXG4gICAgICAgICByZXR1cm4gdmFsaWRhdGUoY29sb3JUZXN0LCBmYWxsYmFjaykodmFsdWUsIGxvZyk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgVmFsdWVDaGVjaztcclxuIl19