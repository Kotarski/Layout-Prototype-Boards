"use strict";
var Circuit;
(function (Circuit) {
    var Component;
    (function (Component) {
        var _OpAmp;
        (function (_OpAmp) {
            var Classes;
            (function (Classes) {
                class Base extends Component.Instance {
                    constructor(values) {
                        super(values);
                        this.offsetVoltage = values.offsetVoltage;
                    }
                    getProperties() {
                        return Utility.deepCopy({
                            name: this.name,
                            offsetVoltage: this.offsetVoltage
                        });
                    }
                    insertInto(element) {
                        Utility.Insert.last(this.group.element, element);
                    }
                    transferFunction() { return []; }
                    ;
                }
                class Schematic extends Base {
                    constructor(values) {
                        super(values);
                        this.offsetVoltage = values.offsetVoltage;
                        this.joints = values.joints;
                    }
                    getState() {
                        return Utility.deepCopy({
                            joints: this.joints,
                            disabled: this.disabled
                        });
                    }
                    draw() {
                        this.group.prepend(_OpAmp.drawSchematic(this));
                    }
                    getConnections() {
                        return Component.Generics.getComponentConnections(this, manifest.schematic);
                    }
                    makeConnectors() {
                        let [posPower, negPower] = (this.joints[_OpAmp.INDEXPOW1].y < this.joints[_OpAmp.INDEXPOW2].y)
                            ? [this.joints[_OpAmp.INDEXPOW1], this.joints[_OpAmp.INDEXPOW2]]
                            : [this.joints[_OpAmp.INDEXPOW2], this.joints[_OpAmp.INDEXPOW1]];
                        this.connectorSets = [[
                                Component.Generics.makeConnector(this, "vcc+", "node", posPower, "v+"),
                                Component.Generics.makeConnector(this, "out", "node", this.joints[_OpAmp.INDEXOUT], "o"),
                                Component.Generics.makeConnector(this, "in-", "node", this.joints[_OpAmp.INDEXINNEG], "i-"),
                                Component.Generics.makeConnector(this, "in+", "node", this.joints[_OpAmp.INDEXINPOS], "i+"),
                                Component.Generics.makeConnector(this, "vcc-", "node", negPower, "v-"),
                            ]];
                    }
                }
                Classes.Schematic = Schematic;
                class Layout extends Base {
                    constructor(values) {
                        super(values);
                        this.offsetVoltage = values.offsetVoltage;
                        this.isDual = values.isDual;
                        this.joints = values.joints;
                    }
                    getState() {
                        return Utility.deepCopy({
                            isDual: this.isDual,
                            joints: this.joints,
                            disabled: this.disabled
                        });
                    }
                    draw() {
                        this.group.prepend(_OpAmp.drawLayout(this));
                    }
                    getConnections() {
                        return Component.Generics.getComponentConnections(this, manifest.layout);
                    }
                    makeConnectors() {
                        let gs = Constants.gridSpacing;
                        let c = this.joints[_OpAmp.INDEXCENTRE];
                        let r = vector(this.joints[_OpAmp.INDEXCENTRE]).getAngleTo(this.joints[_OpAmp.INDEXROTATION]);
                        let connectorPoints = vector([
                            { x: 0 * gs, y: 3 * gs },
                            { x: 1 * gs, y: 3 * gs },
                            { x: 2 * gs, y: 3 * gs },
                            { x: 3 * gs, y: 3 * gs },
                            { x: 3 * gs, y: 0 * gs },
                            { x: 2 * gs, y: 0 * gs },
                            { x: 1 * gs, y: 0 * gs },
                            { x: 0 * gs, y: 0 * gs }
                        ]).sumWith(vector(-30)).rotate(r).sumWith(c).vectors;
                        if (this.isDual) {
                            this.connectorSets = [[
                                    Component.Generics.makeConnector(this, "vcc+", "pin", connectorPoints[7], "v+"),
                                    Component.Generics.makeConnector(this, "out", "pin", connectorPoints[6], "1o"),
                                    Component.Generics.makeConnector(this, "in-", "pin", connectorPoints[5], "1i-"),
                                    Component.Generics.makeConnector(this, "in+", "pin", connectorPoints[4], "1i+"),
                                    Component.Generics.makeConnector(this, "vcc-", "pin", connectorPoints[3], "v-"),
                                ], [
                                    Component.Generics.makeConnector(this, "vcc+", "pin", connectorPoints[7], "v+"),
                                    Component.Generics.makeConnector(this, "out", "pin", connectorPoints[0], "2o"),
                                    Component.Generics.makeConnector(this, "in-", "pin", connectorPoints[1], "2i-"),
                                    Component.Generics.makeConnector(this, "in+", "pin", connectorPoints[2], "2i+"),
                                    Component.Generics.makeConnector(this, "vcc-", "pin", connectorPoints[3], "v-"),
                                ]];
                        }
                        else {
                            this.connectorSets = [[
                                    Component.Generics.makeConnector(this, "vcc+", "pin", connectorPoints[6], "v+"),
                                    Component.Generics.makeConnector(this, "out", "pin", connectorPoints[5], "o"),
                                    Component.Generics.makeConnector(this, "in-", "pin", connectorPoints[1], "i-"),
                                    Component.Generics.makeConnector(this, "in+", "pin", connectorPoints[2], "i+"),
                                    Component.Generics.makeConnector(this, "vcc-", "pin", connectorPoints[3], "v-"),
                                    Component.Generics.makeConnector(this, "nc", "pin", connectorPoints[7], "nc"),
                                    Component.Generics.makeConnector(this, "offset n1", "pin", connectorPoints[4], "nc"),
                                    Component.Generics.makeConnector(this, "offset n2", "pin", connectorPoints[0], "nc"),
                                ]];
                        }
                    }
                    replaceWithDual() {
                        this.isDual = true;
                        this.group.clearChildren();
                        this.draw();
                        this.makeConnectors();
                    }
                }
                Classes.Layout = Layout;
            })(Classes = _OpAmp.Classes || (_OpAmp.Classes = {}));
        })(_OpAmp = Component._OpAmp || (Component._OpAmp = {}));
    })(Component = Circuit.Component || (Circuit.Component = {}));
})(Circuit || (Circuit = {}));
//# sourceMappingURL=data:application/json;base64,