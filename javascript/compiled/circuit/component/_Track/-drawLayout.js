"use strict";
var Circuit;
(function (Circuit) {
    var Component;
    (function (Component) {
        var _Track;
        (function (_Track) {
            const drawStripboardHole = (position) => Svg.Element.Circle.make(position, 4, "hole");
            const drawBreadboardHole = (position) => Svg.Element.Rect.make(position, { width: 8, height: 8 }, vector(0.5), "hole");
            function drawLayout(instance) {
                const holeFunc = (instance.style === "breadboard") ? drawBreadboardHole : drawStripboardHole;
                const start = instance.joints[_Track.INDEXSTART];
                const step = instance.joints[_Track.INDEXSTEP];
                const holePositions = vector(step).scaleMap(Utility.cumulativeSum(...instance.holeSpacings)).sumWith(start).vectors;
                const holes = holePositions.map(hp => holeFunc(hp));
                const track = drawTrack(holePositions);
                return [track, ...holes];
            }
            _Track.drawLayout = drawLayout;
            const drawTrack = (holePositions) => {
                let start = holePositions[0];
                let end = holePositions[holePositions.length - 1];
                let relativeEnd = vector(end, vector(start).scaleWith(-1)).sum();
                let { radius, angle } = relativeEnd.asPolar();
                let centre = vector(start, start, relativeEnd).sum().scaleWith(0.5).vector;
                let size = {
                    width: radius + Constants.gridSpacing * 0.8,
                    height: Constants.gridSpacing * 14 / 16
                };
                return Svg.Element.Rect.make(centre, size, vector(0), 'body').rotate(angle, centre);
            };
        })(_Track = Component._Track || (Component._Track = {}));
    })(Component = Circuit.Component || (Circuit.Component = {}));
})(Circuit || (Circuit = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLWRyYXdMYXlvdXQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi90eXBlc2NyaXB0L2NpcmN1aXQvY29tcG9uZW50L190cmFjay8tZHJhd0xheW91dC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsSUFBVSxPQUFPLENBd0NoQjtBQXhDRCxXQUFVLE9BQU87SUFBQyxJQUFBLFNBQVMsQ0F3QzFCO0lBeENpQixXQUFBLFNBQVM7UUFBQyxJQUFBLE1BQU0sQ0F3Q2pDO1FBeEMyQixXQUFBLE1BQU07WUFFL0IsTUFBTSxrQkFBa0IsR0FBRyxDQUFDLFFBQWdCLEVBQUUsRUFBRSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1lBQzlGLE1BQU0sa0JBQWtCLEdBQUcsQ0FBQyxRQUFnQixFQUFFLEVBQUUsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRSxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUUsTUFBTSxDQUFDLEdBQUcsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1lBRS9ILFNBQWdCLFVBQVUsQ0FBQyxRQUF3QjtnQkFDaEQsTUFBTSxRQUFRLEdBQUcsQ0FBQyxRQUFRLENBQUMsS0FBSyxLQUFLLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLENBQUMsa0JBQWtCLENBQUM7Z0JBRTdGLE1BQU0sS0FBSyxHQUFHLFFBQVEsQ0FBQyxNQUFNLENBQUMsT0FBQSxVQUFVLENBQUMsQ0FBQztnQkFDMUMsTUFBTSxJQUFJLEdBQUcsUUFBUSxDQUFDLE1BQU0sQ0FBQyxPQUFBLFNBQVMsQ0FBQyxDQUFDO2dCQUd4QyxNQUFNLGFBQWEsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsR0FBRyxRQUFRLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsT0FBTyxDQUFDO2dCQUVwSCxNQUFNLEtBQUssR0FBRyxhQUFhLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUE7Z0JBRW5ELE1BQU0sS0FBSyxHQUFHLFNBQVMsQ0FBQyxhQUFhLENBQUMsQ0FBQztnQkFFdkMsT0FBTyxDQUFDLEtBQUssRUFBRSxHQUFHLEtBQUssQ0FBQyxDQUFBO1lBQzNCLENBQUM7WUFkZSxpQkFBVSxhQWN6QixDQUFBO1lBRUQsTUFBTSxTQUFTLEdBQUcsQ0FBQyxhQUF1QixFQUFFLEVBQUU7Z0JBQzNDLElBQUksS0FBSyxHQUFHLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDN0IsSUFBSSxHQUFHLEdBQUcsYUFBYSxDQUFDLGFBQWEsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUM7Z0JBR2xELElBQUksV0FBVyxHQUFHLE1BQU0sQ0FBQyxHQUFHLEVBQUUsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUM7Z0JBRWpFLElBQUksRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFLEdBQUcsV0FBVyxDQUFDLE9BQU8sRUFBRSxDQUFDO2dCQUU5QyxJQUFJLE1BQU0sR0FBRyxNQUFNLENBQUMsS0FBSyxFQUFFLEtBQUssRUFBRSxXQUFXLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDO2dCQUUzRSxJQUFJLElBQUksR0FBRztvQkFDUixLQUFLLEVBQUUsTUFBTSxHQUFHLFNBQVMsQ0FBQyxXQUFXLEdBQUcsR0FBRztvQkFDM0MsTUFBTSxFQUFFLFNBQVMsQ0FBQyxXQUFXLEdBQUcsRUFBRSxHQUFHLEVBQUU7aUJBQ3pDLENBQUE7Z0JBRUQsT0FBTyxHQUFHLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLElBQUksRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsTUFBTSxDQUFDLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsQ0FBQztZQUN2RixDQUFDLENBQUE7UUFFSixDQUFDLEVBeEMyQixNQUFNLEdBQU4sZ0JBQU0sS0FBTixnQkFBTSxRQXdDakM7SUFBRCxDQUFDLEVBeENpQixTQUFTLEdBQVQsaUJBQVMsS0FBVCxpQkFBUyxRQXdDMUI7QUFBRCxDQUFDLEVBeENTLE9BQU8sS0FBUCxPQUFPLFFBd0NoQiIsInNvdXJjZXNDb250ZW50IjpbIm5hbWVzcGFjZSBDaXJjdWl0LkNvbXBvbmVudC5fVHJhY2sge1xyXG5cclxuICAgY29uc3QgZHJhd1N0cmlwYm9hcmRIb2xlID0gKHBvc2l0aW9uOiBWZWN0b3IpID0+IFN2Zy5FbGVtZW50LkNpcmNsZS5tYWtlKHBvc2l0aW9uLCA0LCBcImhvbGVcIik7XHJcbiAgIGNvbnN0IGRyYXdCcmVhZGJvYXJkSG9sZSA9IChwb3NpdGlvbjogVmVjdG9yKSA9PiBTdmcuRWxlbWVudC5SZWN0Lm1ha2UocG9zaXRpb24sIHsgd2lkdGg6IDgsIGhlaWdodDogOCB9LCB2ZWN0b3IoMC41KSwgXCJob2xlXCIpO1xyXG5cclxuICAgZXhwb3J0IGZ1bmN0aW9uIGRyYXdMYXlvdXQoaW5zdGFuY2U6IENsYXNzZXMuTGF5b3V0KSB7XHJcbiAgICAgIGNvbnN0IGhvbGVGdW5jID0gKGluc3RhbmNlLnN0eWxlID09PSBcImJyZWFkYm9hcmRcIikgPyBkcmF3QnJlYWRib2FyZEhvbGUgOiBkcmF3U3RyaXBib2FyZEhvbGU7XHJcblxyXG4gICAgICBjb25zdCBzdGFydCA9IGluc3RhbmNlLmpvaW50c1tJTkRFWFNUQVJUXTtcclxuICAgICAgY29uc3Qgc3RlcCA9IGluc3RhbmNlLmpvaW50c1tJTkRFWFNURVBdO1xyXG5cclxuICAgICAgLy8gQ3JlYXRlIHRoZSBob2xlc1xyXG4gICAgICBjb25zdCBob2xlUG9zaXRpb25zID0gdmVjdG9yKHN0ZXApLnNjYWxlTWFwKFV0aWxpdHkuY3VtdWxhdGl2ZVN1bSguLi5pbnN0YW5jZS5ob2xlU3BhY2luZ3MpKS5zdW1XaXRoKHN0YXJ0KS52ZWN0b3JzO1xyXG5cclxuICAgICAgY29uc3QgaG9sZXMgPSBob2xlUG9zaXRpb25zLm1hcChocCA9PiBob2xlRnVuYyhocCkpXHJcblxyXG4gICAgICBjb25zdCB0cmFjayA9IGRyYXdUcmFjayhob2xlUG9zaXRpb25zKTtcclxuXHJcbiAgICAgIHJldHVybiBbdHJhY2ssIC4uLmhvbGVzXVxyXG4gICB9XHJcblxyXG4gICBjb25zdCBkcmF3VHJhY2sgPSAoaG9sZVBvc2l0aW9uczogVmVjdG9yW10pID0+IHtcclxuICAgICAgbGV0IHN0YXJ0ID0gaG9sZVBvc2l0aW9uc1swXTtcclxuICAgICAgbGV0IGVuZCA9IGhvbGVQb3NpdGlvbnNbaG9sZVBvc2l0aW9ucy5sZW5ndGggLSAxXTtcclxuICAgICAgLy86IFZlY3Rvciwgc3RlcDogVmVjdG9yLCBzdGVwQ291bnQ6IG51bWJlclxyXG4gICAgICAvLyBDcmVhdGUgdGhlIHRyYWNrXHJcbiAgICAgIGxldCByZWxhdGl2ZUVuZCA9IHZlY3RvcihlbmQsIHZlY3RvcihzdGFydCkuc2NhbGVXaXRoKC0xKSkuc3VtKCk7XHJcblxyXG4gICAgICBsZXQgeyByYWRpdXMsIGFuZ2xlIH0gPSByZWxhdGl2ZUVuZC5hc1BvbGFyKCk7XHJcblxyXG4gICAgICBsZXQgY2VudHJlID0gdmVjdG9yKHN0YXJ0LCBzdGFydCwgcmVsYXRpdmVFbmQpLnN1bSgpLnNjYWxlV2l0aCgwLjUpLnZlY3RvcjtcclxuXHJcbiAgICAgIGxldCBzaXplID0ge1xyXG4gICAgICAgICB3aWR0aDogcmFkaXVzICsgQ29uc3RhbnRzLmdyaWRTcGFjaW5nICogMC44LFxyXG4gICAgICAgICBoZWlnaHQ6IENvbnN0YW50cy5ncmlkU3BhY2luZyAqIDE0IC8gMTZcclxuICAgICAgfVxyXG5cclxuICAgICAgcmV0dXJuIFN2Zy5FbGVtZW50LlJlY3QubWFrZShjZW50cmUsIHNpemUsIHZlY3RvcigwKSwgJ2JvZHknKS5yb3RhdGUoYW5nbGUsIGNlbnRyZSk7XHJcbiAgIH1cclxuXHJcbn0iXX0=