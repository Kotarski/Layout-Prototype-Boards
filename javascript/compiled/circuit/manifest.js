import Active from "../~active";
import Component from "./+component";
const manifest = (() => {
    const clear = () => {
        manifest.layout = manifest.layout.filter(component => {
            component.group.element.remove();
            return false;
        });
        manifest.schematic = manifest.schematic.filter(component => {
            component.group.element.remove();
            return false;
        });
        $(Active.layout.root.element).children().remove();
        $(Active.schematic.root.element).children().remove();
    };
    let activeBoard;
    const constructFrom = (savedManifest) => {
        manifest.clear();
        manifest.schematic = savedManifest.schematic;
        manifest.layout = savedManifest.layout;
        if (!savedManifest.layout || savedManifest.layout.length === 0)
            completeManifestLayout();
        manifest.activeBoard = manifest.layout.find(component => mappings.getComponentMapSafe(component).isBoard === true);
        draw();
    };
    const addComponent = (manifestSection, ...components) => {
        let diagram;
        if (manifestSection === manifest.schematic) {
            diagram = Active.schematic;
        }
        else {
            diagram = Active.layout;
        }
        components.forEach(component => component.disabled = true);
        history.addEvent(manifest, ...components);
        components.forEach(component => {
            component.disabled = false;
            manifestSection.push(component);
            placeComponent(component, diagram);
        });
    };
    const placeComponent = (component, diagram) => {
        component.insertInto(diagram.root.group.element);
        $(component.group.element).trigger(Events.place);
    };
    const draw = () => {
        manifest.schematic.forEach(component => placeComponent(component, Active.schematic));
        manifest.layout.forEach(component => placeComponent(component, Active.layout));
    };
    const removeComponent = (...components) => {
        history.addEvent(manifest, ...components);
        manifest.layout = manifest.layout.filter(el => !components.includes(el));
        manifest.schematic = manifest.schematic.filter(el => !components.includes(el));
        components.forEach(component => {
            $(component.group.element).hide();
            component.disabled = true;
        });
    };
    const findCorresponding = (component) => {
        if (!mappings.getComponentMapSafe(component).correspondsTo)
            return [];
        if (manifest.layout.includes(component)) {
            return manifest.schematic.filter(areComponentsSimilar(component));
        }
        else if (manifest.schematic.includes(component)) {
            return manifest.layout.filter(areComponentsSimilar(component));
        }
        else {
            return [];
        }
    };
    const checkAll = () => {
        console.groupCollapsed("Check Data");
        let layComponents = manifest.layout.filter(c => mappings.getComponentMapSafe(c).correspondsTo);
        let schComponents = manifest.schematic.filter(c => mappings.getComponentMapSafe(c).correspondsTo);
        let schConnectorData = schComponents.map(schComponent => ({
            component: schComponent,
            connectorSets: getMinConnections(schComponent)
        }));
        let split = Utility.split(layComponents, (layComponent) => {
            if (schConnectorData.length === 0)
                return false;
            let layConnectorSets = getMinConnections(layComponent);
            let schConnectorMinData = schConnectorData.filter(datum => areComponentsSimilar(layComponent)(datum.component));
            const componentIsUnique = mappings.getComponentMapSafe(layComponent).isUnique;
            if (componentIsUnique) {
                let merged = mergeConnectorsSets(schConnectorMinData.map(datum => datum.connectorSets));
                schConnectorMinData.forEach(datum => {
                    datum.connectorSets = merged;
                });
            }
            let found = schConnectorMinData.filter(datum => connectorSetsHaveMatch(layConnectorSets, datum.connectorSets));
            if (componentIsUnique) {
                schConnectorData = schConnectorData.filter(datum => !found.includes(datum));
                console.log("Layout %s '%o, matched with '%o'", layComponent.name, [layComponent], found);
            }
            else {
                schConnectorData = schConnectorData.filter(datum => datum !== found[0]);
                console.log("Layout %s '%o, matched with '%o'", layComponent.name, [layComponent], [found[0]]);
            }
            return found.length > 0;
        });
        console.log("Unmatched schematic components: %o", schConnectorData.map(datum => datum.component));
        console.log("Unmatched layout components: %o", split.fails);
        console.groupEnd();
        return {
            corrects: split.passes,
            incorrects: split.fails
        };
    };
    const getState = () => {
        return {
            schematic: [...manifest.schematic],
            layout: [...manifest.layout],
            activeBoard: manifest.activeBoard
        };
    };
    return {
        schematic: [],
        layout: [],
        addComponent: addComponent,
        constructFrom: constructFrom,
        removeComponent: removeComponent,
        findCorresponding: findCorresponding,
        checkAll: checkAll,
        activeBoard: activeBoard,
        getState: getState,
        clear: clear
    };
})();
const arePropertiesEqual = Utility.Curry.makeOptional((A, B) => {
    let Akeys = Object.keys(A);
    let Bkeys = Object.keys(B);
    return ((Akeys.length === Bkeys.length) &&
        Akeys.every(key => {
            return (B.hasOwnProperty(key) && A[key] === B[key]);
        }));
});
const areComponentsSimilar = Utility.Curry.makeOptional((componentA, componentB) => {
    return (componentA.name === componentB.name &&
        arePropertiesEqual(componentA.getProperties(), componentB.getProperties()));
});
const createMissingLayoutElements = () => {
    let layoutCopy = manifest.layout.slice();
    manifest.schematic.forEach(schematicElement => {
        let properties = schematicElement.getProperties();
        let match = layoutCopy.find(layoutElement => arePropertiesEqual(properties, layoutElement.getProperties()));
        if (match) {
            if (!mappings.getComponentMapSafe(match).isUnique) {
                layoutCopy = layoutCopy.filter(Utility.is(match));
            }
        }
        else {
            const correspondsTo = mappings.getComponentMapSafe(schematicElement).correspondsTo;
            if (correspondsTo !== undefined) {
                const newComponentMaker = correspondsTo.make;
                const newComponent = newComponentMaker(schematicElement.getProperties());
                manifest.layout.push(newComponent);
                if (mappings.getComponentMapSafe(newComponent).isUnique) {
                    layoutCopy.push(newComponent);
                }
            }
        }
    });
};
const mergeSingleOpAmps = () => {
    let layoutOpAmps = manifest.layout.filter(layoutElement => (layoutElement["constructor"] === Component.opAmp.layout.instance));
    let opAmpGroups = [];
    layoutOpAmps.forEach((opAmp, i) => {
        let groupIdx = opAmpGroups.findIndex(group => arePropertiesEqual(opAmp.getProperties(), group[0].getProperties()));
        if (groupIdx >= 0) {
            opAmpGroups[groupIdx].push(opAmp);
        }
        else {
            opAmpGroups.push([opAmp]);
        }
    });
    opAmpGroups.forEach(group => {
        while (group.length >= 2) {
            group[0].replaceWithDual();
            manifest.removeComponent(group[1]);
            group = group.splice(2);
        }
    });
};
const completeManifestLayout = () => {
    createMissingLayoutElements();
    mergeSingleOpAmps();
};
const mergeConnectorSets = (connectorSets) => {
    return connectorSets.reduce((mergedConnectorSet, connectorSet) => {
        connectorSet.forEach(connector => {
            let found = mergedConnectorSet.find((mConnector) => mConnector.name === connector.name);
            if (found) {
                found.connections.push(...connector.connections);
            }
            else {
                mergedConnectorSet.push(connector);
            }
        });
        return mergedConnectorSet;
    });
};
const mergeConnectorsSets = (connectorSetGroups) => {
    return connectorSetGroups.reduce((mergedConnectorSetGroup, connectorSetGroup) => {
        connectorSetGroup.forEach((connectorSet, i) => {
            mergedConnectorSetGroup[i] = mergeConnectorSets([(mergedConnectorSetGroup[i] || []), connectorSet]);
        });
        return mergedConnectorSetGroup;
    });
};
const getMinConnections = (component) => {
    return (component.getConnections().map(connectorSet => {
        return (connectorSet.map(connections => {
            let connectorName = connections[0].name;
            connections.shift();
            let blackHole = connections.find(connection => mappings.getComponentMapSafe(connection.component).isUnique === true);
            if (blackHole)
                connections = connections.filter(Utility.is(blackHole));
            return {
                name: connectorName,
                connections: connections.filter((connection) => mappings.getComponentMapSafe(connection.component).correspondsTo)
            };
        })).filter(c => c.connections.length !== 0);
    }));
};
const connectorSetsHaveMatch = Utility.Curry.makeOptional((connectorSetsA, connectorSetsB) => {
    return connectorSetsA.some(connectorSetA => {
        return connectorSetsB.some(connectorSetMatch(connectorSetA));
    });
});
const connectorSetMatch = Utility.Curry.makeOptional((connectorSetA, connectorSetB) => {
    return Utility.isUnaryMap(connectorSetA, connectorSetB, (connectorA, connectorB) => {
        if (connectorA.name !== connectorB.name)
            return false;
        const connectionsA = connectorA.connections;
        const connectionsB = connectorB.connections;
        return Utility.isUnaryMap(connectionsA, connectionsB, (connectionA, connectionB) => {
            return (connectionA.name === connectionB.name
                && areComponentsSimilar(connectionA.component, connectionB.component));
        });
    });
});
export default manifest;
//# sourceMappingURL=data:application/json;base64,