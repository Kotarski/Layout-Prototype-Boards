"use strict";
var Circuit;
(function (Circuit) {
    var Component;
    (function (Component) {
        var Generics;
        (function (Generics) {
            function getComponentConnections(component, otherComponents) {
                const allConnectors = Utility.flatten3d(otherComponents.map(el => el.connectorSets));
                return component.connectorSets.map(connectorSet => {
                    const uniqueNetConnectors = getUniqueNetConnectors(connectorSet);
                    return uniqueNetConnectors.map(connector => {
                        return getConnectorConnections(connector, allConnectors);
                    });
                });
            }
            Generics.getComponentConnections = getComponentConnections;
            function getUniqueNetConnectors(connectors) {
                let nonCheckedConnectors = connectors;
                let uniqueNetConnectors = [];
                while (nonCheckedConnectors.length) {
                    uniqueNetConnectors.push(nonCheckedConnectors[0]);
                    let nettedConnectors = nonCheckedConnectors[0]
                        .component.transferFunction(nonCheckedConnectors[0])
                        .concat(nonCheckedConnectors[0]);
                    nonCheckedConnectors = nonCheckedConnectors.filter(connector => !nettedConnectors.includes(connector));
                }
                return uniqueNetConnectors;
            }
            function getConnectorConnections(connector, allConnectors) {
                let connectedConnectors = [];
                let nonCheckedConnections = connector.component.transferFunction(connector).concat(connector);
                while (nonCheckedConnections.length) {
                    connectedConnectors.push(...nonCheckedConnections);
                    let newConnections = [];
                    nonCheckedConnections.forEach(connection => {
                        getConnectorDirectConnections(connection, allConnectors).forEach(connected => {
                            if (!(connectedConnectors.includes(connected))) {
                                connectedConnectors.push(connected);
                                newConnections.push(...connected.component.transferFunction(connected));
                            }
                        });
                    });
                    nonCheckedConnections = newConnections;
                }
                return connectedConnectors;
            }
            function getConnectorDirectConnections(connector, allConnectors) {
                const acceptedTypes = Circuit.mappings.connectorAcceptedTypes[connector.type];
                const point = connector.point;
                return allConnectors.filter(other => {
                    return (acceptedTypes.includes(other.type)
                        && vector(point).isCloseTo(other.point));
                });
            }
        })(Generics = Component.Generics || (Component.Generics = {}));
    })(Component = Circuit.Component || (Circuit.Component = {}));
})(Circuit || (Circuit = {}));
//# sourceMappingURL=data:application/json;base64,