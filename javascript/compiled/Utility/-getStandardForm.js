export default function getStandardForm(value, unit = "") {
    let exponentialParts = value.toExponential().split("e");
    let coefficient = parseFloat(exponentialParts[0]);
    let exponent = parseInt(exponentialParts[1]);
    for (let i = 0; i < 3; i++) {
        if (exponent in prefixes)
            break;
        coefficient *= 10;
        exponent--;
    }
    const numeric = parseFloat(coefficient.toPrecision(2));
    const prefix = prefixes[exponent] || "";
    return numeric + prefix + unit;
}
const prefixes = {
    '-24': 'y',
    '-21': 'z',
    '-18': 'a',
    '-15': 'f',
    '-12': 'p',
    '-9': 'n',
    '-6': 'Âµ',
    '-3': 'm',
    '0': '',
    '3': 'k',
    '6': 'M',
    '9': 'G',
    '12': 'T',
    '15': 'P',
    '18': 'E',
    '21': 'Z',
    '24': 'Y'
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLWdldFN0YW5kYXJkRm9ybS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3R5cGVzY3JpcHQvdXRpbGl0eS8tZ2V0U3RhbmRhcmRGb3JtLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE1BQU0sQ0FBQyxPQUFPLFVBQVUsZUFBZSxDQUFDLEtBQWEsRUFBRSxPQUFlLEVBQUU7SUFDckUsSUFBSSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsYUFBYSxFQUFFLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBRXhELElBQUksV0FBVyxHQUFXLFVBQVUsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzFELElBQUksUUFBUSxHQUFXLFFBQVEsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXJELEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUU7UUFDekIsSUFBSSxRQUFRLElBQUksUUFBUTtZQUFFLE1BQU07UUFDaEMsV0FBVyxJQUFJLEVBQUUsQ0FBQztRQUNsQixRQUFRLEVBQUUsQ0FBQztLQUNiO0lBRUQsTUFBTSxPQUFPLEdBQUcsVUFBVSxDQUFDLFdBQVcsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUN2RCxNQUFNLE1BQU0sR0FBRyxRQUFRLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDO0lBRXhDLE9BQU8sT0FBTyxHQUFHLE1BQU0sR0FBRyxJQUFJLENBQUM7QUFDbEMsQ0FBQztBQUVELE1BQU0sUUFBUSxHQUE4QjtJQUN6QyxLQUFLLEVBQUUsR0FBRztJQUNWLEtBQUssRUFBRSxHQUFHO0lBQ1YsS0FBSyxFQUFFLEdBQUc7SUFDVixLQUFLLEVBQUUsR0FBRztJQUNWLEtBQUssRUFBRSxHQUFHO0lBQ1YsSUFBSSxFQUFFLEdBQUc7SUFDVCxJQUFJLEVBQUUsR0FBRztJQUNULElBQUksRUFBRSxHQUFHO0lBQ1QsR0FBRyxFQUFFLEVBQUU7SUFDUCxHQUFHLEVBQUUsR0FBRztJQUNSLEdBQUcsRUFBRSxHQUFHO0lBQ1IsR0FBRyxFQUFFLEdBQUc7SUFDUixJQUFJLEVBQUUsR0FBRztJQUNULElBQUksRUFBRSxHQUFHO0lBQ1QsSUFBSSxFQUFFLEdBQUc7SUFDVCxJQUFJLEVBQUUsR0FBRztJQUNULElBQUksRUFBRSxHQUFHO0NBQ1gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFN0YW5kYXJkRm9ybSh2YWx1ZTogbnVtYmVyLCB1bml0OiBzdHJpbmcgPSBcIlwiKTogc3RyaW5nIHtcclxuICAgbGV0IGV4cG9uZW50aWFsUGFydHMgPSB2YWx1ZS50b0V4cG9uZW50aWFsKCkuc3BsaXQoXCJlXCIpO1xyXG5cclxuICAgbGV0IGNvZWZmaWNpZW50OiBudW1iZXIgPSBwYXJzZUZsb2F0KGV4cG9uZW50aWFsUGFydHNbMF0pO1xyXG4gICBsZXQgZXhwb25lbnQ6IG51bWJlciA9IHBhcnNlSW50KGV4cG9uZW50aWFsUGFydHNbMV0pO1xyXG5cclxuICAgZm9yIChsZXQgaSA9IDA7IGkgPCAzOyBpKyspIHtcclxuICAgICAgaWYgKGV4cG9uZW50IGluIHByZWZpeGVzKSBicmVhaztcclxuICAgICAgY29lZmZpY2llbnQgKj0gMTA7XHJcbiAgICAgIGV4cG9uZW50LS07XHJcbiAgIH1cclxuXHJcbiAgIGNvbnN0IG51bWVyaWMgPSBwYXJzZUZsb2F0KGNvZWZmaWNpZW50LnRvUHJlY2lzaW9uKDIpKTtcclxuICAgY29uc3QgcHJlZml4ID0gcHJlZml4ZXNbZXhwb25lbnRdIHx8IFwiXCI7XHJcblxyXG4gICByZXR1cm4gbnVtZXJpYyArIHByZWZpeCArIHVuaXQ7XHJcbn1cclxuXHJcbmNvbnN0IHByZWZpeGVzOiB7IFtrZXk6IHN0cmluZ106IHN0cmluZyB9ID0ge1xyXG4gICAnLTI0JzogJ3knLFxyXG4gICAnLTIxJzogJ3onLFxyXG4gICAnLTE4JzogJ2EnLFxyXG4gICAnLTE1JzogJ2YnLFxyXG4gICAnLTEyJzogJ3AnLFxyXG4gICAnLTknOiAnbicsXHJcbiAgICctNic6ICfCtScsXHJcbiAgICctMyc6ICdtJyxcclxuICAgJzAnOiAnJyxcclxuICAgJzMnOiAnaycsXHJcbiAgICc2JzogJ00nLFxyXG4gICAnOSc6ICdHJyxcclxuICAgJzEyJzogJ1QnLFxyXG4gICAnMTUnOiAnUCcsXHJcbiAgICcxOCc6ICdFJyxcclxuICAgJzIxJzogJ1onLFxyXG4gICAnMjQnOiAnWSdcclxufTtcclxuIl19