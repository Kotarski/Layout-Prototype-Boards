"use strict";
var Svg;
(function (Svg) {
    var Element;
    (function (Element) {
        function make(type, classes = "") {
            const element = document.createElementNS(Constants.svgURI, type);
            $(element).addClass(classes);
            return element;
        }
        Element.make = make;
        let Functions;
        (function (Functions) {
            function rotate(element) {
                return (rotation, centre, insertBefore = false) => {
                    let centreV;
                    if (centre) {
                        centreV = centre;
                    }
                    else {
                        let bounds = element.getBBox();
                        centreV = { x: bounds.width / 2 + bounds.x, y: bounds.height / 2 + bounds.y };
                    }
                    Svg.addTransform(element, t => t.setRotate(rotation, centreV.x, centreV.y), insertBefore);
                    return svg(element);
                };
            }
            Functions.rotate = rotate;
            function translate(element) {
                return (translation, insertBefore = true) => {
                    Svg.addTransform(element, t => t.setTranslate(translation.x, translation.y), insertBefore);
                    return svg(element);
                };
            }
            Functions.translate = translate;
            function scale(element) {
                return (scale, insertBefore = true) => {
                    let scaleV = (typeof scale === "number") ? { x: scale, y: scale } : scale;
                    Svg.addTransform(element, t => t.setScale((scaleV.x || 1), (scaleV.y || 1)), insertBefore);
                    return svg(element);
                };
            }
            Functions.scale = scale;
            function getTransforms(element) {
                return () => {
                    let transform = element.transform.baseVal.consolidate();
                    return (transform === null) ? Svg.makeMatrix() : {
                        a: transform.matrix.a, b: transform.matrix.b, c: transform.matrix.c,
                        d: transform.matrix.d, e: transform.matrix.e, f: transform.matrix.f
                    };
                };
            }
            Functions.getTransforms = getTransforms;
            function setTransforms(element) {
                return (transformMatrix) => {
                    element.transform.baseVal.clear();
                    element.removeAttribute('transform');
                    let matrix = Svg.makeMatrix();
                    matrix.a = transformMatrix.a;
                    matrix.b = transformMatrix.b;
                    matrix.c = transformMatrix.c;
                    matrix.d = transformMatrix.d;
                    matrix.e = transformMatrix.e;
                    matrix.f = transformMatrix.f;
                    let transform = element.transform.baseVal.createSVGTransformFromMatrix(matrix);
                    element.transform.baseVal.appendItem(transform);
                    return svg(element);
                };
            }
            Functions.setTransforms = setTransforms;
            function convertVector(element) {
                return (vector, direction, type) => {
                    let conversionMatrix = element.getScreenCTM() || Svg.makeMatrix();
                    if (direction === "DomToSvg")
                        conversionMatrix = conversionMatrix.inverse();
                    if (type === "absToDoc" && element.transform.baseVal.numberOfItems > 0) {
                        element.transform.baseVal.consolidate();
                        let groupMatrix = element.transform.baseVal.getItem(0).matrix;
                        conversionMatrix = conversionMatrix.multiply(groupMatrix);
                    }
                    let convertedVector = {
                        x: vector.x * conversionMatrix.a + vector.y * conversionMatrix.c,
                        y: vector.y * conversionMatrix.d + vector.x * conversionMatrix.b
                    };
                    if (type === "relToGroup") {
                        convertedVector.x += conversionMatrix.e;
                        convertedVector.y += conversionMatrix.f;
                    }
                    return convertedVector;
                };
            }
            Functions.convertVector = convertVector;
        })(Functions = Element.Functions || (Element.Functions = {}));
    })(Element = Svg.Element || (Svg.Element = {}));
})(Svg || (Svg = {}));
//# sourceMappingURL=data:application/json;base64,