"use strict";
var Svg;
(function (Svg) {
    var Addins;
    (function (Addins) {
        var Draggable;
        (function (Draggable) {
            Draggable.init = (element, options = {}) => {
                let eventTarget = options.eventTarget !== undefined ? options.eventTarget : element;
                let grid = options.grid !== undefined ? options.grid : {
                    x: 10,
                    y: 10
                };
                let styleClass = options.styleClass !== undefined ? options.styleClass : "dragging";
                let lastPosition;
                if ($(eventTarget).draggable("instance") === undefined) {
                    $(eventTarget).draggable({
                        start: (event, ui) => {
                            $(element).addClass(styleClass);
                            if (grid !== "off") {
                                let gridSvg = svg(element).convertVector(grid, "SvgToDom", "absToDoc");
                                $(eventTarget).draggable("option", "grid", [gridSvg.x, gridSvg.y]);
                            }
                            lastPosition = {
                                x: ui.originalPosition.left,
                                y: ui.originalPosition.top
                            };
                        },
                        drag: (event, ui) => {
                            let dragChangeDom = {
                                x: ui.position.left - lastPosition.x,
                                y: ui.position.top - lastPosition.y
                            };
                            let dragChangeSvg = svg(element).convertVector(dragChangeDom, "DomToSvg", "absToDoc");
                            if (!vector(dragChangeSvg).isCloseTo({ x: 0, y: 0 })) {
                                $(eventTarget).trigger(Circuit.Events.drag, [ui, dragChangeSvg]);
                                lastPosition = {
                                    x: ui.position.left,
                                    y: ui.position.top
                                };
                            }
                        },
                        stop: (event, ui) => {
                            $(element).removeClass(styleClass);
                            element.transform.baseVal.consolidate();
                        }
                    });
                }
                if (options.onDrag !== undefined) {
                    $(eventTarget).on(Circuit.Events.drag, (e, ui, drag) => {
                        if ($(e.target).closest(".ui-draggable").is(eventTarget)) {
                            if (options.onDrag)
                                options.onDrag(drag, e);
                        }
                    });
                }
                ;
                if (options.disableMovement !== true) {
                    $(eventTarget).on(Circuit.Events.drag, (e, ui, drag) => {
                        if ($(e.target).closest(".ui-draggable").is(eventTarget)) {
                            svg(element).translate(drag, true);
                        }
                    });
                }
                if (options.constrainWith !== undefined) {
                    $(eventTarget).on("dragSVGConstraintCheck", (e, ui, dragSvg, dragDom) => {
                        if (options.constrainWith)
                            if (options.constrainWith(dragSvg)) {
                                dragSvg.x = 0;
                                dragSvg.y = 0;
                                ui.position.top = lastPosition.y;
                                ui.position.left = lastPosition.x;
                            }
                    });
                }
                if (options.onStart !== undefined) {
                    $(eventTarget).on(Circuit.Events.dragStart, (e, ui) => {
                        if (options.onStart)
                            options.onStart(e);
                    });
                }
                if (options.onStop !== undefined) {
                    $(eventTarget).on(Circuit.Events.dragStop, (e, ui) => {
                        if (options.onStop)
                            options.onStop(e);
                    });
                }
                if (options.useHelper === true) {
                    $(eventTarget).draggable("option", "helper", () => document.createElement("div"));
                }
            };
        })(Draggable = Addins.Draggable || (Addins.Draggable = {}));
    })(Addins = Svg.Addins || (Svg.Addins = {}));
})(Svg || (Svg = {}));
//# sourceMappingURL=data:application/json;base64,