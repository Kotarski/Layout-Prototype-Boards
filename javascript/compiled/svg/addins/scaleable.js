"use strict";
var Svg;
(function (Svg) {
    var Addins;
    (function (Addins) {
        var Scaleable;
        (function (Scaleable) {
            Scaleable.init = (element, options = {}) => {
                let eventTarget = options.eventTarget !== undefined ? options.eventTarget : element;
                let mouseWheelHandler = (e) => {
                    if (e.buttons === 1 || e.buttons === 3) {
                        return;
                    }
                    let scaleChange = Math.sign(e.wheelDelta) * 0.05;
                    let clientBounds = element.getBoundingClientRect();
                    let owner = element.ownerSVGElement;
                    let rootClientBounds = (owner) ? owner.getBoundingClientRect() : {
                        left: 0,
                        top: 0
                    };
                    let clientStart = {
                        x: clientBounds.left - rootClientBounds.left,
                        y: clientBounds.top - rootClientBounds.top
                    };
                    let svgStart = svg(element).convertVector(clientStart, "DomToSvg", "absToDoc");
                    let svgSize = svg(element).convertVector({
                        x: clientBounds.width,
                        y: clientBounds.height
                    }, "DomToSvg", "absToDoc");
                    let mousePosDomFromCentre = {
                        x: e.clientX - (clientBounds.left + clientBounds.width / 2),
                        y: e.clientY - (clientBounds.top + clientBounds.height / 2)
                    };
                    let mousePosSvgFromCentre = svg(element).convertVector(mousePosDomFromCentre, "DomToSvg", "absToDoc");
                    let scale = {
                        x: 1 + scaleChange,
                        y: 1 + scaleChange
                    };
                    svg(element).scale(scale, true);
                    let scaleTranslationAdjust = {
                        x: (svgStart.x + svgSize.x / 2 + mousePosSvgFromCentre.x) * -scaleChange,
                        y: (svgStart.y + svgSize.y / 2 + mousePosSvgFromCentre.y) * -scaleChange
                    };
                    svg(element).translate(scaleTranslationAdjust, true);
                    if (options.onScale !== undefined) {
                        options.onScale(scale, scaleTranslationAdjust);
                    }
                };
                eventTarget.addEventListener("DOMMouseScroll", (e) => mouseWheelHandler(e), {
                    passive: true
                });
                eventTarget.addEventListener("mousewheel", (e) => mouseWheelHandler(e), {
                    passive: true
                });
            };
        })(Scaleable = Addins.Scaleable || (Addins.Scaleable = {}));
    })(Addins = Svg.Addins || (Svg.Addins = {}));
})(Svg || (Svg = {}));
//# sourceMappingURL=data:application/json;base64,