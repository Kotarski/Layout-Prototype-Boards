import NodeElements from "../../~nodeElements";
import Events from "../../ui/~events";
import buildComponents from "./dasim/-buildComponents";
import filterInvalidComponents from "./dasim/-filterInvalidComponents";
import getRawComponentsFromString from "./dasim/-getRawComponentsFromString";
import getStringFromFileInput from "./dasim/-getStringFromFileInput";
let lastFilename;
function handleFileInputEvent(event) {
    let fileInput = event.target;
    if (fileInput.value.length == 0) {
    }
    else {
        console.groupCollapsed("File Load Data");
        $.Deferred().resolve(fileInput)
            .then(() => getStringFromFileInput(fileInput))
            .then((file, fileString) => {
            let filename = file.name;
            let fileExtension = filename.split('.').pop();
            lastFilename = filename;
            if (fileExtension === "dasim" || fileExtension === "layout") {
                $.Deferred().resolve(fileString)
                    .then((string) => getRawComponentsFromString(string))
                    .then((circuitObjects) => filterInvalidComponents(circuitObjects))
                    .then((rawComponents) => buildComponents(rawComponents))
                    .then((savedManifest) => {
                    NodeElements.fileStatusText.innerText = "File:\r\n\"" + filename + "\"\r\nLoaded Successfully";
                    if (savedManifest) {
                        Circuit.manifest.constructFrom(savedManifest);
                        Circuit.history.reInit(...Circuit.manifest.layout);
                    }
                    else {
                        console.error("savedManifest is undefined");
                    }
                    console.groupEnd();
                    Events.schematicPaneResize();
                    Events.layoutPaneResize();
                })
                    .fail((failText) => {
                    console.warn("Failed to load circuit: ", failText);
                    NodeElements.fileStatusText.innerText = "Failed to load file:\r\n\""
                        + "" + filename + "\"\r\n"
                        + "Error:\r\n\"" +
                        failText + "\"";
                    console.groupEnd();
                });
            }
            else {
                console.error("Failed to load circuit: Incorrect file extenstion %o", fileExtension);
                NodeElements.fileStatusText.innerText = "Failed to load file:\r\n\""
                    + "" + filename + "\"\r\n"
                    + "Error:\r\n\"" +
                    "Incorrect file extenstion: \"." + fileExtension + "\"\"";
                console.groupEnd();
            }
            $(fileInput).val("");
        });
    }
}
export { lastFilename, handleFileInputEvent };
//# sourceMappingURL=data:application/json;base64,