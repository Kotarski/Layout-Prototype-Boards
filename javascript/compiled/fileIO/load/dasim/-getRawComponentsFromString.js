export default function getRawComponentsFromString(fileString) {
    let deferred = $.Deferred();
    $.Deferred().resolve(fileString)
        .then(() => getComponentStrings(fileString))
        .then((strings) => getCircuitObjects(strings))
        .then(deferred.resolve)
        .fail((failText) => deferred.reject(failText));
    return deferred.promise();
}
function getComponentStrings(fileString) {
    let deferred = $.Deferred();
    try {
        let circuitObjectStrings = [];
        circuitObjectStrings = JSON.parse(fileString.replace("\n", ""));
        deferred.resolve(circuitObjectStrings);
    }
    catch (e) {
        if (e instanceof SyntaxError)
            console.error("Error in file list format: %o ", [e]);
        deferred.reject("Error in file list format");
    }
    return deferred.promise();
}
function getCircuitObjects(circuitObjectStrings) {
    let deferred = $.Deferred();
    try {
        let circuitObjects = [];
        for (let circuitObjectString of circuitObjectStrings) {
            let circuitObject = JSON.parse(circuitObjectString);
            circuitObjects.push(circuitObject);
        }
        console.info("Circuit objects %o successfully parsed", [circuitObjects]);
        deferred.resolve(circuitObjects);
    }
    catch (e) {
        if (e instanceof SyntaxError)
            console.error("Error in file object format: %o", [e]);
        deferred.reject("Error in file object format");
    }
    return deferred.promise();
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLWdldFJhd0NvbXBvbmVudHNGcm9tU3RyaW5nLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vdHlwZXNjcmlwdC9maWxlSU8vbG9hZC9kYXNpbS8tZ2V0UmF3Q29tcG9uZW50c0Zyb21TdHJpbmcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTSxDQUFDLE9BQU8sVUFBVSwwQkFBMEIsQ0FDL0MsVUFBa0I7SUFHbEIsSUFBSSxRQUFRLEdBQUcsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBSzVCLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDO1NBRTVCLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQyxtQkFBbUIsQ0FBQyxVQUFVLENBQUMsQ0FBQztTQUUzQyxJQUFJLENBQUMsQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFDLGlCQUFpQixDQUFDLE9BQW1CLENBQUMsQ0FBQztTQUV6RCxJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQztTQUV0QixJQUFJLENBQUMsQ0FBQyxRQUFRLEVBQUUsRUFBRSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztJQUdsRCxPQUFPLFFBQVEsQ0FBQyxPQUFPLEVBQUUsQ0FBQztBQUM3QixDQUFDO0FBR0QsU0FBUyxtQkFBbUIsQ0FDekIsVUFBa0I7SUFFbEIsSUFBSSxRQUFRLEdBQUcsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBSTVCLElBQUk7UUFDRCxJQUFJLG9CQUFvQixHQUFhLEVBQUUsQ0FBQztRQUN4QyxvQkFBb0IsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFHaEUsUUFBUSxDQUFDLE9BQU8sQ0FBQyxvQkFBb0IsQ0FBQyxDQUFBO0tBQ3hDO0lBQUMsT0FBTyxDQUFDLEVBQUU7UUFFVCxJQUFJLENBQUMsWUFBWSxXQUFXO1lBQ1YsT0FBTyxDQUFDLEtBQUssQ0FBQyxnQ0FBZ0MsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFFdkUsUUFBUSxDQUFDLE1BQU0sQ0FBQywyQkFBMkIsQ0FBQyxDQUFBO0tBQzlDO0lBR0QsT0FBTyxRQUFRLENBQUMsT0FBTyxFQUFFLENBQUM7QUFDN0IsQ0FBQztBQUdELFNBQVMsaUJBQWlCLENBQ3ZCLG9CQUE4QjtJQUU5QixJQUFJLFFBQVEsR0FBRyxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUM7SUFJNUIsSUFBSTtRQUVELElBQUksY0FBYyxHQUFhLEVBQUUsQ0FBQztRQUdsQyxLQUFLLElBQUksbUJBQW1CLElBQUksb0JBQW9CLEVBQUU7WUFDbkQsSUFBSSxhQUFhLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO1lBQ3BELGNBQWMsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7U0FDckM7UUFHYyxPQUFPLENBQUMsSUFBSSxDQUFDLHdDQUF3QyxFQUFFLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQTtRQUN2RixRQUFRLENBQUMsT0FBTyxDQUFDLGNBQWMsQ0FBQyxDQUFBO0tBRWxDO0lBQUMsT0FBTyxDQUFDLEVBQUU7UUFFVCxJQUFJLENBQUMsWUFBWSxXQUFXO1lBQ1YsT0FBTyxDQUFDLEtBQUssQ0FBQyxpQ0FBaUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFFeEUsUUFBUSxDQUFDLE1BQU0sQ0FBQyw2QkFBNkIsQ0FBQyxDQUFBO0tBQ2hEO0lBR0QsT0FBTyxRQUFRLENBQUMsT0FBTyxFQUFFLENBQUM7QUFDN0IsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFJhd0NvbXBvbmVudHNGcm9tU3RyaW5nKFxyXG4gICBmaWxlU3RyaW5nOiBzdHJpbmcpOiBKUXVlcnlQcm9taXNlPHt9PiB7XHJcbiAgIC8vIFVzZWQgdG8gcXVldWUgYXN5bmNocm9ub3VzIGFjdGlvbnMgd2hpY2ggcmVxdWlyZSB0aGUgb3V0cHV0IG9mIHByZXZpb3VzXHJcbiAgIC8vIGFjdGlvbnNcclxuICAgbGV0IGRlZmVycmVkID0gJC5EZWZlcnJlZCgpO1xyXG5cclxuICAgLy8gUXVldWVzIGZ1bmN0aW9ucyB3aGVyZSBlYWNoIGlucHV0IGlzIHRoZSBwcmV2aW91cyBmdW5jdGlvbnMgb3V0cHV0XHJcblxyXG4gICAvLyBTaG9ydGN1dCB0byBwYXNzIGZpbGVTdHJpbmcgaW50byB0aGUgZmlyc3QgZnVuY3Rpb25cclxuICAgJC5EZWZlcnJlZCgpLnJlc29sdmUoZmlsZVN0cmluZylcclxuICAgICAgLy8gR2V0IGFuIGFycmF5IG9mIHRoZSBzdHJpbmdzIGZvciBlYWNoIG9iamVjdFxyXG4gICAgICAudGhlbigoKSA9PiBnZXRDb21wb25lbnRTdHJpbmdzKGZpbGVTdHJpbmcpKVxyXG4gICAgICAvLyBHZXQgYW4gYXJyYXkgb2YgdGhlIG9iamVjdHNcclxuICAgICAgLnRoZW4oKHN0cmluZ3MpID0+IGdldENpcmN1aXRPYmplY3RzKHN0cmluZ3MgYXMgc3RyaW5nW10pKVxyXG4gICAgICAvLyBSZXR1cm4gdGhlIGFycmF5IG9mIG9iamVjdHNcclxuICAgICAgLnRoZW4oZGVmZXJyZWQucmVzb2x2ZSlcclxuICAgICAgLy8gUGFzcyB0aGUgZmFpbGl1cmUgYmFjayB1cCB0byBjYWxsaW5nIGZ1bmN0aW9uXHJcbiAgICAgIC5mYWlsKChmYWlsVGV4dCkgPT4gZGVmZXJyZWQucmVqZWN0KGZhaWxUZXh0KSk7XHJcblxyXG4gICAvLyBBbGxvdyBjYWxsZXIgdG8gc2VlIHdoZW4gZnVuY3Rpb24gY29tcGxldGVzXHJcbiAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlKCk7XHJcbn1cclxuXHJcbi8vIEludGVybmFsIGZ1bmN0aW9uIHRvIHR1cm4gdGhlIHN0cmluZyBpbnRvIGFuIGFycmF5IG9mIG9iamVjdCBzdHJpbmdzXHJcbmZ1bmN0aW9uIGdldENvbXBvbmVudFN0cmluZ3MoXHJcbiAgIGZpbGVTdHJpbmc6IHN0cmluZyk6IEpRdWVyeVByb21pc2U8e30+IHtcclxuICAgLy8gQWxsb3cgY2FsbGVyIHRvIHNlZSB3aGVuIGZ1bmN0aW9uIGNvbXBsZXRlc1xyXG4gICBsZXQgZGVmZXJyZWQgPSAkLkRlZmVycmVkKCk7XHJcblxyXG4gICAvLyBGYWlsdXJlIHRvIHBhcnNlIHRleHQgaW50byBKU09OIGlzIGEgY29tbW9uIGNhdXNlIG9mIGVycm9yc1xyXG4gICAvLyBjYXRjaGluZyB0aGVtIHByZXZlbnRzIGZhaWx1cmUgb2YgdGhlIHByb2dyYW0uXHJcbiAgIHRyeSB7XHJcbiAgICAgIGxldCBjaXJjdWl0T2JqZWN0U3RyaW5nczogc3RyaW5nW10gPSBbXTtcclxuICAgICAgY2lyY3VpdE9iamVjdFN0cmluZ3MgPSBKU09OLnBhcnNlKGZpbGVTdHJpbmcucmVwbGFjZShcIlxcblwiLCBcIlwiKSk7XHJcblxyXG4gICAgICAvLyBGdW5jdGlvbiBjb21wbGV0ZSwgcmV0dXJuIGFycmF5IG9mIHN0cmluZ3NcclxuICAgICAgZGVmZXJyZWQucmVzb2x2ZShjaXJjdWl0T2JqZWN0U3RyaW5ncylcclxuICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAvLyBBbG1vc3QgZGVmaW5pdGVseSBhIGZpbGUgZm9ybWF0IGlzc3VlXHJcbiAgICAgIGlmIChlIGluc3RhbmNlb2YgU3ludGF4RXJyb3IpXHJcbiAgICAgICAgICAgIC8qTE9HU1RBUlQqL2NvbnNvbGUuZXJyb3IoXCJFcnJvciBpbiBmaWxlIGxpc3QgZm9ybWF0OiAlbyBcIiwgW2VdKTsvKkxPR0VORCovXHJcbiAgICAgIC8vIEZ1bmN0aW9uIGZhaWxlZCwgcmV0dXJuIGVycm9yIHRleHRcclxuICAgICAgZGVmZXJyZWQucmVqZWN0KFwiRXJyb3IgaW4gZmlsZSBsaXN0IGZvcm1hdFwiKVxyXG4gICB9XHJcblxyXG4gICAvLyBBbGxvdyBjYWxsZXIgdG8gc2VlIHdoZW4gZnVuY3Rpb24gY29tcGxldGVzXHJcbiAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlKCk7XHJcbn1cclxuXHJcbi8vIEludGVybmFsIGZ1bmN0aW9uIHRvIHR1cm4gdGhlIHN0cmluZyBhcnJheSBpbnRvIGNpcmN1aXQgb2JqZWN0c1xyXG5mdW5jdGlvbiBnZXRDaXJjdWl0T2JqZWN0cyhcclxuICAgY2lyY3VpdE9iamVjdFN0cmluZ3M6IHN0cmluZ1tdKTogSlF1ZXJ5UHJvbWlzZTx7fT4ge1xyXG4gICAvLyBBbGxvdyBjYWxsZXIgdG8gc2VlIHdoZW4gZnVuY3Rpb24gY29tcGxldGVzXHJcbiAgIGxldCBkZWZlcnJlZCA9ICQuRGVmZXJyZWQoKTtcclxuXHJcbiAgIC8vIEZhaWx1cmUgdG8gcGFyc2UgdGV4dCBpbnRvIEpTT04gaXMgYSBjb21tb24gY2F1c2Ugb2YgZXJyb3JzXHJcbiAgIC8vIGNhdGNoaW5nIHRoZW0gcHJldmVudHMgZmFpbHVyZSBvZiB0aGUgcHJvZ3JhbS5cclxuICAgdHJ5IHtcclxuICAgICAgLy8gQXJyYXkgb2YgY2lyY3VpdCBvYmplY3RzXHJcbiAgICAgIGxldCBjaXJjdWl0T2JqZWN0czogb2JqZWN0W10gPSBbXTtcclxuXHJcbiAgICAgIC8vIFBhcnNlIGVhY2ggc3RyaW5nIGludG8gYW4gb2JqZWN0IGluZGl2aWR1YWxseSBhbmQgYWRkIHRvIGFycmF5XHJcbiAgICAgIGZvciAobGV0IGNpcmN1aXRPYmplY3RTdHJpbmcgb2YgY2lyY3VpdE9iamVjdFN0cmluZ3MpIHtcclxuICAgICAgICAgbGV0IGNpcmN1aXRPYmplY3QgPSBKU09OLnBhcnNlKGNpcmN1aXRPYmplY3RTdHJpbmcpO1xyXG4gICAgICAgICBjaXJjdWl0T2JqZWN0cy5wdXNoKGNpcmN1aXRPYmplY3QpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAgICAvLyBGdW5jdGlvbiBjb21wbGV0ZSwgcmV0dXJuIGFycmF5IG9mIG9iamVjdHNcclxuICAgICAgICAgLypMT0dTVEFSVCovY29uc29sZS5pbmZvKFwiQ2lyY3VpdCBvYmplY3RzICVvIHN1Y2Nlc3NmdWxseSBwYXJzZWRcIiwgW2NpcmN1aXRPYmplY3RzXSkvKkxPR0VORCovXHJcbiAgICAgIGRlZmVycmVkLnJlc29sdmUoY2lyY3VpdE9iamVjdHMpXHJcblxyXG4gICB9IGNhdGNoIChlKSB7XHJcbiAgICAgIC8vIEFsbW9zdCBkZWZpbml0ZWx5IGEgZmlsZSBmb3JtYXQgaXNzdWVcclxuICAgICAgaWYgKGUgaW5zdGFuY2VvZiBTeW50YXhFcnJvcilcclxuICAgICAgICAgICAgLypMT0dTVEFSVCovY29uc29sZS5lcnJvcihcIkVycm9yIGluIGZpbGUgb2JqZWN0IGZvcm1hdDogJW9cIiwgW2VdKTsvKkxPR0VORCovXHJcbiAgICAgIC8vIEZ1bmN0aW9uIGZhaWxlZCwgcmV0dXJuIGVycm9yIHRleHRcclxuICAgICAgZGVmZXJyZWQucmVqZWN0KFwiRXJyb3IgaW4gZmlsZSBvYmplY3QgZm9ybWF0XCIpXHJcbiAgIH1cclxuXHJcbiAgIC8vIEFsbG93IGNhbGxlciB0byBzZWUgd2hlbiBmdW5jdGlvbiBjb21wbGV0ZXNcclxuICAgcmV0dXJuIGRlZmVycmVkLnByb21pc2UoKTtcclxufVxyXG4iXX0=