export default function getStringFromFileInput(fileInput) {
    let deferred = $.Deferred();
    let reader = new FileReader;
    let files = fileInput.files;
    reader.onloadstart = function (event) {
        console.debug("Read of %o started with %o", [this.result], [event]);
    };
    reader.onabort = function (event) {
        console.error("Read of %o aborted with %o", [this.result], [event]);
        deferred.reject("File read aborted");
    };
    reader.onerror = function (event) {
        console.error("Read of %o failed with %o", [this.result], [event]);
        deferred.reject("File could not be read");
    };
    reader.onload = function (event) {
        console.info("Read of %o successfully complete with %o", [this.result], [event]);
        let fileString = reader.result;
        if (files && files[0]) {
            deferred.resolve(files[0], fileString);
        }
        else {
            deferred.reject("File undefined");
        }
    };
    if (files && files[0]) {
        try {
            reader.readAsText(files[0]);
        }
        catch (e) {
            console.error("Read of %o failed with %o", [files[0]], [e]);
            deferred.reject("File could not be read as string");
        }
    }
    else {
        deferred.reject("File undefined");
    }
    return deferred.promise();
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLWdldFN0cmluZ0Zyb21GaWxlSW5wdXQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi90eXBlc2NyaXB0L2ZpbGVJTy9sb2FkL2Rhc2ltLy1nZXRTdHJpbmdGcm9tRmlsZUlucHV0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE1BQU0sQ0FBQyxPQUFPLFVBQVUsc0JBQXNCLENBQzNDLFNBQTJCO0lBSTNCLElBQUksUUFBUSxHQUFHLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUc1QixJQUFJLE1BQU0sR0FBRyxJQUFJLFVBQVUsQ0FBQztJQUU1QixJQUFJLEtBQUssR0FBRyxTQUFTLENBQUMsS0FBSyxDQUFDO0lBRzVCLE1BQU0sQ0FBQyxXQUFXLEdBQUcsVUFBVSxLQUFLO1FBQ2xCLE9BQU8sQ0FBQyxLQUFLLENBQUMsNEJBQTRCLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO0lBQ3RGLENBQUMsQ0FBQztJQUdGLE1BQU0sQ0FBQyxPQUFPLEdBQUcsVUFBVSxLQUFLO1FBQ2QsT0FBTyxDQUFDLEtBQUssQ0FBQyw0QkFBNEIsRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7UUFFbkYsUUFBUSxDQUFDLE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQyxDQUFBO0lBQ3ZDLENBQUMsQ0FBQztJQUdGLE1BQU0sQ0FBQyxPQUFPLEdBQUcsVUFBVSxLQUFLO1FBQ2QsT0FBTyxDQUFDLEtBQUssQ0FBQywyQkFBMkIsRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7UUFFbEYsUUFBUSxDQUFDLE1BQU0sQ0FBQyx3QkFBd0IsQ0FBQyxDQUFBO0lBQzVDLENBQUMsQ0FBQztJQUdGLE1BQU0sQ0FBQyxNQUFNLEdBQUcsVUFBVSxLQUFLO1FBQ2IsT0FBTyxDQUFDLElBQUksQ0FBQywwQ0FBMEMsRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7UUFDaEcsSUFBSSxVQUFVLEdBQVcsTUFBTSxDQUFDLE1BQWdCLENBQUM7UUFDakQsSUFBSSxLQUFLLElBQUksS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFO1lBQ3BCLFFBQVEsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFLFVBQVUsQ0FBQyxDQUFBO1NBQ3hDO2FBQU07WUFFSixRQUFRLENBQUMsTUFBTSxDQUFDLGdCQUFnQixDQUFDLENBQUM7U0FDcEM7SUFDSixDQUFDLENBQUE7SUFFRCxJQUFJLEtBQUssSUFBSSxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUU7UUFFcEIsSUFBSTtZQUdELE1BQU0sQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDOUI7UUFBQyxPQUFPLENBQUMsRUFBRTtZQUNNLE9BQU8sQ0FBQyxLQUFLLENBQUMsMkJBQTJCLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFFM0UsUUFBUSxDQUFDLE1BQU0sQ0FBQyxrQ0FBa0MsQ0FBQyxDQUFDO1NBQ3REO0tBQ0g7U0FBTTtRQUVKLFFBQVEsQ0FBQyxNQUFNLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztLQUNwQztJQUtELE9BQU8sUUFBUSxDQUFDLE9BQU8sRUFBRSxDQUFDO0FBQzdCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRTdHJpbmdGcm9tRmlsZUlucHV0KFxyXG4gICBmaWxlSW5wdXQ6IEhUTUxJbnB1dEVsZW1lbnQpOiBKUXVlcnlQcm9taXNlPHt9PiB7XHJcblxyXG4gICAvLyBVc2VkIHRvIHF1ZXVlIGFzeW5jaHJvbm91cyBhY3Rpb25zIHdoaWNoIHJlcXVpcmUgdGhlIG91dHB1dCBvZiBwcmV2aW91c1xyXG4gICAvLyBhY3Rpb25zXHJcbiAgIGxldCBkZWZlcnJlZCA9ICQuRGVmZXJyZWQoKTtcclxuXHJcbiAgIC8vIENyZWF0ZSBBc3luY2hyb25vdXMgZmlsZSByZWFkZXJcclxuICAgbGV0IHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyO1xyXG5cclxuICAgbGV0IGZpbGVzID0gZmlsZUlucHV0LmZpbGVzO1xyXG5cclxuICAgLy8gRXZlbnQgY2FsbGVkIHdoZW4gcmVhZCBzdGFydGVkXHJcbiAgIHJlYWRlci5vbmxvYWRzdGFydCA9IGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICAgICAvKkxPR1NUQVJUKi9jb25zb2xlLmRlYnVnKFwiUmVhZCBvZiAlbyBzdGFydGVkIHdpdGggJW9cIiwgW3RoaXMucmVzdWx0XSwgW2V2ZW50XSk7LypMT0dFTkQqL1xyXG4gICB9O1xyXG5cclxuICAgLy8gRXZlbnQgY2FsbGVkIGlmIHJlYWQgYWJvcnRlZCAoTm90IGV4cGVjdGVkIHRvIGV2ZXIgaGFwcGVuKVxyXG4gICByZWFkZXIub25hYm9ydCA9IGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICAgICAvKkxPR1NUQVJUKi9jb25zb2xlLmVycm9yKFwiUmVhZCBvZiAlbyBhYm9ydGVkIHdpdGggJW9cIiwgW3RoaXMucmVzdWx0XSwgW2V2ZW50XSk7LypMT0dFTkQqL1xyXG4gICAgICAvLyBBc3luYyBhY3Rpb24gZmFpbGVkLCBhYm9ydCBxdWV1ZVxyXG4gICAgICBkZWZlcnJlZC5yZWplY3QoXCJGaWxlIHJlYWQgYWJvcnRlZFwiKVxyXG4gICB9O1xyXG5cclxuICAgLy8gRXZlbnQgY2FsbGVkIGlmIGVycm9yIG9jY3VycyBkdXJpbmcgcmVhZFxyXG4gICByZWFkZXIub25lcnJvciA9IGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICAgICAvKkxPR1NUQVJUKi9jb25zb2xlLmVycm9yKFwiUmVhZCBvZiAlbyBmYWlsZWQgd2l0aCAlb1wiLCBbdGhpcy5yZXN1bHRdLCBbZXZlbnRdKTsvKkxPR0VORCovXHJcbiAgICAgIC8vIEFzeW5jIGFjdGlvbiBmYWlsZWQsIGFib3J0IHF1ZXVlXHJcbiAgICAgIGRlZmVycmVkLnJlamVjdChcIkZpbGUgY291bGQgbm90IGJlIHJlYWRcIilcclxuICAgfTtcclxuXHJcbiAgIC8vIEV2ZW50IGNhbGxlZCBpZiByZWFkIGNvbXBsZXRlZCBzdWNjZXNzZnVsbHlcclxuICAgcmVhZGVyLm9ubG9hZCA9IGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICAgICAvKkxPR1NUQVJUKi9jb25zb2xlLmluZm8oXCJSZWFkIG9mICVvIHN1Y2Nlc3NmdWxseSBjb21wbGV0ZSB3aXRoICVvXCIsIFt0aGlzLnJlc3VsdF0sIFtldmVudF0pOy8qTE9HRU5EKi9cclxuICAgICAgbGV0IGZpbGVTdHJpbmc6IHN0cmluZyA9IHJlYWRlci5yZXN1bHQgYXMgc3RyaW5nOyAvL1RPRE9cclxuICAgICAgaWYgKGZpbGVzICYmIGZpbGVzWzBdKSB7XHJcbiAgICAgICAgIGRlZmVycmVkLnJlc29sdmUoZmlsZXNbMF0sIGZpbGVTdHJpbmcpXHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgIC8vIEFzeW5jIGFjdGlvbiBmYWlsZWQsIGFib3J0IHF1ZXVlXHJcbiAgICAgICAgIGRlZmVycmVkLnJlamVjdChcIkZpbGUgdW5kZWZpbmVkXCIpO1xyXG4gICAgICB9XHJcbiAgIH1cclxuXHJcbiAgIGlmIChmaWxlcyAmJiBmaWxlc1swXSkge1xyXG4gICAgICAvLyBDYXRjaGVzIG90aGVyIGVycm9ycyBzdWNoIGFzIGlmIHRoZSBmaWxlIG9wamVjdCBpcyB1bmRlZmluZWRcclxuICAgICAgdHJ5IHtcclxuICAgICAgICAgLy8gUmV0cmVpdmUgZmlsZSBmcm9tIGZpbGUgaW5wdXQsIGZpbGUgaW5wdXQgaXMgY29uZmlndXJlZFxyXG4gICAgICAgICAvLyB0byBvcGVuIGEgc2luZ2xlIGZpbGUgb25seSBidXQgc3RpbGwgcmV0dXJucyBhcyBhcnJheS5cclxuICAgICAgICAgcmVhZGVyLnJlYWRBc1RleHQoZmlsZXNbMF0pO1xyXG4gICAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgIC8qTE9HU1RBUlQqL2NvbnNvbGUuZXJyb3IoXCJSZWFkIG9mICVvIGZhaWxlZCB3aXRoICVvXCIsIFtmaWxlc1swXV0sIFtlXSk7LypMT0dFTkQqL1xyXG4gICAgICAgICAvLyBBc3luYyBhY3Rpb24gZmFpbGVkLCBhYm9ydCBxdWV1ZVxyXG4gICAgICAgICBkZWZlcnJlZC5yZWplY3QoXCJGaWxlIGNvdWxkIG5vdCBiZSByZWFkIGFzIHN0cmluZ1wiKTtcclxuICAgICAgfVxyXG4gICB9IGVsc2Uge1xyXG4gICAgICAvLyBBc3luYyBhY3Rpb24gZmFpbGVkLCBhYm9ydCBxdWV1ZVxyXG4gICAgICBkZWZlcnJlZC5yZWplY3QoXCJGaWxlIHVuZGVmaW5lZFwiKTtcclxuICAgfVxyXG5cclxuXHJcblxyXG4gICAvLyBSZXR1cm4gcHJvbWlzZSB0aGF0IGFzeW5jIGZ1bmN0aW9uIHdpbGwgZXZlbnR1YWxseSBmaW5pc2hcclxuICAgcmV0dXJuIGRlZmVycmVkLnByb21pc2UoKTtcclxufVxyXG5cclxuIl19