import vector from "../-vector";
export function sumWithS(inVector) {
    return (...sumVectors) => {
        return vector(add(inVector, sum(sumVectors)));
    };
}
export function sumWithM(inVectors) {
    return (...sumVectors) => {
        let b = sum(sumVectors);
        return vector(inVectors.map(a => {
            return add(a, b);
        }));
    };
}
function add(a, b) {
    return {
        x: (a.x || 0) + (b.x || 0),
        y: (a.y || 0) + (b.y || 0)
    };
}
function sum(inVectors) {
    let sum = { x: 0, y: 0 };
    inVectors.forEach(inVector => {
        sum = add(sum, inVector);
    });
    return sum;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLXN1bVdpdGguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi90eXBlc2NyaXB0L192ZWN0b3IvLXN1bVdpdGgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxNQUFrQixNQUFNLFlBQVksQ0FBQztBQUU1QyxNQUFNLFVBQVUsUUFBUSxDQUFDLFFBQWdCO0lBQ3RDLE9BQU8sQ0FBQyxHQUFHLFVBQTZCLEVBQUUsRUFBRTtRQUN6QyxPQUFPLE1BQU0sQ0FBQyxHQUFHLENBQUMsUUFBUSxFQUFFLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDakQsQ0FBQyxDQUFDO0FBQ0wsQ0FBQztBQUVELE1BQU0sVUFBVSxRQUFRLENBQUMsU0FBbUI7SUFDekMsT0FBTyxDQUFDLEdBQUcsVUFBNkIsRUFBRSxFQUFFO1FBQ3pDLElBQUksQ0FBQyxHQUFHLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQTtRQUN2QixPQUFPLE1BQU0sQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFO1lBQzdCLE9BQU8sR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUNwQixDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQyxDQUFBO0FBQ0osQ0FBQztBQUVELFNBQVMsR0FBRyxDQUFDLENBQWtCLEVBQUUsQ0FBa0I7SUFDaEQsT0FBTztRQUNKLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUMxQixDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7S0FDNUIsQ0FBQTtBQUNKLENBQUM7QUFFRCxTQUFTLEdBQUcsQ0FBQyxTQUE0QjtJQUN0QyxJQUFJLEdBQUcsR0FBVyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDO0lBQ2pDLFNBQVMsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDMUIsR0FBRyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEVBQUUsUUFBUSxDQUFDLENBQUE7SUFDM0IsQ0FBQyxDQUFDLENBQUM7SUFDSCxPQUFPLEdBQUcsQ0FBQztBQUNkLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdmVjdG9yLCB7IFZlY3RvciB9IGZyb20gXCIuLi8tdmVjdG9yXCI7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gc3VtV2l0aFMoaW5WZWN0b3I6IFZlY3Rvcikge1xyXG4gICByZXR1cm4gKC4uLnN1bVZlY3RvcnM6IFBhcnRpYWw8VmVjdG9yPltdKSA9PiB7XHJcbiAgICAgIHJldHVybiB2ZWN0b3IoYWRkKGluVmVjdG9yLCBzdW0oc3VtVmVjdG9ycykpKTtcclxuICAgfTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHN1bVdpdGhNKGluVmVjdG9yczogVmVjdG9yW10pIHtcclxuICAgcmV0dXJuICguLi5zdW1WZWN0b3JzOiBQYXJ0aWFsPFZlY3Rvcj5bXSkgPT4ge1xyXG4gICAgICBsZXQgYiA9IHN1bShzdW1WZWN0b3JzKVxyXG4gICAgICByZXR1cm4gdmVjdG9yKGluVmVjdG9ycy5tYXAoYSA9PiB7XHJcbiAgICAgICAgIHJldHVybiBhZGQoYSwgYik7XHJcbiAgICAgIH0pKTtcclxuICAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBhZGQoYTogUGFydGlhbDxWZWN0b3I+LCBiOiBQYXJ0aWFsPFZlY3Rvcj4pIHtcclxuICAgcmV0dXJuIHtcclxuICAgICAgeDogKGEueCB8fCAwKSArIChiLnggfHwgMCksXHJcbiAgICAgIHk6IChhLnkgfHwgMCkgKyAoYi55IHx8IDApXHJcbiAgIH1cclxufVxyXG5cclxuZnVuY3Rpb24gc3VtKGluVmVjdG9yczogUGFydGlhbDxWZWN0b3I+W10pIHtcclxuICAgbGV0IHN1bTogVmVjdG9yID0geyB4OiAwLCB5OiAwIH07XHJcbiAgIGluVmVjdG9ycy5mb3JFYWNoKGluVmVjdG9yID0+IHtcclxuICAgICAgc3VtID0gYWRkKHN1bSwgaW5WZWN0b3IpXHJcbiAgIH0pO1xyXG4gICByZXR1cm4gc3VtO1xyXG59XHJcblxyXG5cclxuIl19