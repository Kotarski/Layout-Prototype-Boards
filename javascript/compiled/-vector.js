import asPolar from "./_vector/-asPolar";
import centre from "./_vector/-centre";
import centreWith from "./_vector/-centreWith";
import getAngleTo from "./_vector/-getAngleTo";
import isCloseTo from "./_vector/-isCloseTo";
import { isVector, isVectorArray } from "./_vector/-isVector";
import { rotateM, rotateS } from "./_vector/-rotate";
import { scaleMapS, scaleWithM, scaleWithS } from "./_vector/-scaleWith";
import { snapToGridM, snapToGridS } from "./_vector/-snapToGrid";
import standardise from "./_vector/-standardise";
import sum from "./_vector/-sum";
import { sumWithM, sumWithS } from "./_vector/-sumWith";
const singleExtension = (inVector) => {
    return {
        vector: inVector,
        x: inVector.x,
        y: inVector.y,
        getAngleTo: getAngleTo(inVector),
        asPolar: asPolar(inVector),
        isCloseTo: isCloseTo(inVector),
        sumWith: sumWithS(inVector),
        scaleWith: scaleWithS(inVector),
        scaleMap: scaleMapS(inVector),
        centreWith: centreWith(inVector),
        rotate: rotateS(inVector),
        snapToGrid: snapToGridS(inVector)
    };
};
const multiExtension = (inVectors) => {
    return {
        vectors: inVectors,
        sum: sum(inVectors),
        sumWith: sumWithM(inVectors),
        scaleWith: scaleWithM(inVectors),
        rotate: rotateM(inVectors),
        centre: centre(inVectors),
        snapToGrid: snapToGridM(inVectors)
    };
};
function vectorFunction(inVectors, ...moreVectors) {
    const vCopy = standardise(inVectors, ...moreVectors);
    const ext = (vCopy instanceof Array)
        ? multiExtension(vCopy)
        : singleExtension(vCopy);
    return Object.assign({}, ext);
}
const vectorObject = {
    sumWith: sumWithS,
    scaleWith: scaleWithS,
    getAngleTo: getAngleTo,
    isCloseTo: isCloseTo,
    centreWith: centreWith,
    rotate: rotateS,
    snapToGrid: snapToGridS,
    asPolar: asPolar,
    standardise: standardise,
    isVector: isVector,
    isVectorArray: isVectorArray,
};
const vector = Object.assign(vectorFunction, vectorObject);
export default vector;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLXZlY3Rvci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3R5cGVzY3JpcHQvLXZlY3Rvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLE9BQU8sTUFBTSxvQkFBb0IsQ0FBQztBQUN6QyxPQUFPLE1BQU0sTUFBTSxtQkFBbUIsQ0FBQztBQUN2QyxPQUFPLFVBQVUsTUFBTSx1QkFBdUIsQ0FBQztBQUMvQyxPQUFPLFVBQVUsTUFBTSx1QkFBdUIsQ0FBQztBQUMvQyxPQUFPLFNBQVMsTUFBTSxzQkFBc0IsQ0FBQztBQUM3QyxPQUFPLEVBQUUsUUFBUSxFQUFFLGFBQWEsRUFBRSxNQUFNLHFCQUFxQixDQUFBO0FBQzdELE9BQU8sRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDckQsT0FBTyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsVUFBVSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDekUsT0FBTyxFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUNqRSxPQUFPLFdBQVcsTUFBTSx3QkFBd0IsQ0FBQztBQUNqRCxPQUFPLEdBQUcsTUFBTSxnQkFBZ0IsQ0FBQztBQUNqQyxPQUFPLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBUXhELE1BQU0sZUFBZSxHQUFHLENBQUMsUUFBZ0IsRUFBRSxFQUFFO0lBQzFDLE9BQU87UUFDSixNQUFNLEVBQUUsUUFBUTtRQUNoQixDQUFDLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFDYixDQUFDLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFDYixVQUFVLEVBQUUsVUFBVSxDQUFDLFFBQVEsQ0FBQztRQUNoQyxPQUFPLEVBQUUsT0FBTyxDQUFDLFFBQVEsQ0FBQztRQUMxQixTQUFTLEVBQUUsU0FBUyxDQUFDLFFBQVEsQ0FBQztRQUU5QixPQUFPLEVBQUUsUUFBUSxDQUFDLFFBQVEsQ0FBQztRQUMzQixTQUFTLEVBQUUsVUFBVSxDQUFDLFFBQVEsQ0FBQztRQUMvQixRQUFRLEVBQUUsU0FBUyxDQUFDLFFBQVEsQ0FBQztRQUM3QixVQUFVLEVBQUUsVUFBVSxDQUFDLFFBQVEsQ0FBQztRQUNoQyxNQUFNLEVBQUUsT0FBTyxDQUFDLFFBQVEsQ0FBQztRQUN6QixVQUFVLEVBQUUsV0FBVyxDQUFDLFFBQVEsQ0FBQztLQUNuQyxDQUFBO0FBQ0osQ0FBQyxDQUFBO0FBRUQsTUFBTSxjQUFjLEdBQUcsQ0FBQyxTQUFtQixFQUFFLEVBQUU7SUFDNUMsT0FBTztRQUNKLE9BQU8sRUFBRSxTQUFTO1FBQ2xCLEdBQUcsRUFBRSxHQUFHLENBQUMsU0FBUyxDQUFDO1FBQ25CLE9BQU8sRUFBRSxRQUFRLENBQUMsU0FBUyxDQUFDO1FBQzVCLFNBQVMsRUFBRSxVQUFVLENBQUMsU0FBUyxDQUFDO1FBQ2hDLE1BQU0sRUFBRSxPQUFPLENBQUMsU0FBUyxDQUFDO1FBQzFCLE1BQU0sRUFBRSxNQUFNLENBQUMsU0FBUyxDQUFDO1FBQ3pCLFVBQVUsRUFBRSxXQUFXLENBQUMsU0FBUyxDQUFDO0tBQ3BDLENBQUE7QUFDSixDQUFDLENBQUE7QUFTRCxTQUFTLGNBQWMsQ0FBNkMsU0FBWSxFQUFFLEdBQUcsV0FBd0I7SUFLMUcsTUFBTSxLQUFLLEdBQUcsV0FBVyxDQUFDLFNBQVMsRUFBRSxHQUFHLFdBQVcsQ0FBQyxDQUFDO0lBRXJELE1BQU0sR0FBRyxHQUFHLENBQUMsS0FBSyxZQUFZLEtBQUssQ0FBQztRQUNqQyxDQUFDLENBQUMsY0FBYyxDQUFDLEtBQUssQ0FBQztRQUN2QixDQUFDLENBQUMsZUFBZSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBRzVCLE9BQU8sTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsR0FBRyxDQUkzQixDQUFDO0FBQ0wsQ0FBQztBQUNELE1BQU0sWUFBWSxHQUFHO0lBQ2xCLE9BQU8sRUFBRSxRQUFRO0lBQ2pCLFNBQVMsRUFBRSxVQUFVO0lBQ3JCLFVBQVUsRUFBRSxVQUFVO0lBQ3RCLFNBQVMsRUFBRSxTQUFTO0lBQ3BCLFVBQVUsRUFBRSxVQUFVO0lBQ3RCLE1BQU0sRUFBRSxPQUFPO0lBQ2YsVUFBVSxFQUFFLFdBQVc7SUFDdkIsT0FBTyxFQUFFLE9BQU87SUFDaEIsV0FBVyxFQUFFLFdBQVc7SUFDeEIsUUFBUSxFQUFFLFFBQVE7SUFDbEIsYUFBYSxFQUFFLGFBQWE7Q0FDOUIsQ0FBQTtBQUVELE1BQU0sTUFBTSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsY0FBYyxFQUFFLFlBQVksQ0FBQyxDQUFDO0FBRTNELGVBQWUsTUFBTSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGFzUG9sYXIgZnJvbSBcIi4vX3ZlY3Rvci8tYXNQb2xhclwiO1xyXG5pbXBvcnQgY2VudHJlIGZyb20gXCIuL192ZWN0b3IvLWNlbnRyZVwiO1xyXG5pbXBvcnQgY2VudHJlV2l0aCBmcm9tIFwiLi9fdmVjdG9yLy1jZW50cmVXaXRoXCI7XHJcbmltcG9ydCBnZXRBbmdsZVRvIGZyb20gXCIuL192ZWN0b3IvLWdldEFuZ2xlVG9cIjtcclxuaW1wb3J0IGlzQ2xvc2VUbyBmcm9tIFwiLi9fdmVjdG9yLy1pc0Nsb3NlVG9cIjtcclxuaW1wb3J0IHsgaXNWZWN0b3IsIGlzVmVjdG9yQXJyYXkgfSBmcm9tIFwiLi9fdmVjdG9yLy1pc1ZlY3RvclwiXHJcbmltcG9ydCB7IHJvdGF0ZU0sIHJvdGF0ZVMgfSBmcm9tIFwiLi9fdmVjdG9yLy1yb3RhdGVcIjtcclxuaW1wb3J0IHsgc2NhbGVNYXBTLCBzY2FsZVdpdGhNLCBzY2FsZVdpdGhTIH0gZnJvbSBcIi4vX3ZlY3Rvci8tc2NhbGVXaXRoXCI7XHJcbmltcG9ydCB7IHNuYXBUb0dyaWRNLCBzbmFwVG9HcmlkUyB9IGZyb20gXCIuL192ZWN0b3IvLXNuYXBUb0dyaWRcIjtcclxuaW1wb3J0IHN0YW5kYXJkaXNlIGZyb20gXCIuL192ZWN0b3IvLXN0YW5kYXJkaXNlXCI7XHJcbmltcG9ydCBzdW0gZnJvbSBcIi4vX3ZlY3Rvci8tc3VtXCI7XHJcbmltcG9ydCB7IHN1bVdpdGhNLCBzdW1XaXRoUyB9IGZyb20gXCIuL192ZWN0b3IvLXN1bVdpdGhcIjtcclxuXHJcbmV4cG9ydCB0eXBlIFZlY3RvciA9IHsgeDogbnVtYmVyLCB5OiBudW1iZXIgfTtcclxuZXhwb3J0IHR5cGUgTFZlY3RvciA9IFZlY3RvcjtcclxuZXhwb3J0IHR5cGUgVVZlY3RvciA9IHsgWDogbnVtYmVyLCBZOiBudW1iZXIgfTtcclxuZXhwb3J0IHR5cGUgQVZlY3RvciA9IFtudW1iZXIsIG51bWJlcl07XHJcbmV4cG9ydCB0eXBlIEFueVZlY3RvciA9IExWZWN0b3IgfCBVVmVjdG9yIHwgQVZlY3RvcjtcclxuXHJcbmNvbnN0IHNpbmdsZUV4dGVuc2lvbiA9IChpblZlY3RvcjogVmVjdG9yKSA9PiB7XHJcbiAgIHJldHVybiB7XHJcbiAgICAgIHZlY3RvcjogaW5WZWN0b3IsXHJcbiAgICAgIHg6IGluVmVjdG9yLngsXHJcbiAgICAgIHk6IGluVmVjdG9yLnksXHJcbiAgICAgIGdldEFuZ2xlVG86IGdldEFuZ2xlVG8oaW5WZWN0b3IpLFxyXG4gICAgICBhc1BvbGFyOiBhc1BvbGFyKGluVmVjdG9yKSxcclxuICAgICAgaXNDbG9zZVRvOiBpc0Nsb3NlVG8oaW5WZWN0b3IpLFxyXG5cclxuICAgICAgc3VtV2l0aDogc3VtV2l0aFMoaW5WZWN0b3IpLFxyXG4gICAgICBzY2FsZVdpdGg6IHNjYWxlV2l0aFMoaW5WZWN0b3IpLFxyXG4gICAgICBzY2FsZU1hcDogc2NhbGVNYXBTKGluVmVjdG9yKSxcclxuICAgICAgY2VudHJlV2l0aDogY2VudHJlV2l0aChpblZlY3RvciksXHJcbiAgICAgIHJvdGF0ZTogcm90YXRlUyhpblZlY3RvciksXHJcbiAgICAgIHNuYXBUb0dyaWQ6IHNuYXBUb0dyaWRTKGluVmVjdG9yKVxyXG4gICB9XHJcbn1cclxuXHJcbmNvbnN0IG11bHRpRXh0ZW5zaW9uID0gKGluVmVjdG9yczogVmVjdG9yW10pID0+IHtcclxuICAgcmV0dXJuIHtcclxuICAgICAgdmVjdG9yczogaW5WZWN0b3JzLFxyXG4gICAgICBzdW06IHN1bShpblZlY3RvcnMpLFxyXG4gICAgICBzdW1XaXRoOiBzdW1XaXRoTShpblZlY3RvcnMpLFxyXG4gICAgICBzY2FsZVdpdGg6IHNjYWxlV2l0aE0oaW5WZWN0b3JzKSxcclxuICAgICAgcm90YXRlOiByb3RhdGVNKGluVmVjdG9ycyksXHJcbiAgICAgIGNlbnRyZTogY2VudHJlKGluVmVjdG9ycyksXHJcbiAgICAgIHNuYXBUb0dyaWQ6IHNuYXBUb0dyaWRNKGluVmVjdG9ycylcclxuICAgfVxyXG59XHJcblxyXG50eXBlIFNpbmdsZVZlY3RvckludGVyZmFjZSA9IFJldHVyblR5cGU8dHlwZW9mIHNpbmdsZUV4dGVuc2lvbj47XHJcbnR5cGUgTXVsdGlWZWN0b3JJbnRlcmZhY2UgPSBSZXR1cm5UeXBlPHR5cGVvZiBtdWx0aUV4dGVuc2lvbj47XHJcblxyXG5mdW5jdGlvbiB2ZWN0b3JGdW5jdGlvbihpblZlY3RvcnM6IEFueVZlY3Rvcik6IFNpbmdsZVZlY3RvckludGVyZmFjZTtcclxuZnVuY3Rpb24gdmVjdG9yRnVuY3Rpb24oaW5WZWN0b3JzOiBudW1iZXIpOiBTaW5nbGVWZWN0b3JJbnRlcmZhY2U7XHJcbmZ1bmN0aW9uIHZlY3RvckZ1bmN0aW9uKGluVmVjdG9yczogQW55VmVjdG9yW10pOiBNdWx0aVZlY3RvckludGVyZmFjZTtcclxuZnVuY3Rpb24gdmVjdG9yRnVuY3Rpb24oaW5WZWN0b3JzOiBBbnlWZWN0b3IsIC4uLm1vcmVWZWN0b3JzOiBBbnlWZWN0b3JbXSk6IE11bHRpVmVjdG9ySW50ZXJmYWNlO1xyXG5mdW5jdGlvbiB2ZWN0b3JGdW5jdGlvbjxBIGV4dGVuZHMgQW55VmVjdG9yIHwgQW55VmVjdG9yW10gfCBudW1iZXI+KGluVmVjdG9yczogQSwgLi4ubW9yZVZlY3RvcnM6IEFueVZlY3RvcltdXHJcbik6IFNpbmdsZVZlY3RvckludGVyZmFjZSB8IE11bHRpVmVjdG9ySW50ZXJmYWNlIHtcclxuICAgLy8gY29uc3QgdmVjdG9yc0FzQXJyYXkgPSAoKGluVmVjdG9ycyBpbnN0YW5jZW9mIEFycmF5KSA/IGluVmVjdG9ycyA6IFtpblZlY3RvcnNdKSBhcyBBcnJheTxUPjtcclxuICAgLy8gY29uc3QgbW9yZVZlY3RvcnNBc0FycmF5ID0gKG1vcmVWZWN0b3JzICE9PSB1bmRlZmluZWQpID8gbW9yZVZlY3RvcnMgOiBbXTtcclxuXHJcbiAgIGNvbnN0IHZDb3B5ID0gc3RhbmRhcmRpc2UoaW5WZWN0b3JzLCAuLi5tb3JlVmVjdG9ycyk7XHJcblxyXG4gICBjb25zdCBleHQgPSAodkNvcHkgaW5zdGFuY2VvZiBBcnJheSlcclxuICAgICAgPyBtdWx0aUV4dGVuc2lvbih2Q29weSlcclxuICAgICAgOiBzaW5nbGVFeHRlbnNpb24odkNvcHkpO1xyXG5cclxuXHJcbiAgIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCBleHQpIGFzIChcclxuICAgICAgKChBICYgdHlwZW9mIG1vcmVWZWN0b3JzKSBleHRlbmRzIEFycmF5PEFueVZlY3Rvcj4gP1xyXG4gICAgICAgICBNdWx0aVZlY3RvckludGVyZmFjZSA6XHJcbiAgICAgICAgIFNpbmdsZVZlY3RvckludGVyZmFjZSlcclxuICAgKTtcclxufVxyXG5jb25zdCB2ZWN0b3JPYmplY3QgPSB7XHJcbiAgIHN1bVdpdGg6IHN1bVdpdGhTLFxyXG4gICBzY2FsZVdpdGg6IHNjYWxlV2l0aFMsXHJcbiAgIGdldEFuZ2xlVG86IGdldEFuZ2xlVG8sXHJcbiAgIGlzQ2xvc2VUbzogaXNDbG9zZVRvLFxyXG4gICBjZW50cmVXaXRoOiBjZW50cmVXaXRoLFxyXG4gICByb3RhdGU6IHJvdGF0ZVMsXHJcbiAgIHNuYXBUb0dyaWQ6IHNuYXBUb0dyaWRTLFxyXG4gICBhc1BvbGFyOiBhc1BvbGFyLFxyXG4gICBzdGFuZGFyZGlzZTogc3RhbmRhcmRpc2UsXHJcbiAgIGlzVmVjdG9yOiBpc1ZlY3RvcixcclxuICAgaXNWZWN0b3JBcnJheTogaXNWZWN0b3JBcnJheSxcclxufVxyXG5cclxuY29uc3QgdmVjdG9yID0gT2JqZWN0LmFzc2lnbih2ZWN0b3JGdW5jdGlvbiwgdmVjdG9yT2JqZWN0KTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IHZlY3RvcjtcclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuIl19